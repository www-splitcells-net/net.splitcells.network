#!/usr/bin/env python3
"""
SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-or-later
SPDX-FileCopyrightText: Contributors To The `net.splitcells.*` Projects

TODO Use string's substitute method, instead of string's replace.
TODO Support deployment to Docker and Kubernetes.
TODO Support executing as systemd service. Create a user service for that.
TODO Currently, there is not distinction between the name of the thing being executed and its namespace.
     This will probably create problems in the future, where you have multiple containers with the same namespace,
     but with different commands.
"""

__author__ = "Mārtiņš Avots"
__authors__ = ["Contributors To The `net.splitcells.*` Projects"]
__copyright__ = "Copyright 2024"
__license__ = "EPL-2.0 OR GPL-2.0-or-later"

import argparse
import logging
import os
import platform
import shutil
import subprocess
import sys

dockerFileServiceTemplate = """FROM docker.io/eclipse-temurin:21-jdk-noble
RUN apt clean
RUN apt update # This fixes install errors. It is unknown why this is the case.
RUN apt install --yes maven git python3 pip
ADD net.splitcells.network.worker.pom.xml /root/opt/$NAME_FOR_EXECUTION/pom.xml
# RUN pip install --break-system-packages playwright
# RUN playwright install --with-deps firefox # Install all OS dependencies, that are required for Playwright. Otherwise, Playwright cannot be used in Java.
RUN cd /root/opt/$NAME_FOR_EXECUTION/ && mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args="install-deps"
VOLUME /root/.local/
VOLUME /root/Documents/
VOLUME /root/.ssh/
VOLUME /root/.m2/
"""

pom = """<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>net.splitcells</groupId>
    <artifactId>network.worker.container.pom</artifactId>
    <version>1.0-SNAPSHOT</version>
    <dependencies>
        <dependency>
            <groupId>com.microsoft.playwright</groupId>
            <artifactId>playwright</artifactId>
            <version>1.45.0</version>
        </dependency>
    </dependencies>
</project>
"""

javaClassExecutionTemplate = """COPY deployable-jars/* /root/opt/$NAME_FOR_EXECUTION/jars/
WORKDIR /root/opt/$NAME_FOR_EXECUTION/
ENTRYPOINT ["/opt/java/openjdk/bin/java"]
CMD ["-cp", "./jars/*", "$CLASS_FOR_EXECUTION"]
"""

prepareExecution = """set -e
set -x
executionName="$executionName"
executionCommand="$executionCommand"
# Prepare file system.
mkdir -p $HOME/.local/state/$executionName/.m2/
mkdir -p $HOME/.local/state/$executionName/.ssh/
mkdir -p $HOME/.local/state/$executionName/.local/
mkdir -p $HOME/.local/state/$executionName/Documents/
mkdir -p ./target/
test -f target/program-$executionName && chmod +x target/program-$executionName # This file does not exist, when '--executable-path' is not set.
podman build -f "target/Dockerfile-$executionName" \\
    --tag "localhost/$executionName"  \\
    --arch string \\
    --log-level=warn # `--log-level=warn` is podman's default.
    # Logging is used, in order to better understand build runtime performance.
"""

prepareExecutionWithoutBuild = """set -e
set -x
executionName="$executionName"
executionCommand="$executionCommand"
# Prepare file system.
mkdir -p $HOME/.local/state/$executionName/.m2/
mkdir -p $HOME/.local/state/$executionName/.ssh/
mkdir -p $HOME/.local/state/$executionName/.local/
mkdir -p $HOME/.local/state/$executionName/Documents/
mkdir -p ./target/
test -f target/program-$executionName && chmod +x target/program-$executionName # This file does not exist, when '--executable-path' is not set.
"""

executeViaPodman = """
set -x
podman run --name "$executionName" \\
  --network slirp4netns:allow_host_loopback=true \\
  --rm \\
  -v $HOME/.local/state/$executionName/Documents:/root/Documents \\
  -v $HOME/.local/state/$executionName/.ssh:/root/.ssh \\
  -v $HOME/.local/state/$executionName/.m2:/root/.m2 \\
  -v $HOME/.local/state/$executionName/.local:/root/.local \\
  "$podmanParameters" \\
  "localhost/$executionName"
  #
  # allow_host_loopback is required, so that the software in the container can connect to the host.
"""

publishViaPodman = """
podman tag $executionName:latest codeberg.org/splitcells-net/$executionName:latest
podman push codeberg.org/splitcells-net/$executionName:latest
"""

def str2bool(arg):
    return arg == 'true'
if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="Executes a given program as isolated as possible with all program files being persisted at `$HOME/.local/state/$executionName/` and user input being located at `$HOME/Documents`." \
            + " Executions with different names have different persisted file locations and are therefore isolated more clearly, whereas executions with the same name are assumed to share data." \
            + " This is the CLI interface to the Splitcells Network Worker.")
    parser.add_argument('--name', dest='name', required=True, help="This is the name of the task being executed.")
    parser.add_argument('--command', dest='command'
                        , help="This is the shell command, to execute the task."
                               + "It consists of only one program call."
                               + " If scripts need to be executed one can use `sh -c \"[script]\"`."
                               + " Use this only, in order to integrate the environment with the software."
                               + " Prefer `--class-for-execution` instead.")
    # For each flag, there is an alternative name without hyphens ('-'), so these can easily be printed out and reused for this program. See `executeViaSshAt`.
    parser.add_argument('--executable-path', '--executablePath', dest='executablePath', help="Executes the given executable file. Only set this option or --command.")
    parser.add_argument('--class-for-execution', '--classForExecution', dest='classForExecution', help="This Java class is executed.")
    parser.add_argument('--use-host-documents', '--useHostDocuments', dest='useHostDocuments', required=False, type=str2bool, default=False, help="Determines whether to mount `~/Documents` or not. This should be avoided, in order to avoid file dependencies to the host system, which makes the execution more portable.")
    parser.add_argument('--publish-execution-image', '--publishExecutionImage', dest='publishExecutionImage', required=False, type=str2bool, default=False, help="If set to true, the given command is not executed, but a container image is published instead.")
    parser.add_argument('--verbose', dest='verbose', required=False, type=str2bool, default=False, help="If set to true, the output is verbose.")
    parser.add_argument('--only-build-image', '--onlyBuildImage', dest='onlyBuildImage', required=False, type=str2bool, default=False, help="If set to true, the created image is not executed.")
    parser.add_argument('--only-execute-image', '--onlyExecuteImage', dest='onlyExecuteImage', required=False, type=str2bool, default=False, help="If set to true, the previously created image is executed without building it.")
    parser.add_argument('--cpu-architecture', '--cpuArchitecture', dest='cpuArchitecture', help="Set the cpu architecture for the execution.")
    parser.add_argument('--auto-configure-cpu-architecture-explicitly', '--autoConfigureCpuArchExplicitly', dest='autoConfigureCpuArchExplicitly', required=False, type=str2bool, default=False
            , help="If set to false, the command's backend automatically determines the CPU architecture." \
                + " If set to true, the CPU architecture will be determined by this command and the determined architecture is propagated to the commands backend explicitly." \
                + " This is useful, because some tools have not a good CPU auto detection (i.e. Podman on RISC-V cannot find the fitting images based on the CPU arch automatically).")
    parser.add_argument('--port-publishing', '--portPublishing', dest='portPublishing', help="This is a comma separated list of `host-port:container-port`, that describes the port forwarding on the host.")
    parser.add_argument('--execute-via-ssh-at', '--executeViaSshAt', dest='executeViaSshAt', help="Execute the given command at an remote server via SSH. The format is `[user]@[address/network name]`.")
    parsedArgs = parser.parse_args()
    if parsedArgs.executeViaSshAt is not None:
        remoteScript = ""
        parsedVars = vars(parsedArgs)
        # TODO The method for generating the remote script is an hack.
        for key in parsedVars:
            if key != 'executeViaSshAt' and parsedVars[key] is not None:
                remoteScript += " --" + key + "=" + str(parsedVars[key]).replace("\'", "\\\'").replace("\"", "\\\"").replace("\n", "")
        remoteScript = "ssh " + parsedArgs.executeViaSshAt +  " -t \"  cd ~/.local/state/net.splitcells.repos/public/net.splitcells.network && bin/worker.execute" + remoteScript + "\""
        print(remoteScript)
        returnCode = subprocess.call(remoteScript, shell='False')
        if returnCode != 0:
            logging.error("Could not execute given command.");
        exit(returnCode)
    if not os.path.exists('./target'):
        os.mkdir('./target')
    # Create Dockerfile.
    dockerfile = dockerFileServiceTemplate
    if parsedArgs.command is not None:
        dockerfile += 'ENTRYPOINT ' + parsedArgs.command
    elif parsedArgs.executablePath is not None:
        programName = "program-" + parsedArgs.name
        shutil.copyfile(parsedArgs.executablePath, "./target/" + programName)
        dockerfile += "ADD ./" + programName + " /root/program\n"
        dockerfile += 'ENTRYPOINT /root/program'
    elif parsedArgs.classForExecution is not None:
        dockerfile += javaClassExecutionTemplate
    else:
        raise Exception('Either `--command` or `--class-for-execution` needs to be set.')
    dockerfile += dockerfile \
                .replace('$NAME_FOR_EXECUTION', parsedArgs.name) \
                .replace('$CLASS_FOR_EXECUTION', parsedArgs.classForExecution)
    file='target/Dockerfile-' + parsedArgs.name
    if os.path.exists(file):
        os.remove(file)
    with open(file, 'w') as fileToWrite:
        fileToWrite.write(dockerfile)
    with open('target/net.splitcells.network.worker.pom.xml', 'w') as pomFileToWrite:
            pomFileToWrite.write(pom)
    # Create and execute script.
    executionScript = ""
    if parsedArgs.onlyExecuteImage:
        executionScript = prepareExecutionWithoutBuild
    else:
        executionScript = prepareExecution
    if parsedArgs.publishExecutionImage:
        executionScript += publishViaPodman
    elif parsedArgs.onlyBuildImage:
        pass
    else:
        executionScript += executeViaPodman
    executionScript = executionScript.replace('"$executionName"', parsedArgs.name)
    if parsedArgs.command is not None:
        executionScript = executionScript.replace('"$executionCommand"', "'" + parsedArgs.command + "'")
    additionalPodmanArgs = ''
    if parsedArgs.portPublishing is not None:
        for portMapping in parsedArgs.portPublishing.split(','):
            additionalPodmanArgs += ' --publish ' + portMapping
    executionScript = executionScript.replace('"$podmanParameters"', additionalPodmanArgs)
    if parsedArgs.autoConfigureCpuArchExplicitly:
        executionScript = executionScript.replace('\n    --arch string \\\n', '\n    --arch ' + platform.uname().machine + ' \\\n')
    elif parsedArgs.cpuArchitecture is None:
        executionScript = executionScript.replace('\n    --arch string \\\n', '\n')
    else:
        executionScript = executionScript.replace('\n    --arch string \\\n', '\n    --arch ' + parsedArgs.cpuArchitecture + ' \\\n')
    if parsedArgs.verbose:
        executionScript = executionScript.replace('--log-level=info', '--log-level=debug')
    else:
        executionScript = executionScript.replace("\nset -x\n", "\n\n")
    if parsedArgs.useHostDocuments:
        # TODO This replacement is done in a dirty way. Use a template variable instead.
        executionScript = executionScript.replace("-v $HOME/.local/state/$executionName/Documents:/root/Documents \\", "-v $HOME/Documents:/root/Documents \\")
    if parsedArgs.verbose:
        print(executionScript)
    # Execute program.
    returnCode = subprocess.call(executionScript, shell='True')
    if returnCode != 0:
        logging.error("Could not execute given command.");
    exit(returnCode)
