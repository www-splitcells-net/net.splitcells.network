#!/usr/bin/env python3
"""
SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-or-later
SPDX-FileCopyrightText: Contributors To The `net.splitcells.*` Projects
"""

__author__ = "Mārtiņš Avots"
__authors__ = ["Contributors To The `net.splitcells.*` Projects"]
__copyright__ = "Copyright 2024"
__license__ = "EPL-2.0 OR GPL-2.0-or-later"

import argparse
import os
import subprocess

dockerFileServiceTemplate = """
FROM docker.io/eclipse-temurin:21-jdk-jammy
RUN apt update
COPY target/jars /root/Documents/projects/$NAME_FOR_EXECUTION/jars/
WORKDIR /root/Documents/projects/$NAME_FOR_EXECUTION
ENTRYPOINT ["/opt/java/openjdk/bin/java"]
CMD ["-cp", "./jars/*", "$CLASS_FOR_EXECUTION"]
EXPOSE 80
"""
executeViaPodman = """
set -e
podman kill $NAME_FOR_EXECUTION || echo Service $NAME_FOR_EXECUTION was not already running.
podman build -f "target/Dockerfile-$NAME_FOR_EXECUTION" --tag localhost/$NAME_FOR_EXECUTION
podman run --name $NAME_FOR_EXECUTION --rm --publish 8080:8443 --detach localhost/$NAME_FOR_EXECUTION
rm "target/Dockerfile-$NAME_FOR_EXECUTION"
"""

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--class-for-execution', dest='classForExecution', required=True, help="This Java class is executed.")
    parser.add_argument('--name-for-execution', dest='nameForExecution', required=True
                        , help="Name for execution")
    parsedArgs = parser.parse_args()
    dockerfile = (dockerFileServiceTemplate
                  .replace('$NAME_FOR_EXECUTION', parsedArgs.nameForExecution)
                  .replace('$CLASS_FOR_EXECUTION', parsedArgs.classForExecution))
    if not os.path.exists('./target'):
        os.mkdir('./target')
    file='target/Dockerfile-' + parsedArgs.nameForExecution
    with open(file, 'w') as filetowrite:
        filetowrite.write(dockerfile)
    executionScript = (executeViaPodman
                       .replace('$NAME_FOR_EXECUTION', parsedArgs.nameForExecution)
                       .replace('$CLASS_FOR_EXECUTION', parsedArgs.classForExecution))
    returnCode = subprocess.call(executionScript, shell='True')
    if returnCode != 0:
        logging.error("Could not execute given command.");
    exit(returnCode)