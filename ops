{"version":1,"ops":[{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1620942215,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo1Mzg4MzM4Nzg="},"target":"122c27b38418ba09915fa0b15cb0003bbe0d33158901c85fb71886693d901fa5","message":"For this to work, the source code also have to comply with the grammar, when this issue is done.\n\n- [ ] Make grammar clean, so it's easy to process for translations.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1620945455,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo1Mzg4NTM4MjI="},"target":"122c27b38418ba09915fa0b15cb0003bbe0d33158901c85fb71886693d901fa5","message":"For this to work, the source code also have to comply with the grammar, when this issue is done.\n\n- [ ] Make grammar clean, so it's straight forward to process for translations and to understand.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1620945563,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo1Mzg4NTQzMzI="},"target":"122c27b38418ba09915fa0b15cb0003bbe0d33158901c85fb71886693d901fa5","message":"For this to work, the source code also have to comply with the grammar, when this issue is done.\n\n- [ ] Make grammar clean, so it's straight forward to process for translations and to understand.\n- [ ] Every grammar rule should represent only a meaning and not any technical grammar specific artifacts/rules.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1620949127,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo1Mzg4NzE3NTU="},"target":"122c27b38418ba09915fa0b15cb0003bbe0d33158901c85fb71886693d901fa5","message":"For this to work, the source code also have to comply with the grammar, when this issue is done.\n\n- [ ] Make grammar clean, so it's straight forward to process for translations and to understand.\n- [ ] Every grammar rule should represent only a meaning and not any technical grammar specific artifacts/rules.\n- [ ] Use string literals in order to simplify grammar source code.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1621208743,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo1Mzk4NDc2MjI="},"target":"122c27b38418ba09915fa0b15cb0003bbe0d33158901c85fb71886693d901fa5","message":"For this to work, the source code also have to comply with the grammar, when this issue is done.\n\n- [ ] Make grammar clean, so it's straight forward to process for translations and to understand.\n- [ ] Every grammar rule should represent only a meaning and not any technical grammar specific artifacts/rules.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1621208761,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo1Mzk4NDc2NDY="},"target":"122c27b38418ba09915fa0b15cb0003bbe0d33158901c85fb71886693d901fa5","message":"For this to work, the source code also have to comply with the grammar, when this issue is done.\n\n- [ ] Make grammar clean, so it's straight forward to process for translations and to understand.\n- [ ] Every grammar rule should represent only a meaning and not any technical grammar specific artifacts/rules.\n- [ ] Detailed Javadoc grammar.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1621210690,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo1Mzk4NTI3NDY="},"target":"122c27b38418ba09915fa0b15cb0003bbe0d33158901c85fb71886693d901fa5","message":"For this to work, the source code also have to comply with the grammar, when this issue is done.\n\n- [ ] Make grammar clean, so it's straight forward to process for translations and to understand.\n- [ ] Every grammar rule should represent only a meaning and not any technical grammar specific artifacts/rules.\n- [ ] Detailed Javadoc grammar.\n- [ ] Review grammar.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1625877144,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo1Njk2Mjk3Nzg="},"target":"122c27b38418ba09915fa0b15cb0003bbe0d33158901c85fb71886693d901fa5","message":"For this to work, the source code also have to comply with the grammar, when this issue is done.\n\n- [ ] Use JavaParser in order to support some standard Java things/classes via name resolution.\n- [ ] Make grammar clean, so it's straight forward to process for translations and to understand.\n- [ ] Every grammar rule should represent only a meaning and not any technical grammar specific artifacts/rules.\n- [ ] Detailed Javadoc grammar.\n- [ ] Review grammar.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1628983205,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo1ODg2NTQxMjQ="},"target":"122c27b38418ba09915fa0b15cb0003bbe0d33158901c85fb71886693d901fa5","message":"For this to work, the source code also have to comply with the grammar, when this issue is done.\n\n- [ ] Use JavaParser for translation only instead of the Java grammer,\nin order to support some standard Java things/classes/method via name resolution without creating own wrapper interfaces\nand objects.\n- [ ] Make grammar clean, so it's straight forward to process for translations and to understand.\n- [ ] Every grammar rule should represent only a meaning and not any technical grammar specific artifacts/rules.\n- [ ] Detailed Javadoc grammar.\n- [ ] Review grammar.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1629668558,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo1OTI2MDU1MDg="},"target":"122c27b38418ba09915fa0b15cb0003bbe0d33158901c85fb71886693d901fa5","message":"For this to work, the source code also have to comply with the grammar, when this issue is done.\n\n- [ ] Use JavaParser for translation only instead of the Java grammer,\nin order to support some standard Java things/classes/method via name resolution\nwithout creating own wrapper interfaces and objects.\n- [ ] Make grammar clean, so it's straight forward to process for translations and to understand.\n- [ ] Every grammar rule should represent only a meaning and not any technical grammar specific artifacts/rules.\n- [ ] Detailed Javadoc grammar.\n- [ ] Review grammar.\n- [ ] Test grammar on pure project.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1629670192,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo1OTI2MDg3MDM="},"target":"122c27b38418ba09915fa0b15cb0003bbe0d33158901c85fb71886693d901fa5","message":"For this to work, the source code also have to comply with the grammar, when this issue is done.\n\n- [ ] Use JavaParser for translation only instead of the Java grammer,\nin order to support some standard Java things/classes/method via name resolution\nwithout creating own wrapper interfaces and objects.\n- [ ] Make grammar clean, so it's straight forward to process for translations and to understand.\n- [ ] Every grammar rule should represent only a meaning and not any technical grammar specific artifacts/rules.\n- [ ] Detailed Javadoc grammar.\n- [ ] Review grammar.\n- [ ] Test grammar on project without external dependencies and which have to comply with this grammar to 100%.\nSuch projects are called pure projects.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1629671664,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo1OTI2MTE2OTQ="},"target":"122c27b38418ba09915fa0b15cb0003bbe0d33158901c85fb71886693d901fa5","message":"For this to work, the source code also have to comply with the grammar, when this issue is done.\n\n- [ ] Use JavaParser for translation only instead of the Java grammer,\nin order to support some standard Java things/classes/method via name resolution\nwithout creating own wrapper interfaces and objects.\n- [ ] Make grammar clean, so it's straight forward to process for translations and to understand.\n- [ ] Every grammar rule should represent only a meaning and not any technical grammar specific artifacts/rules.\n- [ ] Detailed Javadoc grammar.\n- [ ] Review grammar.\n- [ ] Disable checks for bootstrap code.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1631914289,"metadata":{"github-id":"UCE_lAHOFCNQW84xLOCQziRJcaQ"},"target":"122c27b38418ba09915fa0b15cb0003bbe0d33158901c85fb71886693d901fa5","message":"For this to work, the source code also have to comply with the grammar, when this issue is done.\n\n- [ ] Use JavaParser for translation only instead of the Java grammer,\nin order to support some standard Java things/classes/method via name resolution\nwithout creating own wrapper interfaces and objects.\n- [ ] Make grammar clean, so it's straight forward to process for translations and to understand.\n- [ ] Every grammar rule should represent only a meaning and not any technical grammar specific artifacts/rules.\n- [ ] Detailed Javadoc grammar.\n- [ ] Review grammar.\n- [ ] Disable checks for bootstrap code.\n- [ ] Create a pure part of the Dem project, that complies to the grammar.\nThis project is pure, because it should not use any outside dependencies and therefore\ncan be licensed completely at will (EPL + GPL).\nAlso, such projects may be transformed in such away, that it has minimal side effects.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1631918214,"metadata":{"github-id":"UCE_lAHOFCNQW84xLOCQziRJ1bk"},"target":"122c27b38418ba09915fa0b15cb0003bbe0d33158901c85fb71886693d901fa5","message":"For this to work, the source code also have to comply with the grammar, when this issue is done.\n\n- [ ] Use JavaParser for translation only instead of the Java grammer,\nin order to support some standard Java things/classes/method via name resolution\nwithout creating own wrapper interfaces and objects.\n- [ ] Make grammar clean, so it's straight forward to process for translations and to understand.\n- [ ] Every grammar rule should represent only a meaning and not any technical grammar specific artifacts/rules.\n- [ ] Detailed Javadoc grammar.\n- [ ] Review grammar.\n- [ ] Disable checks for bootstrap code.\n- [ ] Create a pure part of the Dem project, that complies to the grammar.\nThis project is pure, because it should not use any outside dependencies and therefore\ncan be licensed completely at will (EPL + GPL).\nAlso, such projects may be transformed in such away, that it has minimal side effects.\nNon-pure project will be called integration/core/sheath projects.\nPure project's will be called merger projects.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1632692405,"metadata":{"github-id":"UCE_lAHOFCNQW84xLOCQziSQuHk"},"target":"122c27b38418ba09915fa0b15cb0003bbe0d33158901c85fb71886693d901fa5","message":"For this to work, the source code also have to comply with the grammar, when this issue is done.\n\n- [ ] Use JavaParser for translation only instead of the Java grammer,\nin order to support some standard Java things/classes/method via name resolution\nwithout creating own wrapper interfaces and objects.\n- [ ] Make grammar clean, so it's straight forward to process for translations and to understand.\n- [ ] Every grammar rule should represent only a meaning and not any technical grammar specific artifacts/rules.\n- [ ] Detailed Javadoc grammar.\n- [ ] Review grammar.\n- [ ] Disable checks for bootstrap code.\n- [ ] Move a part of the Dem project, that complies to the grammar.\nSuch projects are called pure projects and are located at `project/pure/*`.\nThese projects are called pure, because it should not use any outside dependencies and therefore\ncan be licensed completely at will.\nAlso, such projects may be transformed in future in such a way, that it has minimal side effects.\nNon-pure project will be called integration/core/sheath projects.\nPure project's will be called merger projects.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1633123692,"metadata":{"github-id":"UCE_lAHOFCNQW84xLOCQziTNLXQ"},"target":"122c27b38418ba09915fa0b15cb0003bbe0d33158901c85fb71886693d901fa5","message":"For this to work, the source code also have to comply with the grammar, when this issue is done.\n\n- [x] Use JavaParser for translation only instead of the Java grammer,\nin order to support some standard Java things/classes/method via name resolution\nwithout creating own wrapper interfaces and objects.\n- [ ] Make grammar clean, so it's straight forward to process for translations and to understand.\n- [ ] Every grammar rule should represent only a meaning and not any technical grammar specific artifacts/rules.\n- [ ] Detailed Javadoc grammar.\n- [ ] Review grammar.\n- [ ] Disable checks for bootstrap code.\n- [ ] Move a part of the Dem project, that complies to the grammar.\nSuch projects are called pure projects and are located at `project/pure/*`.\nThese projects are called pure, because it should not use any outside dependencies and therefore\ncan be licensed completely at will.\nAlso, such projects may be transformed in future in such a way, that it has minimal side effects.\nNon-pure project will be called integration/core/sheath projects.\nPure project's will be called merger projects.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1633123695,"metadata":{"github-id":"UCE_lAHOFCNQW84xLOCQziTNLYI"},"target":"122c27b38418ba09915fa0b15cb0003bbe0d33158901c85fb71886693d901fa5","message":"For this to work, the source code also have to comply with the grammar, when this issue is done.\n\n- [ ] Use JavaParser for translation only instead of the Java grammer,\nin order to support some standard Java things/classes/method via name resolution\nwithout creating own wrapper interfaces and objects.\n- [ ] Make grammar clean, so it's straight forward to process for translations and to understand.\n- [ ] Every grammar rule should represent only a meaning and not any technical grammar specific artifacts/rules.\n- [ ] Detailed Javadoc grammar.\n- [ ] Review grammar.\n- [ ] Disable checks for bootstrap code.\n- [ ] Move a part of the Dem project, that complies to the grammar.\nSuch projects are called pure projects and are located at `project/pure/*`.\nThese projects are called pure, because it should not use any outside dependencies and therefore\ncan be licensed completely at will.\nAlso, such projects may be transformed in future in such a way, that it has minimal side effects.\nNon-pure project will be called integration/core/sheath projects.\nPure project's will be called merger projects.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1633123765,"metadata":{"github-id":"UCE_lAHOFCNQW84xLOCQziTNL0U"},"target":"122c27b38418ba09915fa0b15cb0003bbe0d33158901c85fb71886693d901fa5","message":"For this to work, the source code also have to comply with the grammar, when this issue is done.\n\n- [ ] Use JavaParser for translation only instead of the Java grammer,\nin order to support some standard Java things/classes/method via name resolution\nwithout creating own wrapper interfaces and objects.\n- [ ] Make grammar clean, so it's straight forward to process for translations and to understand.\n- [ ] Every grammar rule should represent only a meaning and not any technical grammar specific artifacts/rules.\n- [ ] Detailed Javadoc grammar.\n- [ ] Review grammar.\n- [ ] Disable checks for bootstrap code.\n- [ ] Move a part of the Dem project to a dedicated project, that complies to the grammar.\nThis project is a testing ground for the grammar.\nSuch projects are called pure projects and are located at `project/pure/*`.\nThese projects are called pure, because it should not use any outside dependencies and therefore\ncan be licensed completely at will.\nAlso, such projects may be transformed in future in such a way, that it has minimal side effects.\nNon-pure project will be called integration/core/sheath projects.\nPure project's will be called merger projects.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1634510178,"metadata":{"github-id":"UCE_lAHOFCNQW84xLOCQziVdPng"},"target":"122c27b38418ba09915fa0b15cb0003bbe0d33158901c85fb71886693d901fa5","message":"For this to work, the source code also have to comply with the grammar, when this issue is done.\n\n- [ ] Use JavaParser for translation only instead of the Java grammer,\nin order to support some standard Java things/classes/method via name resolution\nwithout creating own wrapper interfaces and objects.\n- [ ] Make grammar clean, so it's straight forward to process for translations and to understand.\n- [ ] Every grammar rule should represent only a meaning and not any technical grammar specific artifacts/rules.\n- [ ] Detailed Javadoc grammar.\n- [ ] Review grammar.\n- [ ] Disable checks for bootstrap code.\n- [ ] Move a part of the Dem project, that complies to the grammar.\nSuch projects are called pure projects and are located at `project/pure/*`.\nThese projects are called pure, because it should not use any outside dependencies and therefore\ncan be licensed completely at will.\nAlso, such projects may be transformed in future in such a way, that it has minimal side effects.\nNon-pure project will be called integration/core/sheath projects.\nPure project's will be called merger projects.\n- [ ] Add grammar check to CI build.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1642299653,"metadata":{"github-id":"UCE_lAHOFCNQW84xLOCQziidd2c"},"target":"122c27b38418ba09915fa0b15cb0003bbe0d33158901c85fb71886693d901fa5","message":"For this to work, the source code also have to comply with the grammar, when this issue is done.\n\n- [ ] Use JavaParser for translation only instead of the Java grammer,\nin order to support some standard Java things/classes/method via name resolution\nwithout creating own wrapper interfaces and objects.\n- [ ] Make grammar clean, so it's straight forward to process for translations and to understand.\n- [ ] Every grammar rule should represent only a meaning and not any technical grammar specific artifacts/rules.\n- [ ] Detailed Javadoc grammar.\n- [ ] Review grammar.\n- [ ] Disable checks for bootstrap code.\n- [ ] Move a part of the Dem project, that complies to the grammar.\nSuch projects are called pure projects and are located at `project/pure/*`.\nThese projects are called pure, because it should not use any outside dependencies and therefore\ncan be licensed completely at will.\nAlso, such projects may be transformed in future in such a way, that it has minimal side effects.\nNon-pure project will be called integration/core/sheath projects.\nPure project's will be called merger projects.\n- [ ] Add grammar check to CI build.\n- [ ] Use mixed grammar, which makes it possible to used fragment tokens more effectively (currently these are broken).","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1642377933,"metadata":{"github-id":"UCE_lAHOFCNQW84xLOCQziihEZc"},"target":"122c27b38418ba09915fa0b15cb0003bbe0d33158901c85fb71886693d901fa5","message":"For this to work, the source code also have to comply with the grammar, when this issue is done.\n\n- [ ] Use JavaParser for translation only instead of the Java grammer,\nin order to support some standard Java things/classes/method via name resolution\nwithout creating own wrapper interfaces and objects.\n- [ ] Make grammar clean, so it's straight forward to process for translations and to understand.\n- [ ] Every grammar rule should represent only a meaning and not any technical grammar specific artifacts/rules.\n- [ ] Detailed Javadoc grammar.\n- [ ] Review grammar.\n- [ ] Disable checks for bootstrap code.\n- [ ] Move a part of the Dem project, that complies to the grammar.\nSuch projects are called pure projects and are located at `project/pure/*`.\nThese projects are called pure, because it should not use any outside dependencies and therefore\ncan be licensed completely at will.\nAlso, such projects may be transformed in future in such a way, that it has minimal side effects.\nNon-pure project will be called integration/core/sheath projects.\nPure project's will be called merger projects.\n- [ ] Add grammar check to CI build.\n- [ ] Fix usage fragments. Currently, they often do not work and require Tokens for matches and the respective Regex do not work.\n- [ ] Use mixed grammar, which makes it possible to used fragment tokens more effectively (currently these are broken).","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1642378003,"metadata":{"github-id":"UCE_lAHOFCNQW84xLOCQziihEvg"},"target":"122c27b38418ba09915fa0b15cb0003bbe0d33158901c85fb71886693d901fa5","message":"For this to work, the source code also have to comply with the grammar, when this issue is done.\n\n- [ ] Use JavaParser for translation only instead of the Java grammer,\nin order to support some standard Java things/classes/method via name resolution\nwithout creating own wrapper interfaces and objects.\n- [ ] Make grammar clean, so it's straight forward to process for translations and to understand.\n- [ ] Every grammar rule should represent only a meaning and not any technical grammar specific artifacts/rules.\n- [ ] Detailed Javadoc grammar.\n- [ ] Review grammar.\n- [ ] Disable checks for bootstrap code.\n- [ ] Move a part of the Dem project, that complies to the grammar.\nSuch projects are called pure projects and are located at `project/pure/*`.\nThese projects are called pure, because it should not use any outside dependencies and therefore\ncan be licensed completely at will.\nAlso, such projects may be transformed in future in such a way, that it has minimal side effects.\nNon-pure project will be called integration/core/sheath projects.\nPure project's will be called merger projects.\n- [ ] Add grammar check to CI build.\n- [ ] Fix usage fragments. Currently, they often do not work and require Tokens for matches and the respective Regex do not work.\n- [ ] Use mixed grammar, which makes it possible to used fragment tokens more effectively (currently these are broken).\n- [ ] Remove explicit whitespace matches.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1642378718,"metadata":{"github-id":"UCE_lAHOFCNQW84xLOCQziihHwM"},"target":"122c27b38418ba09915fa0b15cb0003bbe0d33158901c85fb71886693d901fa5","message":"For this to work, the source code also have to comply with the grammar, when this issue is done.\n\n- [ ] Use JavaParser for translation only instead of the Java grammer,\nin order to support some standard Java things/classes/method via name resolution\nwithout creating own wrapper interfaces and objects.\n- [ ] Make grammar clean, so it's straight forward to process for translations and to understand.\n- [ ] Every grammar rule should represent only a meaning and not any technical grammar specific artifacts/rules.\n- [ ] Detailed Javadoc grammar.\n- [ ] Review grammar.\n- [ ] Disable checks for bootstrap code.\n- [ ] Move a part of the Dem project, that complies to the grammar.\nSuch projects are called pure projects and are located at `project/pure/*`.\nThese projects are called pure, because it should not use any outside dependencies and therefore\ncan be licensed completely at will.\nAlso, such projects may be transformed in future in such a way, that it has minimal side effects.\nNon-pure project will be called integration/core/sheath projects.\nPure project's will be called merger projects.\n- [ ] Add grammar check to CI build.\n- [ ] Fix usage fragments. Currently, they often do not work and require Tokens for matches and the respective Regex do not work.\n- [ ] Use mixed grammar, which makes it possible to used fragment tokens more effectively (currently these are broken).\n- [ ] Remove explicit whitespace matches.\n- [ ] Document how to do non combined grammar.\n- [ ] Document how to do combined grammar.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1642378779,"metadata":{"github-id":"UCE_lAHOFCNQW84xLOCQziihH-A"},"target":"122c27b38418ba09915fa0b15cb0003bbe0d33158901c85fb71886693d901fa5","message":"For this to work, the source code also have to comply with the grammar, when this issue is done.\n\n- [ ] Use JavaParser for translation only instead of the Java grammer,\nin order to support some standard Java things/classes/method via name resolution\nwithout creating own wrapper interfaces and objects.\n- [ ] Make grammar clean, so it's straight forward to process for translations and to understand.\n- [ ] Every grammar rule should represent only a meaning and not any technical grammar specific artifacts/rules.\n- [ ] Detailed Javadoc grammar.\n- [ ] Review grammar.\n- [ ] Disable checks for bootstrap code.\n- [ ] Move a part of the Dem project, that complies to the grammar.\nSuch projects are called pure projects and are located at `project/pure/*`.\nThese projects are called pure, because it should not use any outside dependencies and therefore\ncan be licensed completely at will.\nAlso, such projects may be transformed in future in such a way, that it has minimal side effects.\nNon-pure project will be called integration/core/sheath projects.\nPure project's will be called merger projects.\n- [ ] Add grammar check to CI build.\n- [ ] Fix usage fragments. Currently, they often do not work and require Tokens for matches and the respective Regex do not work.\n- [ ] Use mixed grammar, which makes it possible to used fragment tokens more effectively (currently these are broken).\n- [ ] Remove explicit whitespace matches.\n- [ ] Document how to do non combined grammar.\n- [ ] Document how to do combined grammar.\n- [ ] Use upper case for Keywords in Lexer.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1642461397,"metadata":{"github-id":"UCE_lAHOFCNQW84xLOCQziitY4Q"},"target":"122c27b38418ba09915fa0b15cb0003bbe0d33158901c85fb71886693d901fa5","message":"For this to work, the source code also have to comply with the grammar, when this issue is done.\n\n- [ ] Use JavaParser for translation only instead of the Java grammer,\nin order to support some standard Java things/classes/method via name resolution\nwithout creating own wrapper interfaces and objects.\n- [ ] Make grammar clean, so it's straight forward to process for translations and to understand.\n- [ ] Every grammar rule should represent only a meaning and not any technical grammar specific artifacts/rules.\n- [ ] Detailed Javadoc grammar.\n- [ ] Review grammar.\n- [ ] Disable checks for bootstrap code.\n- [ ] Move a part of the Dem project, that complies to the grammar.\nSuch projects are called pure projects and are located at `project/pure/*`.\nThese projects are called pure, because it should not use any outside dependencies and therefore\ncan be licensed completely at will.\nAlso, such projects may be transformed in future in such a way, that it has minimal side effects.\nNon-pure project will be called integration/core/sheath projects.\nPure project's will be called merger projects.\n- [ ] Add grammar check to CI build.\n- [ ] Fix usage fragments. Currently, they often do not work and require Tokens for matches and the respective Regex do not work.\n- [ ] Use mixed grammar, which makes it possible to used fragment tokens more effectively (currently these are broken).\n- [ ] Remove explicit whitespace matches.\n- [ ] Document how to do non combined grammar.\n- [ ] Document how to do combined grammar.\n- [ ] Use upper case for Keywords in Lexer.\n- [ ] Use constants in parser instead of tokens, in order make these 2 more independent of each other.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1642461404,"metadata":{"github-id":"UCE_lAHOFCNQW84xLOCQziitY7c"},"target":"122c27b38418ba09915fa0b15cb0003bbe0d33158901c85fb71886693d901fa5","message":"For this to work, the source code also have to comply with the grammar, when this issue is done.\n\n- [ ] Use JavaParser for translation only instead of the Java grammer,\nin order to support some standard Java things/classes/method via name resolution\nwithout creating own wrapper interfaces and objects.\n- [ ] Make grammar clean, so it's straight forward to process for translations and to understand.\n- [ ] Every grammar rule should represent only a meaning and not any technical grammar specific artifacts/rules.\n- [ ] Detailed Javadoc grammar.\n- [ ] Review grammar.\n- [ ] Disable checks for bootstrap code.\n- [ ] Move a part of the Dem project, that complies to the grammar.\nSuch projects are called pure projects and are located at `project/pure/*`.\nThese projects are called pure, because it should not use any outside dependencies and therefore\ncan be licensed completely at will.\nAlso, such projects may be transformed in future in such a way, that it has minimal side effects.\nNon-pure project will be called integration/core/sheath projects.\nPure project's will be called merger projects.\n- [ ] Add grammar check to CI build.\n- [ ] Fix usage fragments. Currently, they often do not work and require Tokens for matches and the respective Regex do not work.\n- [ ] Use mixed grammar, which makes it possible to used fragment tokens more effectively (currently these are broken).\n- [ ] Remove explicit whitespace matches.\n- [ ] Document how to do non combined grammar.\n- [ ] Document how to do combined grammar.\n- [ ] Use upper case for Keywords in Lexer.\n- [ ] Use constants in parser instead of tokens, in order to make these 2 more independent of each other.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1642461490,"metadata":{"github-id":"UCE_lAHOFCNQW84xLOCQziitZc4"},"target":"122c27b38418ba09915fa0b15cb0003bbe0d33158901c85fb71886693d901fa5","message":"For this to work, the source code also have to comply with the grammar, when this issue is done.\n\n- [ ] Use JavaParser for translation only instead of the Java grammer,\nin order to support some standard Java things/classes/method via name resolution\nwithout creating own wrapper interfaces and objects.\n- [ ] Make grammar clean, so it's straight forward to process for translations and to understand.\n- [ ] Every grammar rule should represent only a meaning and not any technical grammar specific artifacts/rules.\n- [ ] Detailed Javadoc grammar.\n- [ ] Review grammar.\n- [ ] Disable checks for bootstrap code.\n- [ ] Move a part of the Dem project, that complies to the grammar.\nSuch projects are called pure projects and are located at `project/pure/*`.\nThese projects are called pure, because it should not use any outside dependencies and therefore\ncan be licensed completely at will.\nAlso, such projects may be transformed in future in such a way, that it has minimal side effects.\nNon-pure project will be called integration/core/sheath projects.\nPure project's will be called merger projects.\n- [ ] Add grammar check to CI build.\n- [ ] Fix usage fragments. Currently, they often do not work and require Tokens for matches and the respective Regex do not work.\n- [ ] Use mixed grammar, which makes it possible to used fragment tokens more effectively (currently these are broken).\n- [ ] Remove explicit whitespace matches.\n- [ ] Document how to do non combined grammar.\n- [ ] Document how to do combined grammar.\n- [ ] Use upper case for Keywords in Lexer.\n- [ ] Use constants in parser instead of tokens, in order to make these 2 more independent of each other.\n- [ ] Move parser rules, which just list constants to lexer.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1642461545,"metadata":{"github-id":"UCE_lAHOFCNQW84xLOCQziitZvA"},"target":"122c27b38418ba09915fa0b15cb0003bbe0d33158901c85fb71886693d901fa5","message":"For this to work, the source code also have to comply with the grammar, when this issue is done.\n\n- [ ] Use JavaParser for translation only instead of the Java grammer,\nin order to support some standard Java things/classes/method via name resolution\nwithout creating own wrapper interfaces and objects.\n- [ ] Make grammar clean, so it's straight forward to process for translations and to understand.\n- [ ] Every grammar rule should represent only a meaning and not any technical grammar specific artifacts/rules.\n- [ ] Detailed Javadoc grammar.\n- [ ] Review grammar.\n- [ ] Disable checks for bootstrap code.\n- [ ] Move a part of the Dem project, that complies to the grammar.\nSuch projects are called pure projects and are located at `project/pure/*`.\nThese projects are called pure, because it should not use any outside dependencies and therefore\ncan be licensed completely at will.\nAlso, such projects may be transformed in future in such a way, that it has minimal side effects.\nNon-pure project will be called integration/core/sheath projects.\nPure project's will be called merger projects.\n- [ ] Add grammar check to CI build.\n- [ ] Fix usage fragments. Currently, they often do not work and require Tokens for matches and the respective Regex do not work.\n- [ ] Use mixed grammar, which makes it possible to used fragment tokens more effectively (currently these are broken).\n- [ ] Remove explicit whitespace matches.\n- [ ] Document how to do non combined grammar.\n- [ ] Document how to do combined grammar.\n- [ ] Use upper case for Keywords in Lexer.\n- [ ] Use constants in parser instead of tokens, in order to make these 2 more independent of each other.\n- [ ] Move parser rules, which just list constants to lexer.\n- [ ] Reformat grammar source code.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1642461693,"metadata":{"github-id":"UCE_lAHOFCNQW84xLOCQziitaiY"},"target":"122c27b38418ba09915fa0b15cb0003bbe0d33158901c85fb71886693d901fa5","message":"For this to work, the source code also have to comply with the grammar, when this issue is done.\n\n- [ ] Use JavaParser for translation only instead of the Java grammer,\nin order to support some standard Java things/classes/method via name resolution\nwithout creating own wrapper interfaces and objects.\n- [ ] Make grammar clean, so it's straight forward to process for translations and to understand.\n- [ ] Every grammar rule should represent only a meaning and not any technical grammar specific artifacts/rules.\n- [ ] Detailed Javadoc grammar.\n- [ ] Review grammar.\n- [ ] Disable checks for bootstrap code.\n- [ ] Move a part of the Dem project, that complies to the grammar.\nSuch projects are called pure projects and are located at `project/pure/*`.\nThese projects are called pure, because it should not use any outside dependencies and therefore\ncan be licensed completely at will.\nAlso, such projects may be transformed in future in such a way, that it has minimal side effects.\nNon-pure project will be called integration/core/sheath projects.\nPure project's will be called merger projects.\n- [ ] Add grammar check to CI build.\n- [ ] Fix usage fragments. Currently, they often do not work and require Tokens for matches and the respective Regex do not work.\n- [ ] Use mixed grammar, which makes it possible to used fragment tokens more effectively (currently these are broken).\n- [ ] Remove explicit whitespace matches.\n- [ ] Document how to do non combined grammar.\n- [ ] Document how to do combined grammar. -\u003e Not needed.\n- [ ] Use upper case for Keywords in Lexer.\n- [ ] Use constants in parser instead of tokens, in order to make these 2 more independent of each other.\n- [ ] Move parser rules, which just list constants to lexer.\n- [ ] Reformat grammar source code.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1642461696,"metadata":{"github-id":"UCE_lAHOFCNQW84xLOCQziitaj8"},"target":"122c27b38418ba09915fa0b15cb0003bbe0d33158901c85fb71886693d901fa5","message":"For this to work, the source code also have to comply with the grammar, when this issue is done.\n\n- [ ] Use JavaParser for translation only instead of the Java grammer,\nin order to support some standard Java things/classes/method via name resolution\nwithout creating own wrapper interfaces and objects.\n- [ ] Make grammar clean, so it's straight forward to process for translations and to understand.\n- [ ] Every grammar rule should represent only a meaning and not any technical grammar specific artifacts/rules.\n- [ ] Detailed Javadoc grammar.\n- [ ] Review grammar.\n- [ ] Disable checks for bootstrap code.\n- [ ] Move a part of the Dem project, that complies to the grammar.\nSuch projects are called pure projects and are located at `project/pure/*`.\nThese projects are called pure, because it should not use any outside dependencies and therefore\ncan be licensed completely at will.\nAlso, such projects may be transformed in future in such a way, that it has minimal side effects.\nNon-pure project will be called integration/core/sheath projects.\nPure project's will be called merger projects.\n- [ ] Add grammar check to CI build.\n- [ ] Fix usage fragments. Currently, they often do not work and require Tokens for matches and the respective Regex do not work.\n- [ ] Use mixed grammar, which makes it possible to used fragment tokens more effectively (currently these are broken).\n- [ ] Remove explicit whitespace matches.\n- [ ] Document how to do non combined grammar.\n- [x] Document how to do combined grammar. -\u003e Not needed.\n- [ ] Use upper case for Keywords in Lexer.\n- [ ] Use constants in parser instead of tokens, in order to make these 2 more independent of each other.\n- [ ] Move parser rules, which just list constants to lexer.\n- [ ] Reformat grammar source code.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1642461698,"metadata":{"github-id":"UCE_lAHOFCNQW84xLOCQziitak0"},"target":"122c27b38418ba09915fa0b15cb0003bbe0d33158901c85fb71886693d901fa5","message":"For this to work, the source code also have to comply with the grammar, when this issue is done.\n\n- [ ] Use JavaParser for translation only instead of the Java grammer,\nin order to support some standard Java things/classes/method via name resolution\nwithout creating own wrapper interfaces and objects.\n- [ ] Make grammar clean, so it's straight forward to process for translations and to understand.\n- [ ] Every grammar rule should represent only a meaning and not any technical grammar specific artifacts/rules.\n- [ ] Detailed Javadoc grammar.\n- [ ] Review grammar.\n- [ ] Disable checks for bootstrap code.\n- [ ] Move a part of the Dem project, that complies to the grammar.\nSuch projects are called pure projects and are located at `project/pure/*`.\nThese projects are called pure, because it should not use any outside dependencies and therefore\ncan be licensed completely at will.\nAlso, such projects may be transformed in future in such a way, that it has minimal side effects.\nNon-pure project will be called integration/core/sheath projects.\nPure project's will be called merger projects.\n- [ ] Add grammar check to CI build.\n- [ ] Fix usage fragments. Currently, they often do not work and require Tokens for matches and the respective Regex do not work.\n- [ ] Use mixed grammar, which makes it possible to used fragment tokens more effectively (currently these are broken).\n- [ ] Remove explicit whitespace matches.\n- [x] Document how to do non combined grammar.\n- [x] Document how to do combined grammar. -\u003e Not needed.\n- [ ] Use upper case for Keywords in Lexer.\n- [ ] Use constants in parser instead of tokens, in order to make these 2 more independent of each other.\n- [ ] Move parser rules, which just list constants to lexer.\n- [ ] Reformat grammar source code.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1642461699,"metadata":{"github-id":"UCE_lAHOFCNQW84xLOCQziitalg"},"target":"122c27b38418ba09915fa0b15cb0003bbe0d33158901c85fb71886693d901fa5","message":"For this to work, the source code also have to comply with the grammar, when this issue is done.\n\n- [ ] Use JavaParser for translation only instead of the Java grammer,\nin order to support some standard Java things/classes/method via name resolution\nwithout creating own wrapper interfaces and objects.\n- [ ] Make grammar clean, so it's straight forward to process for translations and to understand.\n- [ ] Every grammar rule should represent only a meaning and not any technical grammar specific artifacts/rules.\n- [ ] Detailed Javadoc grammar.\n- [ ] Review grammar.\n- [ ] Disable checks for bootstrap code.\n- [ ] Move a part of the Dem project, that complies to the grammar.\nSuch projects are called pure projects and are located at `project/pure/*`.\nThese projects are called pure, because it should not use any outside dependencies and therefore\ncan be licensed completely at will.\nAlso, such projects may be transformed in future in such a way, that it has minimal side effects.\nNon-pure project will be called integration/core/sheath projects.\nPure project's will be called merger projects.\n- [ ] Add grammar check to CI build.\n- [ ] Fix usage fragments. Currently, they often do not work and require Tokens for matches and the respective Regex do not work.\n- [ ] Use mixed grammar, which makes it possible to used fragment tokens more effectively (currently these are broken).\n- [x] Remove explicit whitespace matches.\n- [x] Document how to do non combined grammar.\n- [x] Document how to do combined grammar. -\u003e Not needed.\n- [ ] Use upper case for Keywords in Lexer.\n- [ ] Use constants in parser instead of tokens, in order to make these 2 more independent of each other.\n- [ ] Move parser rules, which just list constants to lexer.\n- [ ] Reformat grammar source code.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1642461702,"metadata":{"github-id":"UCE_lAHOFCNQW84xLOCQziitapI"},"target":"122c27b38418ba09915fa0b15cb0003bbe0d33158901c85fb71886693d901fa5","message":"For this to work, the source code also have to comply with the grammar, when this issue is done.\n\n- [ ] Use JavaParser for translation only instead of the Java grammer,\nin order to support some standard Java things/classes/method via name resolution\nwithout creating own wrapper interfaces and objects.\n- [ ] Make grammar clean, so it's straight forward to process for translations and to understand.\n- [ ] Every grammar rule should represent only a meaning and not any technical grammar specific artifacts/rules.\n- [ ] Detailed Javadoc grammar.\n- [ ] Review grammar.\n- [ ] Disable checks for bootstrap code.\n- [ ] Move a part of the Dem project, that complies to the grammar.\nSuch projects are called pure projects and are located at `project/pure/*`.\nThese projects are called pure, because it should not use any outside dependencies and therefore\ncan be licensed completely at will.\nAlso, such projects may be transformed in future in such a way, that it has minimal side effects.\nNon-pure project will be called integration/core/sheath projects.\nPure project's will be called merger projects.\n- [ ] Add grammar check to CI build.\n- [ ] Fix usage fragments. Currently, they often do not work and require Tokens for matches and the respective Regex do not work.\n- [x] Use mixed grammar, which makes it possible to used fragment tokens more effectively (currently these are broken).\n- [x] Remove explicit whitespace matches.\n- [x] Document how to do non combined grammar.\n- [x] Document how to do combined grammar. -\u003e Not needed.\n- [ ] Use upper case for Keywords in Lexer.\n- [ ] Use constants in parser instead of tokens, in order to make these 2 more independent of each other.\n- [ ] Move parser rules, which just list constants to lexer.\n- [ ] Reformat grammar source code.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1642461753,"metadata":{"github-id":"UCE_lAHOFCNQW84xLOCQziita_0"},"target":"122c27b38418ba09915fa0b15cb0003bbe0d33158901c85fb71886693d901fa5","message":"For this to work, the source code also have to comply with the grammar, when this issue is done.\n\n- [ ] Use JavaParser for translation only instead of the Java grammer,\nin order to support some standard Java things/classes/method via name resolution\nwithout creating own wrapper interfaces and objects.\n- [ ] Make grammar clean, so it's straight forward to process for translations and to understand.\n- [ ] Every grammar rule should represent only a meaning and not any technical grammar specific artifacts/rules.\n- [ ] Detailed Javadoc grammar.\n- [ ] Review grammar.\n- [ ] Disable checks for bootstrap code.\n- [ ] Move a part of the Dem project, that complies to the grammar.\nSuch projects are called pure projects and are located at `project/pure/*`.\nThese projects are called pure, because it should not use any outside dependencies and therefore\ncan be licensed completely at will.\nAlso, such projects may be transformed in future in such a way, that it has minimal side effects.\nNon-pure project will be called integration/core/sheath projects.\nPure project's will be called merger projects.\n- [ ] Add grammar check to CI build.\n- [ ] Fix usage fragments. Currently, they often do not work and require Tokens for matches and the respective Regex do not work.\n- [x] Use mixed grammar, which makes it possible to used fragment tokens more effectively (currently these are broken). -\u003e Split up grammars are better, because lexer work in ANTLR more like validator if one ignores string patterns.\n- [x] Remove explicit whitespace matches.\n- [x] Document how to do non combined grammar.\n- [x] Document how to do combined grammar. -\u003e Not needed.\n- [ ] Use upper case for Keywords in Lexer.\n- [ ] Use constants in parser instead of tokens, in order to make these 2 more independent of each other.\n- [ ] Move parser rules, which just list constants to lexer.\n- [ ] Reformat grammar source code.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1642981198,"metadata":{"github-id":"UCE_lAHOFCNQW84xLOCQzijrgnw"},"target":"122c27b38418ba09915fa0b15cb0003bbe0d33158901c85fb71886693d901fa5","message":"For this to work, the source code also have to comply with the grammar, when this issue is done.\n\n- [ ] Use JavaParser for translation only instead of the Java grammer,\nin order to support some standard Java things/classes/method via name resolution\nwithout creating own wrapper interfaces and objects.\n- [ ] Make grammar clean, so it's straight forward to process for translations and to understand.\n- [ ] Every grammar rule should represent only a meaning and not any technical grammar specific artifacts/rules.\n- [ ] Detailed Javadoc grammar.\n- [ ] Review grammar.\n- [ ] Disable checks for bootstrap code.\n- [ ] Move a part of the Dem project, that complies to the grammar.\nSuch projects are called pure projects and are located at `project/pure/*`.\nThese projects are called pure, because it should not use any outside dependencies and therefore\ncan be licensed completely at will.\nAlso, such projects may be transformed in future in such a way, that it has minimal side effects.\nNon-pure project will be called integration/core/sheath projects.\nPure project's will be called merger projects.\n- [ ] Add grammar check to CI build.\n- [x] Fix usage fragments. Currently, they often do not work and require Tokens for matches and the respective Regex do not work.\n- [x] Use mixed grammar, which makes it possible to used fragment tokens more effectively (currently these are broken). -\u003e Split up grammars are better, because lexer work in ANTLR more like validator if one ignores string patterns.\n- [x] Remove explicit whitespace matches.\n- [x] Document how to do non combined grammar.\n- [x] Document how to do combined grammar. -\u003e Not needed.\n- [ ] Use upper case for Keywords in Lexer.\n- [ ] Use constants in parser instead of tokens, in order to make these 2 more independent of each other.\n- [ ] Move parser rules, which just list constants to lexer.\n- [ ] Reformat grammar source code.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1642981206,"metadata":{"github-id":"UCE_lAHOFCNQW84xLOCQzijrgqA"},"target":"122c27b38418ba09915fa0b15cb0003bbe0d33158901c85fb71886693d901fa5","message":"For this to work, the source code also have to comply with the grammar, when this issue is done.\n\n- [ ] Use JavaParser for translation only instead of the Java grammer,\nin order to support some standard Java things/classes/method via name resolution\nwithout creating own wrapper interfaces and objects.\n- [ ] Make grammar clean, so it's straight forward to process for translations and to understand.\n- [ ] Every grammar rule should represent only a meaning and not any technical grammar specific artifacts/rules.\n- [ ] Detailed Javadoc grammar.\n- [ ] Review grammar.\n- [x] Disable checks for bootstrap code.\n- [ ] Move a part of the Dem project, that complies to the grammar.\nSuch projects are called pure projects and are located at `project/pure/*`.\nThese projects are called pure, because it should not use any outside dependencies and therefore\ncan be licensed completely at will.\nAlso, such projects may be transformed in future in such a way, that it has minimal side effects.\nNon-pure project will be called integration/core/sheath projects.\nPure project's will be called merger projects.\n- [ ] Add grammar check to CI build.\n- [x] Fix usage fragments. Currently, they often do not work and require Tokens for matches and the respective Regex do not work.\n- [x] Use mixed grammar, which makes it possible to used fragment tokens more effectively (currently these are broken). -\u003e Split up grammars are better, because lexer work in ANTLR more like validator if one ignores string patterns.\n- [x] Remove explicit whitespace matches.\n- [x] Document how to do non combined grammar.\n- [x] Document how to do combined grammar. -\u003e Not needed.\n- [ ] Use upper case for Keywords in Lexer.\n- [ ] Use constants in parser instead of tokens, in order to make these 2 more independent of each other.\n- [ ] Move parser rules, which just list constants to lexer.\n- [ ] Reformat grammar source code.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1642981222,"metadata":{"github-id":"UCE_lAHOFCNQW84xLOCQzijrgtQ"},"target":"122c27b38418ba09915fa0b15cb0003bbe0d33158901c85fb71886693d901fa5","message":"For this to work, the source code also have to comply with the grammar, when this issue is done.\n\n- [ ] Use JavaParser for translation only instead of the Java grammer,\nin order to support some standard Java things/classes/method via name resolution\nwithout creating own wrapper interfaces and objects.\n- [ ] Make grammar clean, so it's straight forward to process for translations and to understand.\n- [ ] Every grammar rule should represent only a meaning and not any technical grammar specific artifacts/rules.\n- [ ] Detailed Javadoc grammar.\n- [ ] Review grammar.\n- [x] Disable checks for bootstrap code. -\u003e In the grammar it is called legacy code.\n- [ ] Move a part of the Dem project, that complies to the grammar.\nSuch projects are called pure projects and are located at `project/pure/*`.\nThese projects are called pure, because it should not use any outside dependencies and therefore\ncan be licensed completely at will.\nAlso, such projects may be transformed in future in such a way, that it has minimal side effects.\nNon-pure project will be called integration/core/sheath projects.\nPure project's will be called merger projects.\n- [ ] Add grammar check to CI build.\n- [x] Fix usage fragments. Currently, they often do not work and require Tokens for matches and the respective Regex do not work.\n- [x] Use mixed grammar, which makes it possible to used fragment tokens more effectively (currently these are broken). -\u003e Split up grammars are better, because lexer work in ANTLR more like validator if one ignores string patterns.\n- [x] Remove explicit whitespace matches.\n- [x] Document how to do non combined grammar.\n- [x] Document how to do combined grammar. -\u003e Not needed.\n- [ ] Use upper case for Keywords in Lexer.\n- [ ] Use constants in parser instead of tokens, in order to make these 2 more independent of each other.\n- [ ] Move parser rules, which just list constants to lexer.\n- [ ] Reformat grammar source code.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1642981229,"metadata":{"github-id":"UCE_lAHOFCNQW84xLOCQzijrgu0"},"target":"122c27b38418ba09915fa0b15cb0003bbe0d33158901c85fb71886693d901fa5","message":"For this to work, the source code also have to comply with the grammar, when this issue is done.\n\n- [ ] Use JavaParser for translation only instead of the Java grammer,\nin order to support some standard Java things/classes/method via name resolution\nwithout creating own wrapper interfaces and objects.\n- [ ] Make grammar clean, so it's straight forward to process for translations and to understand.\n- [ ] Every grammar rule should represent only a meaning and not any technical grammar specific artifacts/rules.\n- [ ] Detailed Javadoc grammar.\n- [ ] Review grammar.\n- [x] Disable checks for bootstrap code. -\u003e In the grammar it is called legacy code.\n- [ ] Move a part of the Dem project, that complies to the grammar.\nSuch projects are called pure projects and are located at `project/pure/*`.\nThese projects are called pure, because it should not use any outside dependencies and therefore\ncan be licensed completely at will.\nAlso, such projects may be transformed in future in such a way, that it has minimal side effects.\nNon-pure project will be called integration/core/sheath projects.\nPure project's will be called merger projects.\n- [ ] Add grammar check to CI build.\n- [x] Fix usage fragments. Currently, they often do not work and require Tokens for matches and the respective Regex do not work.\n- [x] Use mixed grammar, which makes it possible to used fragment tokens more effectively (currently these are broken). -\u003e Split up grammars are better, because lexer work in ANTLR more like validator if one ignores string patterns.\n- [x] Remove explicit whitespace matches.\n- [x] Document how to do non combined grammar.\n- [x] Document how to do combined grammar. -\u003e Not needed.\n- [ ] Use upper case for Keywords in Lexer.\n- [ ] Use constants in parser instead of tokens, in order to make these 2 more independent of each other.\n- [ ] Move parser rules, which just list constants to lexer.\n- [x] Reformat grammar source code.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1642981285,"metadata":{"github-id":"UCE_lAHOFCNQW84xLOCQzijrg5s"},"target":"122c27b38418ba09915fa0b15cb0003bbe0d33158901c85fb71886693d901fa5","message":"For this to work, the source code also have to comply with the grammar, when this issue is done.\n\n- [ ] Use JavaParser for translation only instead of the Java grammer,\nin order to support some standard Java things/classes/method via name resolution\nwithout creating own wrapper interfaces and objects.\n- [ ] Make grammar clean, so it's straight forward to process for translations and to understand.\n- [ ] Every grammar rule should represent only a meaning and not any technical grammar specific artifacts/rules.\n- [ ] Detailed Javadoc grammar.\n- [ ] Review grammar.\n- [x] Disable checks for bootstrap code. -\u003e In the grammar it is called legacy code.\n- [ ] Move a part of the Dem project, that complies to the grammar.\nSuch projects are called pure projects and are located at `project/pure/*`.\nThese projects are called pure, because it should not use any outside dependencies and therefore\ncan be licensed completely at will.\nAlso, such projects may be transformed in future in such a way, that it has minimal side effects.\nNon-pure project will be called integration/core/sheath projects.\nPure project's will be called merger projects.\n- [ ] Add grammar check to CI build.\n- [x] Fix usage fragments. Currently, they often do not work and require Tokens for matches and the respective Regex do not work.\n- [x] Use mixed grammar, which makes it possible to used fragment tokens more effectively (currently these are broken). -\u003e Split up grammars are better, because lexer work in ANTLR more like validator if one ignores string patterns.\n- [x] Remove explicit whitespace matches.\n- [x] Document how to do non combined grammar.\n- [x] Document how to do combined grammar. -\u003e Not needed.\n- [ ] Use upper case for Keywords in Lexer.\n- [x] Use constants in parser instead of tokens, in order to make these 2 more independent of each other. -\u003e This does not have a real advantage.\n- [x] Reformat grammar source code.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1646524016,"metadata":{"github-id":"UCE_lAHOFCNQW84xLOCQzirAjLg"},"target":"122c27b38418ba09915fa0b15cb0003bbe0d33158901c85fb71886693d901fa5","message":"For this to work, the source code also have to comply with the grammar, when this issue is done.\n\n- [ ] Use JavaParser for translation only instead of the Java grammer,\nin order to support some standard Java things/classes/method via name resolution\nwithout creating own wrapper interfaces and objects.\n- [ ] Make grammar clean, so it's straight forward to process for translations and to understand.\n- [ ] Every grammar rule should represent only a meaning and not any technical grammar specific artifacts/rules.\n- [ ] Detailed Javadoc grammar.\n- [ ] Review grammar.\n- [x] Disable checks for bootstrap code. -\u003e In the grammar it is called legacy code.\n- [ ] Move a part of the Dem project, that complies to the grammar.\nSuch projects are called pure projects and are located at `project/pure/*`.\nThese projects are called pure, because it should not use any outside dependencies and therefore\ncan be licensed completely at will.\nAlso, such projects may be transformed in future in such a way, that it has minimal side effects.\nNon-pure project will be called integration/core/sheath projects.\nPure project's will be called merger projects.\n- [ ] Add grammar check to CI build.\n- [x] Fix usage fragments. Currently, they often do not work and require Tokens for matches and the respective Regex do not work.\n- [x] Use mixed grammar, which makes it possible to used fragment tokens more effectively (currently these are broken). -\u003e Split up grammars are better, because lexer work in ANTLR more like validator if one ignores string patterns.\n- [x] Remove explicit whitespace matches.\n- [x] Document how to do non combined grammar.\n- [x] Document how to do combined grammar. -\u003e Not needed.\n- [ ] Use upper case for Keywords in Lexer.\n- [x] Use constants in parser instead of tokens, in order to make these 2 more independent of each other. -\u003e This does not have a real advantage.\n- [x] Reformat grammar source code.\n- [ ] Create core project for Dem in order to test interface and implementation splitting.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1646530307,"metadata":{"github-id":"UCE_lAHOFCNQW84xLOCQzirAxWw"},"target":"122c27b38418ba09915fa0b15cb0003bbe0d33158901c85fb71886693d901fa5","message":"For this to work, the source code also have to comply with the grammar, when this issue is done.\n\n- [ ] Use JavaParser for translation only instead of the Java grammer,\nin order to support some standard Java things/classes/method via name resolution\nwithout creating own wrapper interfaces and objects.\n- [ ] Make grammar clean, so it's straight forward to process for translations and to understand.\n- [ ] Every grammar rule should represent only a meaning and not any technical grammar specific artifacts/rules.\n- [ ] Detailed Javadoc grammar.\n- [ ] Review grammar.\n- [x] Disable checks for bootstrap code. -\u003e In the grammar it is called legacy code.\n- [ ] Move a part of the Dem project, that complies to the grammar.\nSuch projects are called pure projects and are located at `project/pure/*`.\nThese projects are called pure, because it should not use any outside dependencies and therefore\ncan be licensed completely at will.\nAlso, such projects may be transformed in future in such a way, that it has minimal side effects.\nNon-pure project will be called integration/core/sheath projects.\nPure project's will be called merger projects.\n- [ ] Add grammar check to CI build.\n- [x] Fix usage fragments. Currently, they often do not work and require Tokens for matches and the respective Regex do not work.\n- [x] Use mixed grammar, which makes it possible to used fragment tokens more effectively (currently these are broken). -\u003e Split up grammars are better, because lexer work in ANTLR more like validator if one ignores string patterns.\n- [x] Remove explicit whitespace matches.\n- [x] Document how to do non combined grammar.\n- [x] Document how to do combined grammar. -\u003e Not needed.\n- [ ] Use upper case for Keywords in Lexer.\n- [x] Use constants in parser instead of tokens, in order to make these 2 more independent of each other. -\u003e This does not have a real advantage.\n- [x] Reformat grammar source code.\n- [ ] Create core project for Dem in order to test interface and implementation splitting.\n- [ ] Test speed up via using faster alternatives for data structures: Maps, Sets, Lists","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1646530431,"metadata":{"github-id":"UCE_lAHOFCNQW84xLOCQzirAxsk"},"target":"122c27b38418ba09915fa0b15cb0003bbe0d33158901c85fb71886693d901fa5","message":"For this to work, the source code also have to comply with the grammar, when this issue is done.\n\n- [ ] Use JavaParser for translation only instead of the Java grammer,\nin order to support some standard Java things/classes/method via name resolution\nwithout creating own wrapper interfaces and objects.\n- [ ] Make grammar clean, so it's straight forward to process for translations and to understand.\n- [ ] Every grammar rule should represent only a meaning and not any technical grammar specific artifacts/rules.\n- [ ] Detailed Javadoc grammar.\n- [ ] Review grammar.\n- [x] Disable checks for bootstrap code. -\u003e In the grammar it is called legacy code.\n- [ ] Move a part of the Dem project, that complies to the grammar.\nSuch projects are called pure projects and are located at `project/pure/*`.\nThese projects are called pure, because it should not use any outside dependencies and therefore\ncan be licensed completely at will.\nAlso, such projects may be transformed in future in such a way, that it has minimal side effects.\nNon-pure project will be called integration/core/sheath projects.\nPure project's will be called merger projects.\n- [ ] Add grammar check to CI build.\n- [x] Fix usage fragments. Currently, they often do not work and require Tokens for matches and the respective Regex do not work.\n- [x] Use mixed grammar, which makes it possible to used fragment tokens more effectively (currently these are broken). -\u003e Split up grammars are better, because lexer work in ANTLR more like validator if one ignores string patterns.\n- [x] Remove explicit whitespace matches.\n- [x] Document how to do non combined grammar.\n- [x] Document how to do combined grammar. -\u003e Not needed.\n- [ ] Use upper case for Keywords in Lexer.\n- [x] Use constants in parser instead of tokens, in order to make these 2 more independent of each other. -\u003e This does not have a real advantage.\n- [x] Reformat grammar source code.\n- [x] Create core project for Dem in order to test interface and implementation splitting.\n- [ ] Test speed up via using faster alternatives for data structures: Maps, Sets, Lists","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1650752293,"metadata":{"github-id":"UCE_lAHOFCNQW84xLOCQziz0zfg"},"target":"122c27b38418ba09915fa0b15cb0003bbe0d33158901c85fb71886693d901fa5","message":"For this to work, the source code also have to comply with the grammar, when this issue is done.\n\n- [ ] Ensure that Dem complies with grammar.\n- [ ] Use JavaParser for translation only instead of the Java grammer,\nin order to support some standard Java things/classes/method via name resolution\nwithout creating own wrapper interfaces and objects.\n- [ ] Make grammar clean, so it's straight forward to process for translations and to understand.\n- [ ] Every grammar rule should represent only a meaning and not any technical grammar specific artifacts/rules.\n- [ ] Detailed Javadoc grammar.\n- [ ] Review grammar.\n- [x] Disable checks for bootstrap code. -\u003e In the grammar it is called legacy code.\n- [ ] Split up Dem into core and merger.\n- [ ] Add grammar check to CI build.\n- [x] Fix usage fragments. Currently, they often do not work and require Tokens for matches and the respective Regex do not work.\n- [x] Use mixed grammar, which makes it possible to used fragment tokens more effectively (currently these are broken). -\u003e Split up grammars are better, because lexer work in ANTLR more like validator if one ignores string patterns.\n- [x] Remove explicit whitespace matches.\n- [x] Document how to do non combined grammar.\n- [x] Document how to do combined grammar. -\u003e Not needed.\n- [ ] Use upper case for Keywords in Lexer.\n- [x] Use constants in parser instead of tokens, in order to make these 2 more independent of each other. -\u003e This does not have a real advantage.\n- [x] Reformat grammar source code.\n- [x] Create core project for Dem in order to test interface and implementation splitting.\n- [ ] Test speed up via using faster alternatives for data structures: Maps, Sets, Lists","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1650752783,"metadata":{"github-id":"UCE_lAHOFCNQW84xLOCQziz000k"},"target":"122c27b38418ba09915fa0b15cb0003bbe0d33158901c85fb71886693d901fa5","message":"For this to work, the source code also have to comply with the grammar, when this issue is done.\n\n- [ ] Ensure that Dem complies with new custom Java grammar.\n- [ ] Use JavaParser for translation only instead of the Java grammer,\nin order to support some standard Java things/classes/method via name resolution\nwithout creating own wrapper interfaces and objects.\n- [ ] Make grammar clean, so it's straight forward to process for translations and to understand.\n- [ ] Every grammar rule should represent only a meaning and not any technical grammar specific artifacts/rules.\n- [ ] Detailed Javadoc grammar.\n- [ ] Review grammar.\n- [x] Disable checks for bootstrap code. -\u003e In the grammar it is called legacy code.\n- [ ] Split up Dem into core and merger.\n- [ ] Add grammar check to CI build.\n- [x] Fix usage fragments. Currently, they often do not work and require Tokens for matches and the respective Regex do not work.\n- [x] Use mixed grammar, which makes it possible to used fragment tokens more effectively (currently these are broken). -\u003e Split up grammars are better, because lexer work in ANTLR more like validator if one ignores string patterns.\n- [x] Remove explicit whitespace matches.\n- [x] Document how to do non combined grammar.\n- [x] Document how to do combined grammar. -\u003e Not needed.\n- [ ] Use upper case for Keywords in Lexer.\n- [x] Use constants in parser instead of tokens, in order to make these 2 more independent of each other. -\u003e This does not have a real advantage.\n- [x] Reformat grammar source code.\n- [x] Create core project for Dem in order to test interface and implementation splitting.\n- [ ] Test speed up via using faster alternatives for data structures: Maps, Sets, Lists","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1651257234,"metadata":{"github-id":"UCE_lAHOFCNQW84xLOCQzi1GSDc"},"target":"122c27b38418ba09915fa0b15cb0003bbe0d33158901c85fb71886693d901fa5","message":"For this to work, the source code also have to comply with the grammar, when this issue is done.\n\n- [x] Ensure that Dem complies with new custom Java grammar.\n- [ ] Use JavaParser for translation only instead of the Java grammer,\nin order to support some standard Java things/classes/method via name resolution\nwithout creating own wrapper interfaces and objects.\n- [ ] Make grammar clean, so it's straight forward to process for translations and to understand.\n- [ ] Every grammar rule should represent only a meaning and not any technical grammar specific artifacts/rules.\n- [ ] Detailed Javadoc grammar.\n- [ ] Review grammar.\n- [x] Disable checks for bootstrap code. -\u003e In the grammar it is called legacy code.\n- [ ] Split up Dem into core and merger.\n- [ ] Add grammar check to CI build.\n- [x] Fix usage fragments. Currently, they often do not work and require Tokens for matches and the respective Regex do not work.\n- [x] Use mixed grammar, which makes it possible to used fragment tokens more effectively (currently these are broken). -\u003e Split up grammars are better, because lexer work in ANTLR more like validator if one ignores string patterns.\n- [x] Remove explicit whitespace matches.\n- [x] Document how to do non combined grammar.\n- [x] Document how to do combined grammar. -\u003e Not needed.\n- [ ] Use upper case for Keywords in Lexer.\n- [x] Use constants in parser instead of tokens, in order to make these 2 more independent of each other. -\u003e This does not have a real advantage.\n- [x] Reformat grammar source code.\n- [x] Create core project for Dem in order to test interface and implementation splitting.\n- [ ] Test speed up via using faster alternatives for data structures: Maps, Sets, Lists","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1651904373,"metadata":{"github-id":"UCE_lAHOFCNQW84xLOCQzi2Xl68"},"target":"122c27b38418ba09915fa0b15cb0003bbe0d33158901c85fb71886693d901fa5","message":"For this to work, the source code also have to comply with the grammar, when this issue is done.\n\n- [x] Ensure that Dem complies with new custom Java grammar.\n- [ ] Use JavaParser for translation only instead of the Java grammer,\nin order to support some standard Java things/classes/method via name resolution\nwithout creating own wrapper interfaces and objects.\n- [ ] Make grammar clean, so it's straight forward to process for translations and to understand.\n- [ ] Every grammar rule should represent only a meaning and not any technical grammar specific artifacts/rules.\n- [ ] Detailed Javadoc grammar. -\u003e task is migrated into repo and will be done later.\n- [ ] Review grammar.\n- [x] Disable checks for bootstrap code. -\u003e In the grammar it is called legacy code.\n- [ ] Split up Dem into core and merger.\n- [ ] Add grammar check to CI build.\n- [x] Fix usage fragments. Currently, they often do not work and require Tokens for matches and the respective Regex do not work.\n- [x] Use mixed grammar, which makes it possible to used fragment tokens more effectively (currently these are broken). -\u003e Split up grammars are better, because lexer work in ANTLR more like validator if one ignores string patterns.\n- [x] Remove explicit whitespace matches.\n- [x] Document how to do non combined grammar.\n- [x] Document how to do combined grammar. -\u003e Not needed.\n- [ ] Use upper case for Keywords in Lexer.\n- [x] Use constants in parser instead of tokens, in order to make these 2 more independent of each other. -\u003e This does not have a real advantage.\n- [x] Reformat grammar source code.\n- [x] Create core project for Dem in order to test interface and implementation splitting.\n- [ ] Test speed up via using faster alternatives for data structures: Maps, Sets, Lists","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1651904375,"metadata":{"github-id":"UCE_lAHOFCNQW84xLOCQzi2Xl7g"},"target":"122c27b38418ba09915fa0b15cb0003bbe0d33158901c85fb71886693d901fa5","message":"For this to work, the source code also have to comply with the grammar, when this issue is done.\n\n- [x] Ensure that Dem complies with new custom Java grammar.\n- [ ] Use JavaParser for translation only instead of the Java grammer,\nin order to support some standard Java things/classes/method via name resolution\nwithout creating own wrapper interfaces and objects.\n- [ ] Make grammar clean, so it's straight forward to process for translations and to understand.\n- [ ] Every grammar rule should represent only a meaning and not any technical grammar specific artifacts/rules.\n- [x] Detailed Javadoc grammar. -\u003e task is migrated into repo and will be done later.\n- [ ] Review grammar.\n- [x] Disable checks for bootstrap code. -\u003e In the grammar it is called legacy code.\n- [ ] Split up Dem into core and merger.\n- [ ] Add grammar check to CI build.\n- [x] Fix usage fragments. Currently, they often do not work and require Tokens for matches and the respective Regex do not work.\n- [x] Use mixed grammar, which makes it possible to used fragment tokens more effectively (currently these are broken). -\u003e Split up grammars are better, because lexer work in ANTLR more like validator if one ignores string patterns.\n- [x] Remove explicit whitespace matches.\n- [x] Document how to do non combined grammar.\n- [x] Document how to do combined grammar. -\u003e Not needed.\n- [ ] Use upper case for Keywords in Lexer.\n- [x] Use constants in parser instead of tokens, in order to make these 2 more independent of each other. -\u003e This does not have a real advantage.\n- [x] Reformat grammar source code.\n- [x] Create core project for Dem in order to test interface and implementation splitting.\n- [ ] Test speed up via using faster alternatives for data structures: Maps, Sets, Lists","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1651904381,"metadata":{"github-id":"UCE_lAHOFCNQW84xLOCQzi2Xl_k"},"target":"122c27b38418ba09915fa0b15cb0003bbe0d33158901c85fb71886693d901fa5","message":"For this to work, the source code also have to comply with the grammar, when this issue is done.\n\n- [x] Ensure that Dem complies with new custom Java grammar.\n- [ ] Use JavaParser for translation only instead of the Java grammer,\nin order to support some standard Java things/classes/method via name resolution\nwithout creating own wrapper interfaces and objects.\n- [ ] Make grammar clean, so it's straight forward to process for translations and to understand.\n- [ ] Every grammar rule should represent only a meaning and not any technical grammar specific artifacts/rules.\n- [x] Detailed Javadoc grammar. -\u003e task is migrated into repo and will be done later.\n- [ ] Review grammar.\n- [x] Disable checks for bootstrap code. -\u003e In the grammar it is called legacy code.\n- [x] Split up Dem into core and merger.\n- [ ] Add grammar check to CI build.\n- [x] Fix usage fragments. Currently, they often do not work and require Tokens for matches and the respective Regex do not work.\n- [x] Use mixed grammar, which makes it possible to used fragment tokens more effectively (currently these are broken). -\u003e Split up grammars are better, because lexer work in ANTLR more like validator if one ignores string patterns.\n- [x] Remove explicit whitespace matches.\n- [x] Document how to do non combined grammar.\n- [x] Document how to do combined grammar. -\u003e Not needed.\n- [ ] Use upper case for Keywords in Lexer.\n- [x] Use constants in parser instead of tokens, in order to make these 2 more independent of each other. -\u003e This does not have a real advantage.\n- [x] Reformat grammar source code.\n- [x] Create core project for Dem in order to test interface and implementation splitting.\n- [ ] Test speed up via using faster alternatives for data structures: Maps, Sets, Lists","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1651904383,"metadata":{"github-id":"UCE_lAHOFCNQW84xLOCQzi2XmAk"},"target":"122c27b38418ba09915fa0b15cb0003bbe0d33158901c85fb71886693d901fa5","message":"For this to work, the source code also have to comply with the grammar, when this issue is done.\n\n- [x] Ensure that Dem complies with new custom Java grammar.\n- [ ] Use JavaParser for translation only instead of the Java grammer,\nin order to support some standard Java things/classes/method via name resolution\nwithout creating own wrapper interfaces and objects.\n- [ ] Make grammar clean, so it's straight forward to process for translations and to understand.\n- [ ] Every grammar rule should represent only a meaning and not any technical grammar specific artifacts/rules.\n- [x] Detailed Javadoc grammar. -\u003e task is migrated into repo and will be done later.\n- [ ] Review grammar.\n- [x] Disable checks for bootstrap code. -\u003e In the grammar it is called legacy code.\n- [ ] Split up Dem into core and merger.\n- [ ] Add grammar check to CI build.\n- [x] Fix usage fragments. Currently, they often do not work and require Tokens for matches and the respective Regex do not work.\n- [x] Use mixed grammar, which makes it possible to used fragment tokens more effectively (currently these are broken). -\u003e Split up grammars are better, because lexer work in ANTLR more like validator if one ignores string patterns.\n- [x] Remove explicit whitespace matches.\n- [x] Document how to do non combined grammar.\n- [x] Document how to do combined grammar. -\u003e Not needed.\n- [ ] Use upper case for Keywords in Lexer.\n- [x] Use constants in parser instead of tokens, in order to make these 2 more independent of each other. -\u003e This does not have a real advantage.\n- [x] Reformat grammar source code.\n- [x] Create core project for Dem in order to test interface and implementation splitting.\n- [ ] Test speed up via using faster alternatives for data structures: Maps, Sets, Lists","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1651904392,"metadata":{"github-id":"UCE_lAHOFCNQW84xLOCQzi2XmDg"},"target":"122c27b38418ba09915fa0b15cb0003bbe0d33158901c85fb71886693d901fa5","message":"For this to work, the source code also have to comply with the grammar, when this issue is done.\n\n- [x] Ensure that Dem complies with new custom Java grammar.\n- [ ] Use JavaParser for translation only instead of the Java grammer,\nin order to support some standard Java things/classes/method via name resolution\nwithout creating own wrapper interfaces and objects.\n- [ ] Make grammar clean, so it's straight forward to process for translations and to understand.\n- [ ] Every grammar rule should represent only a meaning and not any technical grammar specific artifacts/rules.\n- [x] Detailed Javadoc grammar. -\u003e task is migrated into repo and will be done later.\n- [ ] Review grammar.\n- [x] Disable checks for bootstrap code. -\u003e In the grammar it is called legacy code.\n- [x] Split up Dem into core and merger.\n- [ ] Add grammar check to CI build.\n- [x] Fix usage fragments. Currently, they often do not work and require Tokens for matches and the respective Regex do not work.\n- [x] Use mixed grammar, which makes it possible to used fragment tokens more effectively (currently these are broken). -\u003e Split up grammars are better, because lexer work in ANTLR more like validator if one ignores string patterns.\n- [x] Remove explicit whitespace matches.\n- [x] Document how to do non combined grammar.\n- [x] Document how to do combined grammar. -\u003e Not needed.\n- [ ] Use upper case for Keywords in Lexer.\n- [x] Use constants in parser instead of tokens, in order to make these 2 more independent of each other. -\u003e This does not have a real advantage.\n- [x] Reformat grammar source code.\n- [x] Create core project for Dem in order to test interface and implementation splitting.\n- [ ] Test speed up via using faster alternatives for data structures: Maps, Sets, Lists","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1651904897,"metadata":{"github-id":"UCE_lAHOFCNQW84xLOCQzi2XoKg"},"target":"122c27b38418ba09915fa0b15cb0003bbe0d33158901c85fb71886693d901fa5","message":"For this to work, the source code also have to comply with the grammar, when this issue is done.\n\n- [x] Ensure that Dem complies with new custom Java grammar.\n- [ ] Use JavaParser for translation only instead of the Java grammer,\nin order to support some standard Java things/classes/method via name resolution\nwithout creating own wrapper interfaces and objects.\n- [ ] Make grammar clean, so it's straight forward to process for translations and to understand.\n- [ ] Every grammar rule should represent only a meaning and not any technical grammar specific artifacts/rules.\n- [x] Detailed Javadoc grammar. -\u003e task is migrated into repo and will be done later.\n- [ ] Review grammar.\n- [x] Disable checks for bootstrap code. -\u003e In the grammar it is called legacy code.\n- [x] Split up Dem into core and merger.\n- [ ] Add grammar check to CI build. -\u003e Source code check was added to capabilities check.\n- [x] Fix usage fragments. Currently, they often do not work and require Tokens for matches and the respective Regex do not work.\n- [x] Use mixed grammar, which makes it possible to used fragment tokens more effectively (currently these are broken). -\u003e Split up grammars are better, because lexer work in ANTLR more like validator if one ignores string patterns.\n- [x] Remove explicit whitespace matches.\n- [x] Document how to do non combined grammar.\n- [x] Document how to do combined grammar. -\u003e Not needed.\n- [ ] Use upper case for Keywords in Lexer.\n- [x] Use constants in parser instead of tokens, in order to make these 2 more independent of each other. -\u003e This does not have a real advantage.\n- [x] Reformat grammar source code.\n- [x] Create core project for Dem in order to test interface and implementation splitting.\n- [ ] Test speed up via using faster alternatives for data structures: Maps, Sets, Lists","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1651904898,"metadata":{"github-id":"UCE_lAHOFCNQW84xLOCQzi2XoK4"},"target":"122c27b38418ba09915fa0b15cb0003bbe0d33158901c85fb71886693d901fa5","message":"For this to work, the source code also have to comply with the grammar, when this issue is done.\n\n- [x] Ensure that Dem complies with new custom Java grammar.\n- [ ] Use JavaParser for translation only instead of the Java grammer,\nin order to support some standard Java things/classes/method via name resolution\nwithout creating own wrapper interfaces and objects.\n- [ ] Make grammar clean, so it's straight forward to process for translations and to understand.\n- [ ] Every grammar rule should represent only a meaning and not any technical grammar specific artifacts/rules.\n- [x] Detailed Javadoc grammar. -\u003e task is migrated into repo and will be done later.\n- [ ] Review grammar.\n- [x] Disable checks for bootstrap code. -\u003e In the grammar it is called legacy code.\n- [x] Split up Dem into core and merger.\n- [x] Add grammar check to CI build. -\u003e Source code check was added to capabilities check.\n- [x] Fix usage fragments. Currently, they often do not work and require Tokens for matches and the respective Regex do not work.\n- [x] Use mixed grammar, which makes it possible to used fragment tokens more effectively (currently these are broken). -\u003e Split up grammars are better, because lexer work in ANTLR more like validator if one ignores string patterns.\n- [x] Remove explicit whitespace matches.\n- [x] Document how to do non combined grammar.\n- [x] Document how to do combined grammar. -\u003e Not needed.\n- [ ] Use upper case for Keywords in Lexer.\n- [x] Use constants in parser instead of tokens, in order to make these 2 more independent of each other. -\u003e This does not have a real advantage.\n- [x] Reformat grammar source code.\n- [x] Create core project for Dem in order to test interface and implementation splitting.\n- [ ] Test speed up via using faster alternatives for data structures: Maps, Sets, Lists","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1651904915,"metadata":{"github-id":"UCE_lAHOFCNQW84xLOCQzi2XoP0"},"target":"122c27b38418ba09915fa0b15cb0003bbe0d33158901c85fb71886693d901fa5","message":"For this to work, the source code also have to comply with the grammar, when this issue is done.\n\n- [x] Ensure that Dem complies with new custom Java grammar.\n- [ ] Use JavaParser for translation only instead of the Java grammer,\nin order to support some standard Java things/classes/method via name resolution\nwithout creating own wrapper interfaces and objects.\n- [ ] Make grammar clean, so it's straight forward to process for translations and to understand.\n- [ ] Every grammar rule should represent only a meaning and not any technical grammar specific artifacts/rules.\n- [x] Detailed Javadoc grammar. -\u003e task is migrated into repo and will be done later.\n- [ ] Review grammar.\n- [x] Disable checks for bootstrap code. -\u003e In the grammar it is called legacy code.\n- [x] Split up Dem into core and merger.\n- [x] Add grammar check to CI build. -\u003e Source code check was added to capabilities check.\n- [x] Fix usage fragments. Currently, they often do not work and require Tokens for matches and the respective Regex do not work.\n- [x] Use mixed grammar, which makes it possible to used fragment tokens more effectively (currently these are broken). -\u003e Split up grammars are better, because lexer work in ANTLR more like validator if one ignores string patterns.\n- [x] Remove explicit whitespace matches.\n- [x] Document how to do non combined grammar.\n- [x] Document how to do combined grammar. -\u003e Not needed.\n- [x] Use upper case for Keywords in Lexer.\n- [x] Use constants in parser instead of tokens, in order to make these 2 more independent of each other. -\u003e This does not have a real advantage.\n- [x] Reformat grammar source code.\n- [x] Create core project for Dem in order to test interface and implementation splitting.\n- [ ] Test speed up via using faster alternatives for data structures: Maps, Sets, Lists","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1651904940,"metadata":{"github-id":"UCE_lAHOFCNQW84xLOCQzi2XoWQ"},"target":"122c27b38418ba09915fa0b15cb0003bbe0d33158901c85fb71886693d901fa5","message":"For this to work, the source code also have to comply with the grammar, when this issue is done.\n\n- [x] Ensure that Dem complies with new custom Java grammar.\n- [ ] Use JavaParser for translation only instead of the Java grammer,\nin order to support some standard Java things/classes/method via name resolution\nwithout creating own wrapper interfaces and objects.\n- [ ] Make grammar clean, so it's straight forward to process for translations and to understand.\n- [ ] Every grammar rule should represent only a meaning and not any technical grammar specific artifacts/rules.\n- [x] Detailed Javadoc grammar. -\u003e task is migrated into repo and will be done later.\n- [ ] Review grammar.\n- [x] Disable checks for bootstrap code. -\u003e In the grammar it is called legacy code.\n- [x] Split up Dem into core and merger.\n- [x] Add grammar check to CI build. -\u003e Source code check was added to capabilities check.\n- [x] Fix usage fragments. Currently, they often do not work and require Tokens for matches and the respective Regex do not work.\n- [x] Use mixed grammar, which makes it possible to used fragment tokens more effectively (currently these are broken). -\u003e Split up grammars are better, because lexer work in ANTLR more like validator if one ignores string patterns.\n- [x] Remove explicit whitespace matches.\n- [x] Document how to do non combined grammar.\n- [x] Document how to do combined grammar. -\u003e Not needed.\n- [x] Use upper case for Keywords in Lexer.\n- [x] Use constants in parser instead of tokens, in order to make these 2 more independent of each other. -\u003e This does not have a real advantage.\n- [x] Reformat grammar source code.\n- [x] Create core project for Dem in order to test interface and implementation splitting.\n- [x] Test speed up via using faster alternatives for data structures: Maps, Sets, Lists -\u003e What is this?","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1651906245,"metadata":{"github-id":"UCE_lAHOFCNQW84xLOCQzi2XuPw"},"target":"122c27b38418ba09915fa0b15cb0003bbe0d33158901c85fb71886693d901fa5","message":"For this to work, the source code also have to comply with the grammar, when this issue is done.\n\n- [x] Ensure that Dem complies with new custom Java grammar.\n- [ ] Use JavaParser for translation only instead of the Java grammer,\nin order to support some standard Java things/classes/method via name resolution\nwithout creating own wrapper interfaces and objects.\n- [ ] Make grammar clean, so it's straight forward to process for translations and to understand.\n- [ ] Every grammar rule should represent only a meaning and not any technical grammar specific artifacts/rules.\n- [x] Detailed Javadoc grammar. -\u003e task is migrated into repo and will be done later.\n- [ ] Review grammar.\n- [x] Disable checks for bootstrap code. -\u003e In the grammar it is called legacy code.\n- [x] Split up Dem into core and merger.\n- [x] Add grammar check to CI build. -\u003e Source code check was added to capabilities check.\n- [x] Fix usage fragments. Currently, they often do not work and require Tokens for matches and the respective Regex do not work.\n- [x] Use mixed grammar, which makes it possible to used fragment tokens more effectively (currently these are broken). -\u003e Split up grammars are better, because lexer work in ANTLR more like validator if one ignores string patterns.\n- [x] Remove explicit whitespace matches.\n- [x] Document how to do non combined grammar.\n- [x] Document how to do combined grammar. -\u003e Not needed.\n- [x] Use upper case for Keywords in Lexer.\n- [x] Use constants in parser instead of tokens, in order to make these 2 more independent of each other. -\u003e This does not have a real advantage.\n- [x] Reformat grammar source code.\n- [x] Create core project for Dem in order to test interface and implementation splitting.\n- [x] Test speed up via using faster alternatives for data structures: Maps, Sets, Lists -\u003e What is this?\n- [ ] Only allow Java library import in Java legacy code.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1651907841,"metadata":{"github-id":"UCE_lAHOFCNQW84xLOCQzi2X2Lk"},"target":"122c27b38418ba09915fa0b15cb0003bbe0d33158901c85fb71886693d901fa5","message":"For this to work, the source code also have to comply with the grammar, when this issue is done.\n\n- [x] Ensure that Dem complies with new custom Java grammar.\n- [ ] Use JavaParser for translation only instead of the Java grammer,\nin order to support some standard Java things/classes/method via name resolution\nwithout creating own wrapper interfaces and objects.\n- [ ] Make grammar clean, so it's straight forward to process for translations and to understand.\n- [ ] Every grammar rule should represent only a meaning and not any technical grammar specific artifacts/rules.\n- [x] Detailed Javadoc grammar. -\u003e task is migrated into repo and will be done later.\n- [ ] Review grammar.\n- [x] Disable checks for bootstrap code. -\u003e In the grammar it is called legacy code.\n- [x] Split up Dem into core and merger.\n- [x] Add grammar check to CI build. -\u003e Source code check was added to capabilities check.\n- [x] Fix usage fragments. Currently, they often do not work and require Tokens for matches and the respective Regex do not work.\n- [x] Use mixed grammar, which makes it possible to used fragment tokens more effectively (currently these are broken). -\u003e Split up grammars are better, because lexer work in ANTLR more like validator if one ignores string patterns.\n- [x] Remove explicit whitespace matches.\n- [x] Document how to do non combined grammar.\n- [x] Document how to do combined grammar. -\u003e Not needed.\n- [x] Use upper case for Keywords in Lexer.\n- [x] Use constants in parser instead of tokens, in order to make these 2 more independent of each other. -\u003e This does not have a real advantage.\n- [x] Reformat grammar source code.\n- [x] Create core project for Dem in order to test interface and implementation splitting.\n- [x] Test speed up via using faster alternatives for data structures: Maps, Sets, Lists -\u003e What is this?\n- [ ] Only allow foreign code import like the Java standard library in Java legacy code.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1651907869,"metadata":{"github-id":"UCE_lAHOFCNQW84xLOCQzi2X2UI"},"target":"122c27b38418ba09915fa0b15cb0003bbe0d33158901c85fb71886693d901fa5","message":"For this to work, the source code also have to comply with the grammar, when this issue is done.\n\n- [x] Ensure that Dem complies with new custom Java grammar.\n- [ ] Use JavaParser for translation only instead of the Java grammer,\nin order to support some standard Java things/classes/method via name resolution\nwithout creating own wrapper interfaces and objects.\n- [ ] Make grammar clean, so it's straight forward to process for translations and to understand.\n- [ ] Every grammar rule should represent only a meaning and not any technical grammar specific artifacts/rules.\n- [x] Detailed Javadoc grammar. -\u003e task is migrated into repo and will be done later.\n- [ ] Review grammar.\n- [x] Disable checks for bootstrap code. -\u003e In the grammar it is called legacy code.\n- [x] Split up Dem into core and merger.\n- [x] Add grammar check to CI build. -\u003e Source code check was added to capabilities check.\n- [x] Fix usage fragments. Currently, they often do not work and require Tokens for matches and the respective Regex do not work.\n- [x] Use mixed grammar, which makes it possible to used fragment tokens more effectively (currently these are broken). -\u003e Split up grammars are better, because lexer work in ANTLR more like validator if one ignores string patterns.\n- [x] Remove explicit whitespace matches.\n- [x] Document how to do non combined grammar.\n- [x] Document how to do combined grammar. -\u003e Not needed.\n- [x] Use upper case for Keywords in Lexer.\n- [x] Use constants in parser instead of tokens, in order to make these 2 more independent of each other. -\u003e This does not have a real advantage.\n- [x] Reformat grammar source code.\n- [x] Create core project for Dem in order to test interface and implementation splitting.\n- [x] Test speed up via using faster alternatives for data structures: Maps, Sets, Lists -\u003e What is this?\n- [ ] Only allow foreign code import like the Java standard library in Java legacy code. Currently only Java standard library imports are blocked.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1652567627,"metadata":{"github-id":"UCE_lAHOFCNQW84xLOCQzi3vzLc"},"target":"122c27b38418ba09915fa0b15cb0003bbe0d33158901c85fb71886693d901fa5","message":"For this to work, the source code also have to comply with the grammar, when this issue is done.\n\n- [x] Ensure that Dem complies with new custom Java grammar.\n- [ ] Use JavaParser for translation only instead of the Java grammer,\nin order to support some standard Java things/classes/method via name resolution\nwithout creating own wrapper interfaces and objects.\n- [ ] Make grammar clean, so it's straight forward to process for translations and to understand.\n- [ ] Every grammar rule should represent only a meaning and not any technical grammar specific artifacts/rules.\n- [x] Detailed Javadoc grammar. -\u003e task is migrated into repo and will be done later.\n- [ ] Review grammar.\n- [x] Disable checks for bootstrap code. -\u003e In the grammar it is called legacy code.\n- [x] Split up Dem into core and merger.\n- [x] Add grammar check to CI build. -\u003e Source code check was added to capabilities check.\n- [x] Fix usage fragments. Currently, they often do not work and require Tokens for matches and the respective Regex do not work.\n- [x] Use mixed grammar, which makes it possible to used fragment tokens more effectively (currently these are broken). -\u003e Split up grammars are better, because lexer work in ANTLR more like validator if one ignores string patterns.\n- [x] Remove explicit whitespace matches.\n- [x] Document how to do non combined grammar.\n- [x] Document how to do combined grammar. -\u003e Not needed.\n- [x] Use upper case for Keywords in Lexer.\n- [x] Use constants in parser instead of tokens, in order to make these 2 more independent of each other. -\u003e This does not have a real advantage.\n- [x] Reformat grammar source code.\n- [x] Create core project for Dem in order to test interface and implementation splitting.\n- [x] Test speed up via using faster alternatives for data structures: Maps, Sets, Lists -\u003e What is this?\n- [ ] Only allow foreign code import like the Java standard library in Java legacy code. Currently, only Java standard library imports are blocked.\n- [ ] Let all source code comply with grammar.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1652567636,"metadata":{"github-id":"UCE_lAHOFCNQW84xLOCQzi3vzMg"},"target":"122c27b38418ba09915fa0b15cb0003bbe0d33158901c85fb71886693d901fa5","message":"For this to work, the source code also have to comply with the grammar, when this issue is done.\n\n- [x] Ensure that Dem complies with new custom Java grammar.\n- [ ] Use JavaParser for translation only instead of the Java grammer,\nin order to support some standard Java things/classes/method via name resolution\nwithout creating own wrapper interfaces and objects.\n- [ ] Make grammar clean, so it's straight forward to process for translations and to understand.\n- [ ] Every grammar rule should represent only a meaning and not any technical grammar specific artifacts/rules.\n- [x] Detailed Javadoc grammar. -\u003e task is migrated into repo and will be done later.\n- [ ] Review grammar.\n- [x] Disable checks for bootstrap code. -\u003e In the grammar it is called legacy code.\n- [x] Split up Dem into core and merger.\n- [x] Add grammar check to CI build. -\u003e Source code check was added to capabilities check.\n- [x] Fix usage fragments. Currently, they often do not work and require Tokens for matches and the respective Regex do not work.\n- [x] Use mixed grammar, which makes it possible to used fragment tokens more effectively (currently these are broken). -\u003e Split up grammars are better, because lexer work in ANTLR more like validator if one ignores string patterns.\n- [x] Remove explicit whitespace matches.\n- [x] Document how to do non combined grammar.\n- [x] Document how to do combined grammar. -\u003e Not needed.\n- [x] Use upper case for Keywords in Lexer.\n- [x] Use constants in parser instead of tokens, in order to make these 2 more independent of each other. -\u003e This does not have a real advantage.\n- [x] Reformat grammar source code.\n- [x] Create core project for Dem in order to test interface and implementation splitting.\n- [x] Test speed up via using faster alternatives for data structures: Maps, Sets, Lists -\u003e What is this?\n- [ ] Only allow foreign code import like the Java standard library in Java legacy code. Currently, only Java standard library imports are blocked.\n- [ ] Let all source code comply with Java grammar.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1652647402,"metadata":{"github-id":"UCE_lAHOFCNQW84xLOCQzi3zo5E"},"target":"122c27b38418ba09915fa0b15cb0003bbe0d33158901c85fb71886693d901fa5","message":"For this to work, the source code also have to comply with the grammar, when this issue is done.\n\n- [x] Ensure that Dem complies with new custom Java grammar.\n- [ ] Use JavaParser for translation only instead of the Java grammer,\nin order to support some standard Java things/classes/method via name resolution\nwithout creating own wrapper interfaces and objects.\n- [ ] Make grammar clean, so it's straight forward to process for translations and to understand.\n- [ ] Every grammar rule should represent only a meaning and not any technical grammar specific artifacts/rules.\n- [x] Detailed Javadoc grammar. -\u003e task is migrated into repo and will be done later.\n- [ ] Review grammar.\n- [x] Disable checks for bootstrap code. -\u003e In the grammar it is called legacy code.\n- [x] Split up Dem into core and merger.\n- [x] Add grammar check to CI build. -\u003e Source code check was added to capabilities check.\n- [x] Fix usage fragments. Currently, they often do not work and require Tokens for matches and the respective Regex do not work.\n- [x] Use mixed grammar, which makes it possible to used fragment tokens more effectively (currently these are broken). -\u003e Split up grammars are better, because lexer work in ANTLR more like validator if one ignores string patterns.\n- [x] Remove explicit whitespace matches.\n- [x] Document how to do non combined grammar.\n- [x] Document how to do combined grammar. -\u003e Not needed.\n- [x] Use upper case for Keywords in Lexer.\n- [x] Use constants in parser instead of tokens, in order to make these 2 more independent of each other. -\u003e This does not have a real advantage.\n- [x] Reformat grammar source code.\n- [x] Create core project for Dem in order to test interface and implementation splitting.\n- [x] Test speed up via using faster alternatives for data structures: Maps, Sets, Lists -\u003e What is this?\n- [ ] Only allow foreign code import like the Java standard library in Java legacy code with some exceptions to the Java standard library like `java.util.List`. Currently, only Java standard library imports are blocked.\n- [ ] Let all source code comply with Java grammar.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1652655325,"metadata":{"github-id":"UCE_lAHOFCNQW84xLOCQzi30REQ"},"target":"122c27b38418ba09915fa0b15cb0003bbe0d33158901c85fb71886693d901fa5","message":"For this to work, the source code also have to comply with the grammar, when this issue is done.\n\n- [x] Ensure that Dem complies with new custom Java grammar.\n- [ ] Use JavaParser for translation only instead of the Java grammer,\nin order to support some standard Java things/classes/method via name resolution\nwithout creating own wrapper interfaces and objects.\n- [ ] Make grammar clean, so it's straight forward to process for translations and to understand.\n- [ ] Every grammar rule should represent only a meaning and not any technical grammar specific artifacts/rules.\n- [x] Detailed Javadoc grammar. -\u003e task is migrated into repo and will be done later.\n- [ ] Review grammar.\n- [x] Disable checks for bootstrap code. -\u003e In the grammar it is called legacy code.\n- [x] Split up Dem into core and merger.\n- [x] Add grammar check to CI build. -\u003e Source code check was added to capabilities check.\n- [x] Fix usage fragments. Currently, they often do not work and require Tokens for matches and the respective Regex do not work.\n- [x] Use mixed grammar, which makes it possible to used fragment tokens more effectively (currently these are broken). -\u003e Split up grammars are better, because lexer work in ANTLR more like validator if one ignores string patterns.\n- [x] Remove explicit whitespace matches.\n- [x] Document how to do non combined grammar.\n- [x] Document how to do combined grammar. -\u003e Not needed.\n- [x] Use upper case for Keywords in Lexer.\n- [x] Use constants in parser instead of tokens, in order to make these 2 more independent of each other. -\u003e This does not have a real advantage.\n- [x] Reformat grammar source code.\n- [x] Create core project for Dem in order to test interface and implementation splitting.\n- [x] Test speed up via using faster alternatives for data structures: Maps, Sets, Lists -\u003e What is this?\n- [ ] Only allow foreign code import like the Java standard library in Java legacy code with some exceptions to the Java standard library like `java.util.List`. Currently, only Java standard library imports are blocked.\n- [ ] Let all source code comply with Java grammar.\n- [ ] Remove direct usage of Path, Files and similar in the future.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1653170506,"metadata":{"github-id":"UCE_lAHOFCNQW84xLOCQzi5KRUo"},"target":"122c27b38418ba09915fa0b15cb0003bbe0d33158901c85fb71886693d901fa5","message":"For this to work, the source code also have to comply with the grammar, when this issue is done.\n\n- [x] Ensure that Dem complies with new custom Java grammar.\n- [ ] Use JavaParser for translation only instead of the Java grammer,\nin order to support some standard Java things/classes/method via name resolution\nwithout creating own wrapper interfaces and objects.\n- [ ] Make grammar clean, so it's straight forward to process for translations and to understand.\n- [ ] Every grammar rule should represent only a meaning and not any technical grammar specific artifacts/rules.\n- [x] Detailed Javadoc grammar. -\u003e task is migrated into repo and will be done later.\n- [ ] Review grammar.\n- [x] Disable checks for bootstrap code. -\u003e In the grammar it is called legacy code.\n- [x] Split up Dem into core and merger.\n- [x] Add grammar check to CI build. -\u003e Source code check was added to capabilities check.\n- [x] Fix usage fragments. Currently, they often do not work and require Tokens for matches and the respective Regex do not work.\n- [x] Use mixed grammar, which makes it possible to used fragment tokens more effectively (currently these are broken). -\u003e Split up grammars are better, because lexer work in ANTLR more like validator if one ignores string patterns.\n- [x] Remove explicit whitespace matches.\n- [x] Document how to do non combined grammar.\n- [x] Document how to do combined grammar. -\u003e Not needed.\n- [x] Use upper case for Keywords in Lexer.\n- [x] Use constants in parser instead of tokens, in order to make these 2 more independent of each other. -\u003e This does not have a real advantage.\n- [x] Reformat grammar source code.\n- [x] Create core project for Dem in order to test interface and implementation splitting.\n- [x] Test speed up via using faster alternatives for data structures: Maps, Sets, Lists -\u003e What is this?\n- [ ] Only allow foreign code import like the Java standard library in Java legacy code with some exceptions to the Java standard library like `java.util.List`. Currently, only Java standard library imports are blocked.\n- [ ] Let all source code comply with Java grammar.\n\nTasks for future tickets:\n- [ ] Remove direct usage of Path (because resolve method allows resolving absolute paths), Files (because changing the backend does not seem to be viable) and similar in the future.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1653170529,"metadata":{"github-id":"UCE_lAHOFCNQW84xLOCQzi5KRac"},"target":"122c27b38418ba09915fa0b15cb0003bbe0d33158901c85fb71886693d901fa5","message":"# Sub Tasks\nFor this to work, the source code also have to comply with the grammar, when this issue is done.\n\n- [x] Ensure that Dem complies with new custom Java grammar.\n- [ ] Use JavaParser for translation only instead of the Java grammer,\nin order to support some standard Java things/classes/method via name resolution\nwithout creating own wrapper interfaces and objects.\n- [ ] Make grammar clean, so it's straight forward to process for translations and to understand.\n- [ ] Every grammar rule should represent only a meaning and not any technical grammar specific artifacts/rules.\n- [x] Detailed Javadoc grammar. -\u003e task is migrated into repo and will be done later.\n- [ ] Review grammar.\n- [x] Disable checks for bootstrap code. -\u003e In the grammar it is called legacy code.\n- [x] Split up Dem into core and merger.\n- [x] Add grammar check to CI build. -\u003e Source code check was added to capabilities check.\n- [x] Fix usage fragments. Currently, they often do not work and require Tokens for matches and the respective Regex do not work.\n- [x] Use mixed grammar, which makes it possible to used fragment tokens more effectively (currently these are broken). -\u003e Split up grammars are better, because lexer work in ANTLR more like validator if one ignores string patterns.\n- [x] Remove explicit whitespace matches.\n- [x] Document how to do non combined grammar.\n- [x] Document how to do combined grammar. -\u003e Not needed.\n- [x] Use upper case for Keywords in Lexer.\n- [x] Use constants in parser instead of tokens, in order to make these 2 more independent of each other. -\u003e This does not have a real advantage.\n- [x] Reformat grammar source code.\n- [x] Create core project for Dem in order to test interface and implementation splitting.\n- [x] Test speed up via using faster alternatives for data structures: Maps, Sets, Lists -\u003e What is this?\n- [ ] Only allow foreign code import like the Java standard library in Java legacy code with some exceptions to the Java standard library like `java.util.List`. Currently, only Java standard library imports are blocked.\n- [ ] Let all source code comply with Java grammar.\n\n# Tasks For Future Tickets\n- [ ] Remove direct usage of Path (because resolve method allows resolving absolute paths), Files (because changing the backend does not seem to be viable) and similar in the future.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1653767262,"metadata":{"github-id":"UCE_lAHOFCNQW84xLOCQzi6ix2s"},"target":"122c27b38418ba09915fa0b15cb0003bbe0d33158901c85fb71886693d901fa5","message":"# Sub Tasks\nFor this to work, the source code also have to comply with the grammar, when this issue is done.\n\n- [x] Ensure that Dem complies with new custom Java grammar.\n- [ ] Use JavaParser for translation only instead of the Java grammer,\nin order to support some standard Java things/classes/method via name resolution\nwithout creating own wrapper interfaces and objects.\n- [ ] Make grammar clean, so it's straight forward to process for translations and to understand.\n- [ ] Every grammar rule should represent only a meaning and not any technical grammar specific artifacts/rules.\n- [x] Detailed Javadoc grammar. -\u003e task is migrated into repo and will be done later.\n- [ ] Review grammar.\n- [x] Disable checks for bootstrap code. -\u003e In the grammar it is called legacy code.\n- [x] Split up Dem into core and merger.\n- [x] Add grammar check to CI build. -\u003e Source code check was added to capabilities check.\n- [x] Fix usage fragments. Currently, they often do not work and require Tokens for matches and the respective Regex do not work.\n- [x] Use mixed grammar, which makes it possible to used fragment tokens more effectively (currently these are broken). -\u003e Split up grammars are better, because lexer work in ANTLR more like validator if one ignores string patterns.\n- [x] Remove explicit whitespace matches.\n- [x] Document how to do non combined grammar.\n- [x] Document how to do combined grammar. -\u003e Not needed.\n- [x] Use upper case for Keywords in Lexer.\n- [x] Use constants in parser instead of tokens, in order to make these 2 more independent of each other. -\u003e This does not have a real advantage.\n- [x] Reformat grammar source code.\n- [x] Create core project for Dem in order to test interface and implementation splitting.\n- [x] Test speed up via using faster alternatives for data structures: Maps, Sets, Lists -\u003e What is this?\n- [ ] Only allow foreign code import like the Java standard library in Java legacy code with some exceptions to the Java standard library like `java.util.List`. Currently, only Java standard library imports are blocked.\n- [ ] Let all source code comply with Java grammar.\n\n# Tasks For Future Tickets\n- [ ] Remove direct usage of Path (because resolve method allows resolving absolute paths), Files (because changing the backend does not seem to be viable) and similar in the future.\n- [ ] Remove interface extension by java.* for data structure in order to minimize legacy code in order to increase portability.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1655635472,"metadata":{"github-id":"UCE_lAHOFCNQW84xLOCQzi-wLBA"},"target":"122c27b38418ba09915fa0b15cb0003bbe0d33158901c85fb71886693d901fa5","message":"# Sub Tasks\nFor this to work, the source code also have to comply with the grammar, when this issue is done.\n\n- [x] Ensure that Dem complies with new custom Java grammar.\n- [ ] Use JavaParser for translation only instead of the Java grammer,\nin order to support some standard Java things/classes/method via name resolution\nwithout creating own wrapper interfaces and objects.\n- [ ] Make grammar clean, so it's straight forward to process for translations and to understand.\n- [ ] Every grammar rule should represent only a meaning and not any technical grammar specific artifacts/rules.\n- [x] Detailed Javadoc grammar. -\u003e task is migrated into repo and will be done later.\n- [ ] Review grammar.\n- [x] Disable checks for bootstrap code. -\u003e In the grammar it is called legacy code.\n- [x] Split up Dem into core and merger.\n- [x] Add grammar check to CI build. -\u003e Source code check was added to capabilities check.\n- [x] Fix usage fragments. Currently, they often do not work and require Tokens for matches and the respective Regex do not work.\n- [x] Use mixed grammar, which makes it possible to used fragment tokens more effectively (currently these are broken). -\u003e Split up grammars are better, because lexer work in ANTLR more like validator if one ignores string patterns.\n- [x] Remove explicit whitespace matches.\n- [x] Document how to do non combined grammar.\n- [x] Document how to do combined grammar. -\u003e Not needed.\n- [x] Use upper case for Keywords in Lexer.\n- [x] Use constants in parser instead of tokens, in order to make these 2 more independent of each other. -\u003e This does not have a real advantage.\n- [x] Reformat grammar source code.\n- [x] Create core project for Dem in order to test interface and implementation splitting.\n- [x] Test speed up via using faster alternatives for data structures: Maps, Sets, Lists -\u003e What is this?\n- [ ] Only allow foreign code import like the Java standard library in Java legacy code with some exceptions to the Java standard library like `java.util.List`. Currently, only Java standard library imports are blocked.\n- [ ] Let all source code comply with Java grammar.\n- [ ] Update Java guidelines.\n# Tasks For Future Tickets\n- [ ] Remove direct usage of Path (because resolve method allows resolving absolute paths), Files (because changing the backend does not seem to be viable) and similar in the future.\n- [ ] Remove interface extension by java.* for data structure in order to minimize legacy code in order to increase portability.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1658018545,"metadata":{"github-id":"UCE_lAHOFCNQW84xLOCQzjEFEvs"},"target":"122c27b38418ba09915fa0b15cb0003bbe0d33158901c85fb71886693d901fa5","message":"# Sub Tasks\nFor this to work, the source code also have to comply with the grammar, when this issue is done.\n\n- [x] Ensure that Dem complies with new custom Java grammar.\n- [ ] Create basis for Translation . Use JavaParser for translation only instead of the Java grammer,\nin order to support some standard Java things/classes/method via name resolution\nwithout creating own wrapper interfaces and objects.\n- [ ] Make grammar clean, so it's straight forward to process for translations and to understand.\n- [ ] Every grammar rule should represent only a meaning and not any technical grammar specific artifacts/rules.\n- [x] Detailed Javadoc grammar. -\u003e task is migrated into repo and will be done later.\n- [ ] Review grammar.\n- [x] Disable checks for bootstrap code. -\u003e In the grammar it is called legacy code.\n- [x] Split up Dem into core and merger.\n- [x] Add grammar check to CI build. -\u003e Source code check was added to capabilities check.\n- [x] Fix usage fragments. Currently, they often do not work and require Tokens for matches and the respective Regex do not work.\n- [x] Use mixed grammar, which makes it possible to used fragment tokens more effectively (currently these are broken). -\u003e Split up grammars are better, because lexer work in ANTLR more like validator if one ignores string patterns.\n- [x] Remove explicit whitespace matches.\n- [x] Document how to do non combined grammar.\n- [x] Document how to do combined grammar. -\u003e Not needed.\n- [x] Use upper case for Keywords in Lexer.\n- [x] Use constants in parser instead of tokens, in order to make these 2 more independent of each other. -\u003e This does not have a real advantage.\n- [x] Reformat grammar source code.\n- [x] Create core project for Dem in order to test interface and implementation splitting.\n- [x] Test speed up via using faster alternatives for data structures: Maps, Sets, Lists -\u003e What is this?\n- [ ] Only allow foreign code import like the Java standard library in Java legacy code with some exceptions to the Java standard library like `java.util.List`. Currently, only Java standard library imports are blocked.\n- [ ] Let all source code comply with Java grammar.\n- [ ] Update Java guidelines.\n# Tasks For Future Tickets\n- [ ] Remove direct usage of Path (because resolve method allows resolving absolute paths), Files (because changing the backend does not seem to be viable) and similar in the future.\n- [ ] Remove interface extension by java.* for data structure in order to minimize legacy code in order to increase portability.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1658018569,"metadata":{"github-id":"UCE_lAHOFCNQW84xLOCQzjEFEzU"},"target":"122c27b38418ba09915fa0b15cb0003bbe0d33158901c85fb71886693d901fa5","message":"# Sub Tasks\nFor this to work, the source code also have to comply with the grammar, when this issue is done.\n\n- [x] Ensure that Dem complies with new custom Java grammar.\n- [ ] Create basis for Translation . Use JavaParser for translation only instead of the Java grammer,\nin order to support some standard Java things/classes/method via name resolution\nwithout creating own wrapper interfaces and objects.\n- [ ] Make grammar clean, so it's straight forward to process for translations and to understand.\n- [ ] Every grammar rule should represent only a meaning and not any technical grammar specific artifacts/rules.\n- [x] Detailed Javadoc grammar. -\u003e task is migrated into repo and will be done later.\n- [ ] Review grammar.\n- [x] Disable checks for bootstrap code. -\u003e In the grammar it is called legacy code.\n- [x] Split up Dem into core and merger.\n- [x] Add grammar check to CI build. -\u003e Source code check was added to capabilities check.\n- [x] Fix usage fragments. Currently, they often do not work and require Tokens for matches and the respective Regex do not work.\n- [x] Use mixed grammar, which makes it possible to used fragment tokens more effectively (currently these are broken). -\u003e Split up grammars are better, because lexer work in ANTLR more like validator if one ignores string patterns.\n- [x] Remove explicit whitespace matches.\n- [x] Document how to do non combined grammar.\n- [x] Document how to do combined grammar. -\u003e Not needed.\n- [x] Use upper case for Keywords in Lexer.\n- [x] Use constants in parser instead of tokens, in order to make these 2 more independent of each other. -\u003e This does not have a real advantage.\n- [x] Reformat grammar source code.\n- [x] Create core project for Dem in order to test interface and implementation splitting.\n- [x] Test speed up via using faster alternatives for data structures: Maps, Sets, Lists -\u003e What is this?\n- [x] Only allow foreign code import like the Java standard library in Java legacy code with some exceptions to the Java standard library like `java.util.List`. Currently, only Java standard library imports are blocked.\n- [ ] Let all source code comply with Java grammar.\n- [ ] Update Java guidelines.\n# Tasks For Future Tickets\n- [ ] Remove direct usage of Path (because resolve method allows resolving absolute paths), Files (because changing the backend does not seem to be viable) and similar in the future.\n- [ ] Remove interface extension by java.* for data structure in order to minimize legacy code in order to increase portability.","files":null},{"type":2,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1615243243,"metadata":{"github-id":"MDE3OlJlbmFtZWRUaXRsZUV2ZW50NDQyMzk3NTAzOA=="},"title":"Create minimal Java grammar for this project in order to make code less complex.","was":"Create minimal Java grammar for this project in order to make code less complex."},{"type":5,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1615243257,"metadata":{"github-id":"MDEyOkxhYmVsZWRFdmVudDQ0MjM5NzU4Njg="},"added":["enhancement"],"removed":[]}]}