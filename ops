{"version":1,"ops":[{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1643936049,"metadata":{"github-id":"UCE_lAHOFCNQW85C-lQozilw9zU"},"target":"a3f50b077d73282b04168caf6ecc66075eba757fc99b291590055188d7a29c8e","message":"The biggest plan for the future of this project is the goal to provide an interface for different programming paradigms,\nin order to make these compatible to each other.\nI suspect, that this could be used in order to get better performance:\n* [ ] Theorem Proofing: translate constraint systems\n* [ ] Machine Learning: generic problem interfaces for solvers based on machine learning\n* [ ] file like system of tables: versioning access and storage system for data.\n* [ ] interface to other optimization software via tables\n\nHow could something like this be done?\n* [ ] It should be based the most generic and easy to implement interface.\nMaybe shell + native file system + optional backend database in order to be portable, which is not always the case for the native file systems?\n* [ ] Maybe consider OS state interface as the base for this?","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1643936137,"metadata":{"github-id":"UCE_lAHOFCNQW85C-lQozilw-mM"},"target":"a3f50b077d73282b04168caf6ecc66075eba757fc99b291590055188d7a29c8e","message":"The biggest plan for the future of this project is the goal to provide an interface for different programming paradigms,\nin order to make these compatible to each other.\nI suspect, that this could be used in order to get better performance:\n* [ ] Theorem Proofing: translate constraint systems\n* [ ] Machine Learning: generic problem interfaces for solvers based on machine learning\n* [ ] file like system of tables: versioning access and storage system for data.\n* [ ] interface to other optimization software via tables\n\nHow could something like this be done?\n* [ ] It should be based the most generic and easy to implement interface.\nMaybe shell + native file system + optional backend database in order to be portable, which is not always the case for the native file systems?\n* [ ] Maybe consider OS state interface as the base for this?\n* [ ] Create objective and solution documentation/specification in this issue.\n* [ ] Implement a primitive and somewhat complying first draft in order to test the concept a bit.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1643936197,"metadata":{"github-id":"UCE_lAHOFCNQW85C-lQozilw_IE"},"target":"a3f50b077d73282b04168caf6ecc66075eba757fc99b291590055188d7a29c8e","message":"The biggest plan for the future of this project is the goal to provide an interface for different programming paradigms,\nin order to make these compatible to each other.\nI suspect, that this could be used in order to get better performance:\n* [ ] Theorem Proofing: translate constraint systems\n* [ ] Machine Learning: generic problem interfaces for solvers based on machine learning\n* [ ] file like system of tables: versioning access and storage system for data.\n* [ ] interface to other optimization software via tables\n\nHow could something like this be done?\n* [ ] It should be based the most generic and easy to implement interface.\nMaybe shell + native file system + optional backend database in order to be portable, which is not always the case for the native file systems?\n* [ ] Maybe consider OS state interface as the base for this?\n* [ ] Create a new subproject for this.\n* [ ] Create objective and solution documentation/specification.\n* [ ] Implement a primitive and somewhat complying first draft in order to test the concept a bit.\nA full-blown correct implementation is not yet required.\nJust a starting point is required.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1643936263,"metadata":{"github-id":"UCE_lAHOFCNQW85C-lQozilw_pQ"},"target":"a3f50b077d73282b04168caf6ecc66075eba757fc99b291590055188d7a29c8e","message":"The biggest plan for the future of this project is the goal to provide an interface for different programming paradigms,\nin order to make these compatible to each other.\nI suspect, that this could be used in order to get better performance:\n* [ ] Theorem Proofing: translate constraint systems\n* [ ] Machine Learning: generic problem interfaces for solvers based on machine learning\n* [ ] file like system of tables: versioning access and storage system for data.\n* [ ] interface to other optimization software via tables\n\nHow could something like this be done?\n* [ ] It should be based the most generic and easy to implement interface.\nMaybe shell + native file system + optional backend database in order to be portable, which is not always the case for the native file systems?\n* [ ] Maybe consider OS state interface as the base for this?\n* [ ] Consider creating a new subproject for this (i.e. `net.splitcells.merger`).\n* [ ] Create objective and solution documentation/specification.\n* [ ] Implement a primitive and somewhat complying first draft in order to test the concept a bit.\nA full-blown correct implementation is not yet required.\nJust a starting point is required.","files":null},{"type":5,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1643936037,"metadata":{"github-id":"LE_lADOFCNQW85C-lQozwAAAAFmBMEB"},"added":["documentation"],"removed":[]},{"type":5,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1643936037,"metadata":{"github-id":"LE_lADOFCNQW85C-lQozwAAAAFmBMEE"},"added":["enhancement"],"removed":[]},{"type":5,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1643936037,"metadata":{"github-id":"LE_lADOFCNQW85C-lQozwAAAAFmBMEG"},"added":["help wanted"],"removed":[]},{"type":5,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1643936037,"metadata":{"github-id":"LE_lADOFCNQW85C-lQozwAAAAFmBMEI"},"added":["question"],"removed":[]}]}