{"version":1,"ops":[{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1642695088,"metadata":{"github-id":"UCE_lAHOFCNQW8458FF9zijSdAw"},"target":"660940cd0d9784ac675d70f8a48a9206f848e44d4fb2a40c1312a88dff512a2d","message":"- [ ] There is a problem with random generator on RISC-V.\n   - [ ] Create a minimal demo code.\n   - [ ] Find Java group for RISC-V related problems.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1642695137,"metadata":{"github-id":"UCE_lAHOFCNQW8458FF9zijSdwg"},"target":"660940cd0d9784ac675d70f8a48a9206f848e44d4fb2a40c1312a88dff512a2d","message":"- [ ] There is a problem with random generator on RISC-V.\n   - [ ] Create a minimal demo code.  Java shell can be used, in order to find the minimal code mor easily.\n   - [ ] Find Java group for RISC-V related problems.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1642695308,"metadata":{"github-id":"UCE_lAHOFCNQW8458FF9zijSf4Q"},"target":"660940cd0d9784ac675d70f8a48a9206f848e44d4fb2a40c1312a88dff512a2d","message":"- [ ] There is a problem with random generator on RISC-V.\n   - [ ] Create a minimal demo code.  Java shell can be used, in order to find the minimal code more easily.\n   - [ ] Find Java group for RISC-V related problems.\n   - [ ] Keep local server up to date. Maybe the problem will go away ^^","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1642727808,"metadata":{"github-id":"UCE_lAHOFCNQW8458FF9zijX4hQ"},"target":"660940cd0d9784ac675d70f8a48a9206f848e44d4fb2a40c1312a88dff512a2d","message":"- RISC-V Port of JDK: https://wiki.riscv.org/display/TECH/Language+Runtimes#LanguageRuntimes-RISC-Vstatus.2\n- [ ] There is a problem with random generator on RISC-V.\n   - [ ] Create a minimal demo code.  Java shell can be used, in order to find the minimal code more easily.\n   - [ ] Find Java group for RISC-V related problems.\n   - [ ] Keep local server up to date. Maybe the problem will go away ^^","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1642728326,"metadata":{"github-id":"UCE_lAHOFCNQW8458FF9zijX8do"},"target":"660940cd0d9784ac675d70f8a48a9206f848e44d4fb2a40c1312a88dff512a2d","message":"- RISC-V Port of JDK: https://wiki.riscv.org/display/TECH/Language+Runtimes#LanguageRuntimes-RISC-Vstatus.2\n- Newest JDK nightly builds for RISC-V: https://builds.shipilev.net/openjdk-jdk-riscv/\n- [ ] There is a problem with random generator on RISC-V.\n   - [ ] Create a minimal demo code.  Java shell can be used, in order to find the minimal code more easily.\n   - [ ] Find Java group for RISC-V related problems.\n   - [ ] Keep local server up to date. Maybe the problem will go away ^^","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1642730562,"metadata":{"github-id":"UCE_lAHOFCNQW8458FF9zijYM-U"},"target":"660940cd0d9784ac675d70f8a48a9206f848e44d4fb2a40c1312a88dff512a2d","message":"- RISC-V Port of JDK: https://wiki.riscv.org/display/TECH/Language+Runtimes#LanguageRuntimes-RISC-Vstatus.2\n- Newest JDK nightly builds for RISC-V: https://builds.shipilev.net/openjdk-jdk-riscv/\n- [ ] There is a problem with random generator on RISC-V.\n   - [x] Create a minimal demo code.  Java shell can be used, in order to find the minimal code more easily. -\u003e Syso debugging found the performance problem.\n      RandomnessTest takes a lot of time (approximately \u003e 3h:\n      There are 1 million and 3 thousand generated numbers and every thousand numbers takes about a second).\n   - [ ] Use a more silent fan for the HiFive Umatched, so it can run 24/7.\n   - [ ] Make randomness tests with more than a thousand numbers generated, part of the integration test.\n   - [ ] Find Java group for RISC-V related problems.\n   - [ ] Keep local server up to date. Maybe the problem will go away ^^\n- [ ] For interest: https://www.youtube.com/watch?v=VYB8YM-Dh8k","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1642733302,"metadata":{"github-id":"UCE_lAHOFCNQW8458FF9zijYiJk"},"target":"660940cd0d9784ac675d70f8a48a9206f848e44d4fb2a40c1312a88dff512a2d","message":"- RISC-V Port of JDK: https://wiki.riscv.org/display/TECH/Language+Runtimes#LanguageRuntimes-RISC-Vstatus.2\n- Newest JDK nightly builds for RISC-V: https://builds.shipilev.net/openjdk-jdk-riscv/\n- [ ] There is a problem with random generator on RISC-V.\n   - [x] Create a minimal demo code.  Java shell can be used, in order to find the minimal code more easily. -\u003e Syso debugging found the performance problem.\n      RandomnessTest takes a lot of time (approximately \u003e 3h:\n      There are 1 million and 3 thousand generated numbers and every thousand numbers takes about a second).\n   - [ ] Use a more silent fan for the HiFive Umatched, so it can run 24/7.\n   - [ ] Make randomness tests with more than a thousand numbers generated, part of the integration test.\n   - [x] Find Java group for RISC-V related problems.\n   - [ ] Keep local server up to date. Maybe the problem will go away ^^\n- [ ] For interest: https://www.youtube.com/watch?v=VYB8YM-Dh8k","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1642733306,"metadata":{"github-id":"UCE_lAHOFCNQW8458FF9zijYiMA"},"target":"660940cd0d9784ac675d70f8a48a9206f848e44d4fb2a40c1312a88dff512a2d","message":"- RISC-V Port of JDK: https://wiki.riscv.org/display/TECH/Language+Runtimes#LanguageRuntimes-RISC-Vstatus.2\n- Newest JDK nightly builds for RISC-V: https://builds.shipilev.net/openjdk-jdk-riscv/\n- [ ] There is a problem with random generator on RISC-V.\n   - [x] Create a minimal demo code.  Java shell can be used, in order to find the minimal code more easily. -\u003e Syso debugging found the performance problem.\n      RandomnessTest takes a lot of time (approximately \u003e 3h:\n      There are 1 million and 3 thousand generated numbers and every thousand numbers takes about a second).\n   - [ ] Use a more silent fan for the HiFive Umatched, so it can run 24/7.\n   - [ ] Make randomness tests with more than a thousand numbers generated, part of the integration test.\n   - [x] Find Java group for RISC-V related problems.\n   - [x] Keep local server up to date. Maybe the problem will go away ^^\n- [ ] For interest: https://www.youtube.com/watch?v=VYB8YM-Dh8k","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1642733326,"metadata":{"github-id":"UCE_lAHOFCNQW8458FF9zijYiWc"},"target":"660940cd0d9784ac675d70f8a48a9206f848e44d4fb2a40c1312a88dff512a2d","message":"- RISC-V Port of JDK: https://wiki.riscv.org/display/TECH/Language+Runtimes#LanguageRuntimes-RISC-Vstatus.2\n- Newest JDK nightly builds for RISC-V: https://builds.shipilev.net/openjdk-jdk-riscv/\n- [ ] There is a problem with random generator on RISC-V.\n   - [x] Create a minimal demo code.  Java shell can be used, in order to find the minimal code more easily. -\u003e Syso debugging found the performance problem.\n      RandomnessTest takes a lot of time (approximately \u003e 3h:\n      There are 1 million and 3 thousand generated numbers and every thousand numbers takes about a second).\n   - [ ] Use a more silent fan for the HiFive Umatched, so it can run 24/7.\n   - [ ] Make randomness tests with more than a thousand numbers generated, part of the integration test.\n   - [x] Find Java group for RISC-V related problems.\n   - [x] Keep local server up to date. Maybe the problem will go away ^^ -\u003e This is just a normal performance issue.\n- [ ] For interest: https://www.youtube.com/watch?v=VYB8YM-Dh8k","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1642733426,"metadata":{"github-id":"UCE_lAHOFCNQW8458FF9zijYjEI"},"target":"660940cd0d9784ac675d70f8a48a9206f848e44d4fb2a40c1312a88dff512a2d","message":"- RISC-V Port of JDK: https://wiki.riscv.org/display/TECH/Language+Runtimes#LanguageRuntimes-RISC-Vstatus.2\n- Newest JDK nightly builds for RISC-V: https://builds.shipilev.net/openjdk-jdk-riscv/\n- [ ] There is a problem with random generator on RISC-V.\n   - [x] Create a minimal demo code.  Java shell can be used, in order to find the minimal code more easily. -\u003e Syso debugging found the performance problem.\n      RandomnessTest takes a lot of time (approximately \u003e 3h:\n      There are 1 million and 3 thousand generated numbers and every thousand numbers takes about a second).\n   - [ ] Use a more silent fan for the HiFive Umatched, so it can run 24/7.\n   - [ ] Make randomness tests with more than a thousand numbers generated, part of the integration test, as the also take up some time (\u003e 2s) on x64 CPUs.\n   - [x] Find Java group for RISC-V related problems.\n   - [x] Keep local server up to date. Maybe the problem will go away ^^ -\u003e This is just a normal performance issue.\n- [ ] For interest: https://www.youtube.com/watch?v=VYB8YM-Dh8k","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1642733549,"metadata":{"github-id":"UCE_lAHOFCNQW8458FF9zijYj38"},"target":"660940cd0d9784ac675d70f8a48a9206f848e44d4fb2a40c1312a88dff512a2d","message":"- RISC-V Port of JDK: https://wiki.riscv.org/display/TECH/Language+Runtimes#LanguageRuntimes-RISC-Vstatus.2\n- Newest JDK nightly builds for RISC-V: https://builds.shipilev.net/openjdk-jdk-riscv/\n- [ ] There is a problem with random generator on RISC-V.\n   - [x] Create a minimal demo code.  Java shell can be used, in order to find the minimal code more easily. -\u003e Syso debugging found the performance problem.\n      RandomnessTest takes a lot of time (approximately \u003e 3h:\n      There are 1 million and 3 thousand generated numbers and every thousand numbers takes about a second).\n   - [ ] Use a more silent fan for the HiFive Umatched, so it can run 24/7.\n   - [ ] Make randomness tests with more than a thousand numbers generated, part of the integration test, as the also take up some time (\u003e 2s) on x64 CPUs. The test time for Dem is already the biggest of all (\u003e 15s).\n   - [x] Find Java group for RISC-V related problems.\n   - [x] Keep local server up to date. Maybe the problem will go away ^^ -\u003e This is just a normal performance issue.\n- [ ] For interest: https://www.youtube.com/watch?v=VYB8YM-Dh8k","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1642795195,"metadata":{"github-id":"UCE_lAHOFCNQW8458FF9zijiG1g"},"target":"660940cd0d9784ac675d70f8a48a9206f848e44d4fb2a40c1312a88dff512a2d","message":"- RISC-V Port of JDK: https://wiki.riscv.org/display/TECH/Language+Runtimes#LanguageRuntimes-RISC-Vstatus.2\n- Newest JDK nightly builds for RISC-V: https://builds.shipilev.net/openjdk-jdk-riscv/\n- [ ] There is a problem with random generator on RISC-V.\n   - [x] Create a minimal demo code.  Java shell can be used, in order to find the minimal code more easily. -\u003e Syso debugging found the performance problem.\n      RandomnessTest takes a lot of time (approximately \u003e 3h:\n      There are 1 million and 3 thousand generated numbers and every thousand numbers takes about a second).\n   - [ ] Use a more silent fan for the HiFive Umatched, so it can run 24/7.\n   - [ ] Make randomness tests with more than a thousand numbers generated, part of the integration test.\n   - [ ] Find Java group for RISC-V related problems.\n   - [ ] Keep local server up to date. Maybe the problem will go away ^^\n- [ ] For interest: https://www.youtube.com/watch?v=VYB8YM-Dh8k\n- [ ] Enable Wake-On-Lan in order to make booting automated: https://wiki.archlinux.org/title/Wake-on-LAN#Software_configuration","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1642795432,"metadata":{"github-id":"UCE_lAHOFCNQW8458FF9zijiJDs"},"target":"660940cd0d9784ac675d70f8a48a9206f848e44d4fb2a40c1312a88dff512a2d","message":"- RISC-V Port of JDK: https://wiki.riscv.org/display/TECH/Language+Runtimes#LanguageRuntimes-RISC-Vstatus.2\n- Newest JDK nightly builds for RISC-V: https://builds.shipilev.net/openjdk-jdk-riscv/\n- [ ] There is a problem with random generator on RISC-V.\n   - [x] Create a minimal demo code.  Java shell can be used, in order to find the minimal code more easily. -\u003e Syso debugging found the performance problem.\n      RandomnessTest takes a lot of time (approximately \u003e 3h:\n      There are 1 million and 3 thousand generated numbers and every thousand numbers takes about a second).\n   - [ ] Use a more silent fan for the HiFive Umatched, so it can run 24/7.\n   - [ ] Make randomness tests with more than a thousand numbers generated, part of the integration test.\n   - [ ] Find Java group for RISC-V related problems.\n   - [ ] Keep local server up to date. Maybe the problem will go away ^^\n- [ ] For interest: https://www.youtube.com/watch?v=VYB8YM-Dh8k\n- [ ] Enable Wake-On-Lan in order to make booting automated: https://wiki.archlinux.org/title/Wake-on-LAN#Software_configuration -\u003e `cannot enable unsupported WoL mode (offset 36)`","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1642795490,"metadata":{"github-id":"UCE_lAHOFCNQW8458FF9zijiJs0"},"target":"660940cd0d9784ac675d70f8a48a9206f848e44d4fb2a40c1312a88dff512a2d","message":"- RISC-V Port of JDK: https://wiki.riscv.org/display/TECH/Language+Runtimes#LanguageRuntimes-RISC-Vstatus.2\n- Newest JDK nightly builds for RISC-V: https://builds.shipilev.net/openjdk-jdk-riscv/\n- [ ] There is a problem with random generator on RISC-V.\n   - [x] Create a minimal demo code.  Java shell can be used, in order to find the minimal code more easily. -\u003e Syso debugging found the performance problem.\n      RandomnessTest takes a lot of time (approximately \u003e 3h:\n      There are 1 million and 3 thousand generated numbers and every thousand numbers takes about a second).\n   - [ ] Use a more silent fan for the HiFive Umatched, so it can run 24/7.\n   - [ ] Make randomness tests with more than a thousand numbers generated, part of the integration test.\n   - [ ] Find Java group for RISC-V related problems.\n   - [ ] Keep local server up to date. Maybe the problem will go away ^^\n- [ ] For interest: https://www.youtube.com/watch?v=VYB8YM-Dh8k\n- [x] Enable Wake-On-Lan in order to make booting automated: https://wiki.archlinux.org/title/Wake-on-LAN#Software_configuration -\u003e `cannot enable unsupported WoL mode (offset 36)`","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1642798335,"metadata":{"github-id":"UCE_lAHOFCNQW8458FF9zijikhE"},"target":"660940cd0d9784ac675d70f8a48a9206f848e44d4fb2a40c1312a88dff512a2d","message":"- RISC-V Port of JDK: https://wiki.riscv.org/display/TECH/Language+Runtimes#LanguageRuntimes-RISC-Vstatus.2\n- Newest JDK nightly builds for RISC-V: https://builds.shipilev.net/openjdk-jdk-riscv/\n- [ ] There is a problem with random generator on RISC-V.\n   - [x] Create a minimal demo code.  Java shell can be used, in order to find the minimal code more easily. -\u003e Syso debugging found the performance problem.\n      RandomnessTest takes a lot of time (approximately \u003e 3h:\n      There are 1 million and 3 thousand generated numbers and every thousand numbers takes about a second).\n   - [ ] Use a more silent fan for the HiFive Umatched, so it can run 24/7.\n   - [ ] Make randomness tests with more than a thousand numbers generated, part of the integration test.\n   - [ ] Find Java group for RISC-V related problems.\n   - [ ] Keep local server up to date. Maybe the problem will go away ^^\n- [ ] For interest: https://www.youtube.com/watch?v=VYB8YM-Dh8k\n- [x] Enable Wake-On-Lan in order to make booting automated: https://wiki.archlinux.org/title/Wake-on-LAN#Software_configuration -\u003e `cannot enable unsupported WoL mode (offset 36)`\n- [ ] Save log to file.\n- [ ] Save performance results at `network.log`.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1642798573,"metadata":{"github-id":"UCE_lAHOFCNQW8458FF9zijim2Q"},"target":"660940cd0d9784ac675d70f8a48a9206f848e44d4fb2a40c1312a88dff512a2d","message":"- RISC-V Port of JDK: https://wiki.riscv.org/display/TECH/Language+Runtimes#LanguageRuntimes-RISC-Vstatus.2\n- Newest JDK nightly builds for RISC-V: https://builds.shipilev.net/openjdk-jdk-riscv/\n- [ ] There is a problem with random generator on RISC-V.\n   - [x] Create a minimal demo code.  Java shell can be used, in order to find the minimal code more easily. -\u003e Syso debugging found the performance problem.\n      RandomnessTest takes a lot of time (approximately \u003e 3h:\n      There are 1 million and 3 thousand generated numbers and every thousand numbers takes about a second).\n   - [ ] Use a more silent fan for the HiFive Umatched, so it can run 24/7.\n   - [ ] Make randomness tests with more than a thousand numbers generated, part of the integration test.\n   - [ ] Find Java group for RISC-V related problems.\n   - [ ] Keep local server up to date. Maybe the problem will go away ^^\n- [ ] For interest: https://www.youtube.com/watch?v=VYB8YM-Dh8k\n- [x] Enable Wake-On-Lan in order to make booting automated: https://wiki.archlinux.org/title/Wake-on-LAN#Software_configuration -\u003e `cannot enable unsupported WoL mode (offset 36)`\n- [ ] Save log to file.\n- [ ] Save build time at `network.log` and publish it.\n- [ ] Make build work.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1642798575,"metadata":{"github-id":"UCE_lAHOFCNQW8458FF9zijim3s"},"target":"660940cd0d9784ac675d70f8a48a9206f848e44d4fb2a40c1312a88dff512a2d","message":"- RISC-V Port of JDK: https://wiki.riscv.org/display/TECH/Language+Runtimes#LanguageRuntimes-RISC-Vstatus.2\n- Newest JDK nightly builds for RISC-V: https://builds.shipilev.net/openjdk-jdk-riscv/\n- [ ] There is a problem with random generator on RISC-V.\n   - [x] Create a minimal demo code.  Java shell can be used, in order to find the minimal code more easily. -\u003e Syso debugging found the performance problem.\n      RandomnessTest takes a lot of time (approximately \u003e 3h:\n      There are 1 million and 3 thousand generated numbers and every thousand numbers takes about a second).\n   - [ ] Use a more silent fan for the HiFive Umatched, so it can run 24/7.\n   - [ ] Make randomness tests with more than a thousand numbers generated, part of the integration test.\n   - [ ] Find Java group for RISC-V related problems.\n   - [ ] Keep local server up to date. Maybe the problem will go away ^^\n- [ ] For interest: https://www.youtube.com/watch?v=VYB8YM-Dh8k\n- [x] Enable Wake-On-Lan in order to make booting automated: https://wiki.archlinux.org/title/Wake-on-LAN#Software_configuration -\u003e `cannot enable unsupported WoL mode (offset 36)`\n- [ ] Save log to file.\n- [ ] Save build time at `network.log` and publish it.\n- [x] Make build work.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1642798613,"metadata":{"github-id":"UCE_lAHOFCNQW8458FF9zijinN0"},"target":"660940cd0d9784ac675d70f8a48a9206f848e44d4fb2a40c1312a88dff512a2d","message":"- RISC-V Port of JDK: https://wiki.riscv.org/display/TECH/Language+Runtimes#LanguageRuntimes-RISC-Vstatus.2\n- Newest JDK nightly builds for RISC-V: https://builds.shipilev.net/openjdk-jdk-riscv/\n- [ ] There is a problem with random generator on RISC-V.\n   - [x] Create a minimal demo code.  Java shell can be used, in order to find the minimal code more easily. -\u003e Syso debugging found the performance problem.\n      RandomnessTest takes a lot of time (approximately \u003e 3h:\n      There are 1 million and 3 thousand generated numbers and every thousand numbers takes about a second).\n   - [ ] Use a more silent fan for the HiFive Umatched, so it can run 24/7.\n   - [ ] Make randomness tests with more than a thousand numbers generated, part of the integration test.\n   - [ ] Find Java group for RISC-V related problems.\n   - [ ] Keep local server up to date. Maybe the problem will go away ^^\n- [ ] For interest: https://www.youtube.com/watch?v=VYB8YM-Dh8k\n- [x] Enable Wake-On-Lan in order to make booting automated: https://wiki.archlinux.org/title/Wake-on-LAN#Software_configuration -\u003e `cannot enable unsupported WoL mode (offset 36)`\n- [ ] Save build log to file.\n- [ ] Save build time at `network.log` and publish it.\n- [x] Make build work.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1642958463,"metadata":{"github-id":"UCE_lAHOFCNQW8458FF9zijqdKc"},"target":"660940cd0d9784ac675d70f8a48a9206f848e44d4fb2a40c1312a88dff512a2d","message":"- RISC-V Port of JDK: https://wiki.riscv.org/display/TECH/Language+Runtimes#LanguageRuntimes-RISC-Vstatus.2\n- Newest JDK nightly builds for RISC-V: https://builds.shipilev.net/openjdk-jdk-riscv/\n- [ ] There is a problem with random generator on RISC-V.\n   - [x] Create a minimal demo code.  Java shell can be used, in order to find the minimal code more easily. -\u003e Syso debugging found the performance problem.\n      RandomnessTest takes a lot of time (approximately \u003e 3h:\n      There are 1 million and 3 thousand generated numbers and every thousand numbers takes about a second).\n   - [x] Use a more silent fan for the HiFive Umatched, so it can run 24/7.\n   - [ ] Make randomness tests with more than a thousand numbers generated, part of the integration test.\n   - [ ] Find Java group for RISC-V related problems.\n   - [ ] Keep local server up to date. Maybe the problem will go away ^^\n- [ ] For interest: https://www.youtube.com/watch?v=VYB8YM-Dh8k\n- [x] Enable Wake-On-Lan in order to make booting automated: https://wiki.archlinux.org/title/Wake-on-LAN#Software_configuration -\u003e `cannot enable unsupported WoL mode (offset 36)`\n- [ ] Save build log to file.\n- [ ] Save build time at `network.log` and publish it.\n- [x] Make build work.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1642958469,"metadata":{"github-id":"UCE_lAHOFCNQW8458FF9zijqdMo"},"target":"660940cd0d9784ac675d70f8a48a9206f848e44d4fb2a40c1312a88dff512a2d","message":"- RISC-V Port of JDK: https://wiki.riscv.org/display/TECH/Language+Runtimes#LanguageRuntimes-RISC-Vstatus.2\n- Newest JDK nightly builds for RISC-V: https://builds.shipilev.net/openjdk-jdk-riscv/\n- [ ] There is a problem with random generator on RISC-V.\n   - [x] Create a minimal demo code.  Java shell can be used, in order to find the minimal code more easily. -\u003e Syso debugging found the performance problem.\n      RandomnessTest takes a lot of time (approximately \u003e 3h:\n      There are 1 million and 3 thousand generated numbers and every thousand numbers takes about a second).\n   - [x] Use a more silent fan for the HiFive Umatched, so it can run 24/7.\n   - [x] Make randomness tests with more than a thousand numbers generated, part of the integration test.\n   - [ ] Find Java group for RISC-V related problems.\n   - [ ] Keep local server up to date. Maybe the problem will go away ^^\n- [ ] For interest: https://www.youtube.com/watch?v=VYB8YM-Dh8k\n- [x] Enable Wake-On-Lan in order to make booting automated: https://wiki.archlinux.org/title/Wake-on-LAN#Software_configuration -\u003e `cannot enable unsupported WoL mode (offset 36)`\n- [ ] Save build log to file.\n- [ ] Save build time at `network.log` and publish it.\n- [x] Make build work.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1642958521,"metadata":{"github-id":"UCE_lAHOFCNQW8458FF9zijqdYk"},"target":"660940cd0d9784ac675d70f8a48a9206f848e44d4fb2a40c1312a88dff512a2d","message":"- RISC-V Port of JDK: https://wiki.riscv.org/display/TECH/Language+Runtimes#LanguageRuntimes-RISC-Vstatus.2\n- Newest JDK nightly builds for RISC-V: https://builds.shipilev.net/openjdk-jdk-riscv/\n- [ ] There is a problem with random generator on RISC-V.\n   - [x] Create a minimal demo code.  Java shell can be used, in order to find the minimal code more easily. -\u003e Syso debugging found the performance problem.\n      RandomnessTest takes a lot of time (approximately \u003e 3h:\n      There are 1 million and 3 thousand generated numbers and every thousand numbers takes about a second).\n   - [x] Use a more silent fan for the HiFive Umatched, so it can run 24/7.\n   - [x] Make randomness tests with more than a thousand numbers generated, part of the integration test. -\u003e I instead reduced the number of generated numbers to a thousand in the affected test.\n   - [ ] Find Java group for RISC-V related problems.\n   - [ ] Keep local server up to date. Maybe the problem will go away ^^\n- [ ] For interest: https://www.youtube.com/watch?v=VYB8YM-Dh8k\n- [x] Enable Wake-On-Lan in order to make booting automated: https://wiki.archlinux.org/title/Wake-on-LAN#Software_configuration -\u003e `cannot enable unsupported WoL mode (offset 36)`\n- [ ] Save build log to file.\n- [ ] Save build time at `network.log` and publish it.\n- [x] Make build work.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1642958525,"metadata":{"github-id":"UCE_lAHOFCNQW8458FF9zijqdZU"},"target":"660940cd0d9784ac675d70f8a48a9206f848e44d4fb2a40c1312a88dff512a2d","message":"- RISC-V Port of JDK: https://wiki.riscv.org/display/TECH/Language+Runtimes#LanguageRuntimes-RISC-Vstatus.2\n- Newest JDK nightly builds for RISC-V: https://builds.shipilev.net/openjdk-jdk-riscv/\n- [ ] There is a problem with random generator on RISC-V.\n   - [x] Create a minimal demo code.  Java shell can be used, in order to find the minimal code more easily. -\u003e Syso debugging found the performance problem.\n      RandomnessTest takes a lot of time (approximately \u003e 3h:\n      There are 1 million and 3 thousand generated numbers and every thousand numbers takes about a second).\n   - [x] Use a more silent fan for the HiFive Umatched, so it can run 24/7.\n   - [x] Make randomness tests with more than a thousand numbers generated, part of the integration test. -\u003e I instead reduced the number of generated numbers to a thousand in the affected test.\n   - [x] Find Java group for RISC-V related problems.\n   - [ ] Keep local server up to date. Maybe the problem will go away ^^\n- [ ] For interest: https://www.youtube.com/watch?v=VYB8YM-Dh8k\n- [x] Enable Wake-On-Lan in order to make booting automated: https://wiki.archlinux.org/title/Wake-on-LAN#Software_configuration -\u003e `cannot enable unsupported WoL mode (offset 36)`\n- [ ] Save build log to file.\n- [ ] Save build time at `network.log` and publish it.\n- [x] Make build work.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1642958528,"metadata":{"github-id":"UCE_lAHOFCNQW8458FF9zijqdZo"},"target":"660940cd0d9784ac675d70f8a48a9206f848e44d4fb2a40c1312a88dff512a2d","message":"- RISC-V Port of JDK: https://wiki.riscv.org/display/TECH/Language+Runtimes#LanguageRuntimes-RISC-Vstatus.2\n- Newest JDK nightly builds for RISC-V: https://builds.shipilev.net/openjdk-jdk-riscv/\n- [ ] There is a problem with random generator on RISC-V.\n   - [x] Create a minimal demo code.  Java shell can be used, in order to find the minimal code more easily. -\u003e Syso debugging found the performance problem.\n      RandomnessTest takes a lot of time (approximately \u003e 3h:\n      There are 1 million and 3 thousand generated numbers and every thousand numbers takes about a second).\n   - [x] Use a more silent fan for the HiFive Umatched, so it can run 24/7.\n   - [x] Make randomness tests with more than a thousand numbers generated, part of the integration test. -\u003e I instead reduced the number of generated numbers to a thousand in the affected test.\n   - [ ] Find Java group for RISC-V related problems.\n   - [ ] Keep local server up to date. Maybe the problem will go away ^^\n- [ ] For interest: https://www.youtube.com/watch?v=VYB8YM-Dh8k\n- [x] Enable Wake-On-Lan in order to make booting automated: https://wiki.archlinux.org/title/Wake-on-LAN#Software_configuration -\u003e `cannot enable unsupported WoL mode (offset 36)`\n- [ ] Save build log to file.\n- [ ] Save build time at `network.log` and publish it.\n- [x] Make build work.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1642958958,"metadata":{"github-id":"UCE_lAHOFCNQW8458FF9zijqerI"},"target":"660940cd0d9784ac675d70f8a48a9206f848e44d4fb2a40c1312a88dff512a2d","message":"- RISC-V Port of JDK: https://wiki.riscv.org/display/TECH/Language+Runtimes#LanguageRuntimes-RISC-Vstatus.2\n- Newest JDK nightly builds for RISC-V: https://builds.shipilev.net/openjdk-jdk-riscv/\n- [ ] There is a problem with random generator on RISC-V.\n   - [x] Create a minimal demo code.  Java shell can be used, in order to find the minimal code more easily. -\u003e Syso debugging found the performance problem.\n      RandomnessTest takes a lot of time (approximately \u003e 3h:\n      There are 1 million and 3 thousand generated numbers and every thousand numbers takes about a second).\n   - [x] Use a more silent fan for the HiFive Umatched, so it can run 24/7.\n   - [x] Make randomness tests with more than a thousand numbers generated, part of the integration test. -\u003e I instead reduced the number of generated numbers to a thousand in the affected test.\n   - [x] Find Java group for RISC-V related problems.\n   - [ ] Keep local server up to date. Maybe the problem will go away ^^\n- [ ] For interest: https://www.youtube.com/watch?v=VYB8YM-Dh8k\n- [x] Enable Wake-On-Lan in order to make booting automated: https://wiki.archlinux.org/title/Wake-on-LAN#Software_configuration -\u003e `cannot enable unsupported WoL mode (offset 36)`\n- [ ] Save build log to file.\n- [ ] Save build time at `network.log` and publish it.\n- [x] Make build work.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1642958961,"metadata":{"github-id":"UCE_lAHOFCNQW8458FF9zijqers"},"target":"660940cd0d9784ac675d70f8a48a9206f848e44d4fb2a40c1312a88dff512a2d","message":"- RISC-V Port of JDK: https://wiki.riscv.org/display/TECH/Language+Runtimes#LanguageRuntimes-RISC-Vstatus.2\n- Newest JDK nightly builds for RISC-V: https://builds.shipilev.net/openjdk-jdk-riscv/\n- [ ] There is a problem with random generator on RISC-V.\n   - [x] Create a minimal demo code.  Java shell can be used, in order to find the minimal code more easily. -\u003e Syso debugging found the performance problem.\n      RandomnessTest takes a lot of time (approximately \u003e 3h:\n      There are 1 million and 3 thousand generated numbers and every thousand numbers takes about a second).\n   - [x] Use a more silent fan for the HiFive Umatched, so it can run 24/7.\n   - [x] Make randomness tests with more than a thousand numbers generated, part of the integration test. -\u003e I instead reduced the number of generated numbers to a thousand in the affected test.\n   - [x] Find Java group for RISC-V related problems.\n   - [x] Keep local server up to date. Maybe the problem will go away ^^\n- [ ] For interest: https://www.youtube.com/watch?v=VYB8YM-Dh8k\n- [x] Enable Wake-On-Lan in order to make booting automated: https://wiki.archlinux.org/title/Wake-on-LAN#Software_configuration -\u003e `cannot enable unsupported WoL mode (offset 36)`\n- [ ] Save build log to file.\n- [ ] Save build time at `network.log` and publish it.\n- [x] Make build work.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1642958963,"metadata":{"github-id":"UCE_lAHOFCNQW8458FF9zijqesE"},"target":"660940cd0d9784ac675d70f8a48a9206f848e44d4fb2a40c1312a88dff512a2d","message":"- RISC-V Port of JDK: https://wiki.riscv.org/display/TECH/Language+Runtimes#LanguageRuntimes-RISC-Vstatus.2\n- Newest JDK nightly builds for RISC-V: https://builds.shipilev.net/openjdk-jdk-riscv/\n- [x] There is a problem with random generator on RISC-V.\n   - [x] Create a minimal demo code.  Java shell can be used, in order to find the minimal code more easily. -\u003e Syso debugging found the performance problem.\n      RandomnessTest takes a lot of time (approximately \u003e 3h:\n      There are 1 million and 3 thousand generated numbers and every thousand numbers takes about a second).\n   - [x] Use a more silent fan for the HiFive Umatched, so it can run 24/7.\n   - [x] Make randomness tests with more than a thousand numbers generated, part of the integration test. -\u003e I instead reduced the number of generated numbers to a thousand in the affected test.\n   - [x] Find Java group for RISC-V related problems.\n   - [x] Keep local server up to date. Maybe the problem will go away ^^\n- [ ] For interest: https://www.youtube.com/watch?v=VYB8YM-Dh8k\n- [x] Enable Wake-On-Lan in order to make booting automated: https://wiki.archlinux.org/title/Wake-on-LAN#Software_configuration -\u003e `cannot enable unsupported WoL mode (offset 36)`\n- [ ] Save build log to file.\n- [ ] Save build time at `network.log` and publish it.\n- [x] Make build work.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1642958965,"metadata":{"github-id":"UCE_lAHOFCNQW8458FF9zijqesY"},"target":"660940cd0d9784ac675d70f8a48a9206f848e44d4fb2a40c1312a88dff512a2d","message":"- RISC-V Port of JDK: https://wiki.riscv.org/display/TECH/Language+Runtimes#LanguageRuntimes-RISC-Vstatus.2\n- Newest JDK nightly builds for RISC-V: https://builds.shipilev.net/openjdk-jdk-riscv/\n- [ ] There is a problem with random generator on RISC-V.\n   - [x] Create a minimal demo code.  Java shell can be used, in order to find the minimal code more easily. -\u003e Syso debugging found the performance problem.\n      RandomnessTest takes a lot of time (approximately \u003e 3h:\n      There are 1 million and 3 thousand generated numbers and every thousand numbers takes about a second).\n   - [x] Use a more silent fan for the HiFive Umatched, so it can run 24/7.\n   - [x] Make randomness tests with more than a thousand numbers generated, part of the integration test. -\u003e I instead reduced the number of generated numbers to a thousand in the affected test.\n   - [x] Find Java group for RISC-V related problems.\n   - [x] Keep local server up to date. Maybe the problem will go away ^^\n- [ ] For interest: https://www.youtube.com/watch?v=VYB8YM-Dh8k\n- [x] Enable Wake-On-Lan in order to make booting automated: https://wiki.archlinux.org/title/Wake-on-LAN#Software_configuration -\u003e `cannot enable unsupported WoL mode (offset 36)`\n- [ ] Save build log to file.\n- [ ] Save build time at `network.log` and publish it.\n- [x] Make build work.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1642959071,"metadata":{"github-id":"UCE_lAHOFCNQW8458FF9zijqfBw"},"target":"660940cd0d9784ac675d70f8a48a9206f848e44d4fb2a40c1312a88dff512a2d","message":"- RISC-V Port of JDK: https://wiki.riscv.org/display/TECH/Language+Runtimes#LanguageRuntimes-RISC-Vstatus.2\n- Newest JDK nightly builds for RISC-V: https://builds.shipilev.net/openjdk-jdk-riscv/\n- [ ] There is a problem with random generator on RISC-V.\n   - [x] Create a minimal demo code.  Java shell can be used, in order to find the minimal code more easily. -\u003e Syso debugging found the performance problem.\n      RandomnessTest takes a lot of time (approximately \u003e 3h:\n      There are 1 million and 3 thousand generated numbers and every thousand numbers takes about a second).\n   - [x] Use a more silent fan for the HiFive Umatched, so it can run 24/7.\n   - [x] Make randomness tests with more than a thousand numbers generated, part of the integration test. -\u003e I instead reduced the number of generated numbers to a thousand in the affected test.\n   - [x] Find Java group for RISC-V related problems.\n   - [x] Keep local server up to date. Maybe the problem will go away ^^\n- [ ] For interest: https://www.youtube.com/watch?v=VYB8YM-Dh8k\n- [x] Enable Wake-On-Lan in order to make booting automated: https://wiki.archlinux.org/title/Wake-on-LAN#Software_configuration -\u003e `cannot enable unsupported WoL mode (offset 36)`\n- [ ] Save build log to file.\n- [ ] Save build time at `network.log.status` and publish it.\n- [x] Make build work.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1644954476,"metadata":{"github-id":"UCE_lAHOFCNQW8458FF9zinzJfU"},"target":"660940cd0d9784ac675d70f8a48a9206f848e44d4fb2a40c1312a88dff512a2d","message":"- RISC-V Port of JDK: https://wiki.riscv.org/display/TECH/Language+Runtimes#LanguageRuntimes-RISC-Vstatus.2\n- Newest JDK nightly builds for RISC-V: https://builds.shipilev.net/openjdk-jdk-riscv/\n- [x] There is a problem with random generator on RISC-V.\n   - [x] Create a minimal demo code.  Java shell can be used, in order to find the minimal code more easily. -\u003e Syso debugging found the performance problem.\n      RandomnessTest takes a lot of time (approximately \u003e 3h:\n      There are 1 million and 3 thousand generated numbers and every thousand numbers takes about a second).\n   - [x] Use a more silent fan for the HiFive Umatched, so it can run 24/7.\n   - [x] Make randomness tests with more than a thousand numbers generated, part of the integration test. -\u003e I instead reduced the number of generated numbers to a thousand in the affected test.\n   - [x] Find Java group for RISC-V related problems.\n   - [x] Keep local server up to date. Maybe the problem will go away ^^\n- [ ] For interest: https://www.youtube.com/watch?v=VYB8YM-Dh8k\n- [x] Enable Wake-On-Lan in order to make booting automated: https://wiki.archlinux.org/title/Wake-on-LAN#Software_configuration -\u003e `cannot enable unsupported WoL mode (offset 36)`\n- [ ] Save build log to file.\n- [ ] Save build time at `network.log.status` and publish it.\n- [x] Make build work.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1649596759,"metadata":{"github-id":"UCE_lAHOFCNQW8458FF9zixXzX8"},"target":"660940cd0d9784ac675d70f8a48a9206f848e44d4fb2a40c1312a88dff512a2d","message":"- RISC-V Port of JDK: https://wiki.riscv.org/display/TECH/Language+Runtimes#LanguageRuntimes-RISC-Vstatus.2\n- Newest JDK nightly builds for RISC-V: https://builds.shipilev.net/openjdk-jdk-riscv/\n- [x] There is a problem with random generator on RISC-V.\n   - [x] Create a minimal demo code.  Java shell can be used, in order to find the minimal code more easily. -\u003e Syso debugging found the performance problem.\n      RandomnessTest takes a lot of time (approximately \u003e 3h:\n      There are 1 million and 3 thousand generated numbers and every thousand numbers takes about a second).\n   - [x] Use a more silent fan for the HiFive Umatched, so it can run 24/7.\n   - [x] Make randomness tests with more than a thousand numbers generated, part of the integration test. -\u003e I instead reduced the number of generated numbers to a thousand in the affected test.\n   - [x] Find Java group for RISC-V related problems.\n   - [x] Keep local server up to date. Maybe the problem will go away ^^\n- [ ] For interest: https://www.youtube.com/watch?v=VYB8YM-Dh8k\n- [x] Enable Wake-On-Lan in order to make booting automated: https://wiki.archlinux.org/title/Wake-on-LAN#Software_configuration -\u003e `cannot enable unsupported WoL mode (offset 36)`\n- [x] Save build log to file.\n- [ ] Save build time at `network.log.status` and publish it.\n- [x] Make build work.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1649596761,"metadata":{"github-id":"UCE_lAHOFCNQW8458FF9zixXzYg"},"target":"660940cd0d9784ac675d70f8a48a9206f848e44d4fb2a40c1312a88dff512a2d","message":"- RISC-V Port of JDK: https://wiki.riscv.org/display/TECH/Language+Runtimes#LanguageRuntimes-RISC-Vstatus.2\n- Newest JDK nightly builds for RISC-V: https://builds.shipilev.net/openjdk-jdk-riscv/\n- [x] There is a problem with random generator on RISC-V.\n   - [x] Create a minimal demo code.  Java shell can be used, in order to find the minimal code more easily. -\u003e Syso debugging found the performance problem.\n      RandomnessTest takes a lot of time (approximately \u003e 3h:\n      There are 1 million and 3 thousand generated numbers and every thousand numbers takes about a second).\n   - [x] Use a more silent fan for the HiFive Umatched, so it can run 24/7.\n   - [x] Make randomness tests with more than a thousand numbers generated, part of the integration test. -\u003e I instead reduced the number of generated numbers to a thousand in the affected test.\n   - [x] Find Java group for RISC-V related problems.\n   - [x] Keep local server up to date. Maybe the problem will go away ^^\n- [ ] For interest: https://www.youtube.com/watch?v=VYB8YM-Dh8k\n- [x] Enable Wake-On-Lan in order to make booting automated: https://wiki.archlinux.org/title/Wake-on-LAN#Software_configuration -\u003e `cannot enable unsupported WoL mode (offset 36)`\n- [x] Save build log to file.\n- [x] Save build time at `network.log.status` and publish it.\n- [x] Make build work.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1649596798,"metadata":{"github-id":"UCE_lAHOFCNQW8458FF9zixXzjg"},"target":"660940cd0d9784ac675d70f8a48a9206f848e44d4fb2a40c1312a88dff512a2d","message":"- RISC-V Port of JDK: https://wiki.riscv.org/display/TECH/Language+Runtimes#LanguageRuntimes-RISC-Vstatus.2\n- Newest JDK nightly builds for RISC-V: https://builds.shipilev.net/openjdk-jdk-riscv/\n- [x] There is a problem with random generator on RISC-V.\n   - [x] Create a minimal demo code.  Java shell can be used, in order to find the minimal code more easily. -\u003e Syso debugging found the performance problem.\n      RandomnessTest takes a lot of time (approximately \u003e 3h:\n      There are 1 million and 3 thousand generated numbers and every thousand numbers takes about a second).\n   - [x] Use a more silent fan for the HiFive Umatched, so it can run 24/7.\n   - [x] Make randomness tests with more than a thousand numbers generated, part of the integration test. -\u003e I instead reduced the number of generated numbers to a thousand in the affected test.\n   - [x] Find Java group for RISC-V related problems.\n   - [x] Keep local server up to date. Maybe the problem will go away ^^\n- [x] For interest: https://www.youtube.com/watch?v=VYB8YM-Dh8k\n- [x] Enable Wake-On-Lan in order to make booting automated: https://wiki.archlinux.org/title/Wake-on-LAN#Software_configuration -\u003e `cannot enable unsupported WoL mode (offset 36)`\n- [x] Save build log to file.\n- [x] Save build time at `network.log.status` and publish it.\n- [x] Make build work.","files":null},{"type":5,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1629143494,"metadata":{"github-id":"MDEyOkxhYmVsZWRFdmVudDUxNjUxMDgyODk="},"added":["enhancement"],"removed":[]},{"type":2,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1642695075,"metadata":{"github-id":"RTE_lADOFCNQW8458FF9zwAAAAFhOrhI"},"title":"Setup local RISC-V CI server.","was":"Setup local RISC-V CI server."},{"type":3,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1649596845,"metadata":{"github-id":"IC_kwDOFCNQW85BOUwl","github-url":"https://github.com/www-splitcells-net/net.splitcells.network/issues/92#issuecomment-1094274085"},"message":"The process is currently somewhat manual, but it works.\nExample: https://splitcells.net/net/splitcells/dem/data/atom/BoolsTest/riscv.csv.html\n\nIt will be automated with #162.","files":null},{"type":4,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1649596849,"metadata":{"github-id":"CE_lADOFCNQW8458FF9zwAAAAF9tD09"},"status":2}]}