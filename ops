{"version":1,"ops":[{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1618514935,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo1MjQxNzUzMDA="},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [ ] Model Problem.\n- [ ] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n- [ ] Compare to repairer to hill climber.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1618517037,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo1MjQxOTIxODE="},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [ ] Model Problem.\n- [ ] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n- [ ] Compare to repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1620084527,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo1MzI3NDgyNjA="},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [ ] Model Problem.\n- [ ] Test rating with example problems.\n- [ ] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n- [ ] Compare to repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1620242258,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo1MzM4ODk1MDc="},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [ ] Model Problem.\n- [ ] Test rating with example problems.\n- [ ] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n- [ ] Compare to repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [ ] Implement derived values contraint.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1620243126,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo1MzM4OTU4MTU="},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [ ] Model Problem.\n- [ ] Test rating with example problems.\n- [ ] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n- [ ] Compare to repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1622675032,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo1NDk0Mjc3MzQ="},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [ ] Test rating with example problems.\n- [ ] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n- [ ] Compare to repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1622675034,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo1NDk0Mjc3NDM="},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [ ] Model Problem.\n- [ ] Test rating with example problems.\n- [ ] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n- [ ] Compare to repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1622675039,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo1NDk0Mjc3NzI="},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [ ] Test rating with example problems.\n- [ ] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n- [ ] Compare to repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1622788540,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo1NTAyMzA3Nzc="},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [ ] Model Problem.\n- [ ] Test rating with example problems.\n- [ ] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n- [ ] Compare to repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1622789480,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo1NTAyMzc2MDE="},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [ ] Test rating with example problems.\n- [ ] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n- [ ] Compare to repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1625004880,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo1NjM4NTg0OTI="},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [ ] Test rating with simple example problems.\n- [ ] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n- [ ] Compare to repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1625781215,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo1Njg5NzM0MjI="},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems.\n- [ ] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n- [ ] Compare to repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1625781260,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo1Njg5NzM3Njg="},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and than verify the solution manually.\n- [ ] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n- [ ] Compare to repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1625781951,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo1Njg5Nzg1NTM="},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and than verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n- [ ] Compare to repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1627724632,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo1ODA3NjEzNDU="},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [ ] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and than verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n- [ ] Compare to repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1627724639,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo1ODA3NjEzNjY="},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and than verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n- [ ] Compare to repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1630618445,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo1OTk4NTQ5MTE="},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n- [ ] Compare to repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [ ] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1630619674,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo1OTk4NjQzMTg="},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n- [ ] Compare to repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [ ] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [ ] Remove usage of Node logging interface.\n   - [ ] Replace Node logging interface with Perspective logging interface.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1630881572,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo2MDA5NDYyNjg="},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n- [ ] Compare to repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [ ] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [ ] Remove usage of Node logging interface.\n   - [ ] Replace Node logging interface with Perspective logging interface.\n   - [ ] Create one ouput file for each logging context and enable creating csv files this way.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1631137300,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo2MDMwMTI2NDk="},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n- [ ] Compare to repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [ ] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [ ] Remove usage of Node logging interface.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [ ] Create one ouput file for each logging context and enable creating csv files this way.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1631137305,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo2MDMwMTI2ODg="},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n- [ ] Compare to repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [ ] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [ ] Remove usage of Node logging interface.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1631137350,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo2MDMwMTMwMjk="},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n- [ ] Compare to repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [ ] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [ ] Remove usage of Node logging interface.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way. -\u003e UiRouter can be used as an alternative Domsole.\n   - [ ] Fix XML outpout for Domsole.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1631137418,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo2MDMwMTM1MTg="},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n- [ ] Compare to repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [ ] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [ ] Remove usage of Node logging interface.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way. -\u003e UiRouter can be used as an alternative Domsole.\n   - [ ] Fix XML outpout for Domsole.\n- [ ] Solve railsForSchoolScheduling.\n   - [ ] Create allocations are completely implausible.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1631739795,"metadata":{"github-id":"UCE_lAHOFCNQW84xHWf2ziQyQVM"},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n- [ ] Compare to repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [x] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [x] Remove usage of Node logging interface. -\u003e I removed some Node usage and deprecated the interface instead.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way. -\u003e UiRouter can be used as an alternative Domsole.\n   - [x] Fix XML outpout for Domsole. -\u003e Will fix it, when it is used again or the code is cleaned up during maintenance.\n- [ ] Solve railsForSchoolScheduling.\n   - [ ] Create allocations are completely implausible.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1631739969,"metadata":{"github-id":"UCE_lAHOFCNQW84xHWf2ziQyR6Q"},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n   - [ ] Use custom initializers for constraint based repair in order to improve results.\n- [ ] Compare repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [x] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [x] Remove usage of Node logging interface. -\u003e I removed some Node usage and deprecated the interface instead.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way. -\u003e UiRouter can be used as an alternative Domsole.\n   - [x] Fix XML outpout for Domsole. -\u003e Will fix it, when it is used again or the code is cleaned up during maintenance.\n- [ ] Solve railsForSchoolScheduling.\n   - [ ] Create allocations are completely implausible.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1632093107,"metadata":{"github-id":"UCE_lAHOFCNQW84xHWf2ziRQJS8"},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n   - [ ] Use custom initializers for constraint based repair in order to improve results.\nDo this by reimplementing the old problem specific initializers.\n- [ ] Compare repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [x] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [x] Remove usage of Node logging interface. -\u003e I removed some Node usage and deprecated the interface instead.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way. -\u003e UiRouter can be used as an alternative Domsole.\n   - [x] Fix XML outpout for Domsole. -\u003e Will fix it, when it is used again or the code is cleaned up during maintenance.\n- [ ] Solve railsForSchoolScheduling.\n   - [ ] Create allocations are completely implausible.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1632094128,"metadata":{"github-id":"UCE_lAHOFCNQW84xHWf2ziRQLx4"},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n   - [ ] Use custom initializers for constraint based repair in order to improve results.\n   - [ ] Render performance data in Graph and monitor results,\nin order to get a felling, how much needs to be done and how much effect a single action had.\nDo this by reimplementing the old problem specific initializers.\n- [ ] Compare repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [x] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [x] Remove usage of Node logging interface. -\u003e I removed some Node usage and deprecated the interface instead.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way. -\u003e UiRouter can be used as an alternative Domsole.\n   - [x] Fix XML outpout for Domsole. -\u003e Will fix it, when it is used again or the code is cleaned up during maintenance.\n- [ ] Solve railsForSchoolScheduling.\n   - [ ] Create allocations are completely implausible.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1632094297,"metadata":{"github-id":"UCE_lAHOFCNQW84xHWf2ziRQMLI"},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n   - [ ] Use custom initializers for constraint based repair in order to improve results.\n   - [ ] Render performance data in Graph and monitor results,\nin order to get a felling, how much needs to be done and how much effect a single action had.\nDo this by reimplementing the old problem specific initializers.\n(Currently done via https://localhost:8444/net/splitcells/martins/avots/website/test.html)\n- [ ] Compare repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [x] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [x] Remove usage of Node logging interface. -\u003e I removed some Node usage and deprecated the interface instead.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way. -\u003e UiRouter can be used as an alternative Domsole.\n   - [x] Fix XML outpout for Domsole. -\u003e Will fix it, when it is used again or the code is cleaned up during maintenance.\n- [ ] Solve railsForSchoolScheduling.\n   - [ ] Create allocations are completely implausible.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1647565798,"metadata":{"github-id":"UCE_lAHOFCNQW84xHWf2zitRIM4"},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n   - [ ] Use custom initializers for constraint based repair in order to improve results.\n   - [ ] Render performance data in Graph and monitor results,\nin order to get a felling, how much needs to be done and how much effect a single action had.\nDo this by reimplementing the old problem specific initializers.\n(Currently done via https://localhost:8444/net/splitcells/martins/avots/website/test.html)\n- [ ] Compare repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [x] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [x] Remove usage of Node logging interface. -\u003e I removed some Node usage and deprecated the interface instead.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way. -\u003e UiRouter can be used as an alternative Domsole.\n   - [x] Fix XML outpout for Domsole. -\u003e Will fix it, when it is used again or the code is cleaned up during maintenance.\n- [ ] Solve railsForSchoolScheduling.\n   - [ ] Create allocations are completely implausible.\n- [ ] Optimization does not work for second subproblem, because the Components of the removal event does not contain data, that fits to the sub problem's schema.\n   - [ ] Maybe this is caused by wrapped allocations.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1647565968,"metadata":{"github-id":"UCE_lAHOFCNQW84xHWf2zitRJYA"},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n   - [ ] Use custom initializers for constraint based repair in order to improve results.\n   - [ ] Render performance data in Graph and monitor results,\nin order to get a felling, how much needs to be done and how much effect a single action had.\nDo this by reimplementing the old problem specific initializers.\n(Currently done via https://localhost:8444/net/splitcells/martins/avots/website/test.html)\n- [ ] Compare repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [x] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [x] Remove usage of Node logging interface. -\u003e I removed some Node usage and deprecated the interface instead.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way. -\u003e UiRouter can be used as an alternative Domsole.\n   - [x] Fix XML outpout for Domsole. -\u003e Will fix it, when it is used again or the code is cleaned up during maintenance.\n- [ ] Solve railsForSchoolScheduling.\n   - [ ] Create allocations are completely implausible.\n- [ ] Optimization does not work for second subproblem, because the Components of the removal event does not contain data, that fits to the sub problem's schema.\n   - [ ] Maybe this is caused by wrapped allocations.\n   - [ ] ```java.lang.AssertionError: \nExpecting:\n  \u003c[Database[demands, Rails For School Scheduling, allocations]]\u003e\nto contain at least one of the following elements:\n  \u003c[[demands, Rails For School Scheduling],\n    Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used]]\u003e\nbut none were found ```","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1647993568,"metadata":{"github-id":"UCE_lAHOFCNQW84xHWf2ziuAhtM"},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n   - [ ] Use custom initializers for constraint based repair in order to improve results.\n   - [ ] Render performance data in Graph and monitor results,\nin order to get a felling, how much needs to be done and how much effect a single action had.\nDo this by reimplementing the old problem specific initializers.\n(Currently done via https://localhost:8444/net/splitcells/martins/avots/website/test.html)\n- [ ] Compare repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [x] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [x] Remove usage of Node logging interface. -\u003e I removed some Node usage and deprecated the interface instead.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way. -\u003e UiRouter can be used as an alternative Domsole.\n   - [x] Fix XML outpout for Domsole. -\u003e Will fix it, when it is used again or the code is cleaned up during maintenance.\n- [ ] Solve railsForSchoolScheduling.\n   - [ ] Create allocations are completely implausible.\n- [ ] Optimization does not work for second subproblem, because the Components of the removal event does not contain data, that fits to the sub problem's schema.\n   - [ ] Maybe this is caused by wrapped allocations.\n   - [ ] ```java.lang.AssertionError: \nExpecting:\n  \u003c[Database[demands, Rails For School Scheduling, allocations]]\u003e\nto contain at least one of the following elements:\n  \u003c[[demands, Rails For School Scheduling],\n    Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used]]\u003e\nbut none were found ```\n* [x] Allocations do not work for nested problems, because there is an equality problem. -\u003e Allocations had an incorrect path.\n```Context of demand for removal should be part demands or used demands, but is not:\nRemoval context is           Database[demands, Rails For School Scheduling, allocations],\ndemands context is          [demands, Rails For School Scheduling] and\nused demands context is Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used].```","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1647993579,"metadata":{"github-id":"UCE_lAHOFCNQW84xHWf2ziuAhx4"},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n   - [ ] Use custom initializers for constraint based repair in order to improve results.\n   - [ ] Render performance data in Graph and monitor results,\nin order to get a felling, how much needs to be done and how much effect a single action had.\nDo this by reimplementing the old problem specific initializers.\n(Currently done via https://localhost:8444/net/splitcells/martins/avots/website/test.html)\n- [ ] Compare repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [x] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [x] Remove usage of Node logging interface. -\u003e I removed some Node usage and deprecated the interface instead.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way. -\u003e UiRouter can be used as an alternative Domsole.\n   - [x] Fix XML outpout for Domsole. -\u003e Will fix it, when it is used again or the code is cleaned up during maintenance.\n- [ ] Solve railsForSchoolScheduling.\n   - [ ] Create allocations are completely implausible.\n- [ ] Optimization does not work for second subproblem, because the Components of the removal event does not contain data, that fits to the sub problem's schema.\n   - [ ] Maybe this is caused by wrapped allocations.\n   - [ ] ```java.lang.AssertionError: \nExpecting:\n  \u003c[Database[demands, Rails For School Scheduling, allocations]]\u003e\nto contain at least one of the following elements:\n  \u003c[[demands, Rails For School Scheduling],\n    Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used]]\u003e\nbut none were found ```\n* [x] Allocations do not work for nested problems, because there is an equality problem. -\u003e Allocations had an inconsistent path.\n```Context of demand for removal should be part demands or used demands, but is not:\nRemoval context is           Database[demands, Rails For School Scheduling, allocations],\ndemands context is          [demands, Rails For School Scheduling] and\nused demands context is Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used].```","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1647993652,"metadata":{"github-id":"UCE_lAHOFCNQW84xHWf2ziuAiLs"},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n   - [ ] Use custom initializers for constraint based repair in order to improve results.\n   - [ ] Render performance data in Graph and monitor results,\nin order to get a felling, how much needs to be done and how much effect a single action had.\nDo this by reimplementing the old problem specific initializers.\n(Currently done via https://localhost:8444/net/splitcells/martins/avots/website/test.html)\n- [ ] Compare repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [x] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [x] Remove usage of Node logging interface. -\u003e I removed some Node usage and deprecated the interface instead.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way. -\u003e UiRouter can be used as an alternative Domsole.\n   - [x] Fix XML outpout for Domsole. -\u003e Will fix it, when it is used again or the code is cleaned up during maintenance.\n- [ ] Solve railsForSchoolScheduling.\n   - [ ] Create allocations are completely implausible.\n- [ ] Optimization does not work for second subproblem, because the Components of the removal event does not contain data, that fits to the sub problem's schema.\n   - [ ] Maybe this is caused by wrapped allocations.\n   - [ ] ```java.lang.AssertionError: \nExpecting:\n  \u003c[Database[demands, Rails For School Scheduling, allocations]]\u003e\nto contain at least one of the following elements:\n  \u003c[[demands, Rails For School Scheduling],\n    Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used]]\u003e\nbut none were found ```\n* [x] Allocations do not work for nested problems, because there is an equality problem. -\u003e Allocations had an inconsistent path.\n```Context of demand for removal should be part demands or used demands, but is not:\nRemoval context is           Database[demands, Rails For School Scheduling, allocations],\ndemands context is          [demands, Rails For School Scheduling] and\nused demands context is Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used].```\n* [ ] Imitate courses to teacher allocation solver from personal master thesis.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1647993681,"metadata":{"github-id":"UCE_lAHOFCNQW84xHWf2ziuAiVg"},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n   - [ ] Use custom initializers for constraint based repair in order to improve results.\n   - [ ] Render performance data in Graph and monitor results,\nin order to get a felling, how much needs to be done and how much effect a single action had.\nDo this by reimplementing the old problem specific initializers.\n(Currently done via https://localhost:8444/net/splitcells/martins/avots/website/test.html)\n- [ ] Compare repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [x] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [x] Remove usage of Node logging interface. -\u003e I removed some Node usage and deprecated the interface instead.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way. -\u003e UiRouter can be used as an alternative Domsole.\n   - [x] Fix XML outpout for Domsole. -\u003e Will fix it, when it is used again or the code is cleaned up during maintenance.\n- [ ] Solve railsForSchoolScheduling.\n   - [ ] Create allocations are completely implausible.\n- [ ] Optimization does not work for second subproblem, because the Components of the removal event does not contain data, that fits to the sub problem's schema.\n   - [ ] Maybe this is caused by wrapped allocations.\n   - [ ] ```java.lang.AssertionError: \nExpecting:\n  \u003c[Database[demands, Rails For School Scheduling, allocations]]\u003e\nto contain at least one of the following elements:\n  \u003c[[demands, Rails For School Scheduling],\n    Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used]]\u003e\nbut none were found ```\n* [x] Allocations do not work for nested problems, because there is an equality problem. -\u003e Allocations had an inconsistent path.\n```Context of demand for removal should be part demands or used demands, but is not:\nRemoval context is           Database[demands, Rails For School Scheduling, allocations],\ndemands context is          [demands, Rails For School Scheduling] and\nused demands context is Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used].```\n\n* [ ] Imitate courses to teacher allocation solver from personal master thesis.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1647993696,"metadata":{"github-id":"UCE_lAHOFCNQW84xHWf2ziuAibU"},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n   - [ ] Use custom initializers for constraint based repair in order to improve results.\n   - [ ] Render performance data in Graph and monitor results,\nin order to get a felling, how much needs to be done and how much effect a single action had.\nDo this by reimplementing the old problem specific initializers.\n(Currently done via https://localhost:8444/net/splitcells/martins/avots/website/test.html)\n- [ ] Compare repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [x] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [x] Remove usage of Node logging interface. -\u003e I removed some Node usage and deprecated the interface instead.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way. -\u003e UiRouter can be used as an alternative Domsole.\n   - [x] Fix XML outpout for Domsole. -\u003e Will fix it, when it is used again or the code is cleaned up during maintenance.\n- [ ] Solve railsForSchoolScheduling.\n   - [ ] Create allocations are completely implausible.\n- [ ] Optimization does not work for second subproblem, because the Components of the removal event does not contain data, that fits to the sub problem's schema.\n   - [ ] Maybe this is caused by wrapped allocations.\n   - [ ] ```java.lang.AssertionError: \nExpecting:\n  \u003c[Database[demands, Rails For School Scheduling, allocations]]\u003e\nto contain at least one of the following elements:\n  \u003c[[demands, Rails For School Scheduling],\n    Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used]]\u003e\nbut none were found ```\n* [x] Allocations do not work for nested problems, because there is an equality problem. -\u003e Allocations had an inconsistent path.\n\n```Context of demand for removal should be part demands or used demands, but is not:\nRemoval context is           Database[demands, Rails For School Scheduling, allocations],\ndemands context is          [demands, Rails For School Scheduling] and\nused demands context is Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used].```\n\n* [ ] Imitate courses to teacher allocation solver from personal master thesis.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1647993705,"metadata":{"github-id":"UCE_lAHOFCNQW84xHWf2ziuAigI"},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n   - [ ] Use custom initializers for constraint based repair in order to improve results.\n   - [ ] Render performance data in Graph and monitor results,\nin order to get a felling, how much needs to be done and how much effect a single action had.\nDo this by reimplementing the old problem specific initializers.\n(Currently done via https://localhost:8444/net/splitcells/martins/avots/website/test.html)\n- [ ] Compare repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [x] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [x] Remove usage of Node logging interface. -\u003e I removed some Node usage and deprecated the interface instead.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way. -\u003e UiRouter can be used as an alternative Domsole.\n   - [x] Fix XML outpout for Domsole. -\u003e Will fix it, when it is used again or the code is cleaned up during maintenance.\n- [ ] Solve railsForSchoolScheduling.\n   - [ ] Create allocations are completely implausible.\n- [ ] Optimization does not work for second subproblem, because the Components of the removal event does not contain data, that fits to the sub problem's schema.\n   - [ ] Maybe this is caused by wrapped allocations.\n   - [ ] ```java.lang.AssertionError: \nExpecting:\n  \u003c[Database[demands, Rails For School Scheduling, allocations]]\u003e\nto contain at least one of the following elements:\n  \u003c[[demands, Rails For School Scheduling],\n    Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used]]\u003e\nbut none were found ```\n* [x] Allocations do not work for nested problems, because there is an equality problem. -\u003e Allocations had an inconsistent path.\n``Context of demand for removal should be part demands or used demands, but is not:\nRemoval context is           Database[demands, Rails For School Scheduling, allocations],\ndemands context is          [demands, Rails For School Scheduling] and\nused demands context is Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used].``\n\n* [ ] Imitate courses to teacher allocation solver from personal master thesis.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1647993714,"metadata":{"github-id":"UCE_lAHOFCNQW84xHWf2ziuAijU"},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n   - [ ] Use custom initializers for constraint based repair in order to improve results.\n   - [ ] Render performance data in Graph and monitor results,\nin order to get a felling, how much needs to be done and how much effect a single action had.\nDo this by reimplementing the old problem specific initializers.\n(Currently done via https://localhost:8444/net/splitcells/martins/avots/website/test.html)\n- [ ] Compare repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [x] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [x] Remove usage of Node logging interface. -\u003e I removed some Node usage and deprecated the interface instead.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way. -\u003e UiRouter can be used as an alternative Domsole.\n   - [x] Fix XML outpout for Domsole. -\u003e Will fix it, when it is used again or the code is cleaned up during maintenance.\n- [ ] Solve railsForSchoolScheduling.\n   - [ ] Create allocations are completely implausible.\n- [ ] Optimization does not work for second subproblem, because the Components of the removal event does not contain data, that fits to the sub problem's schema.\n   - [ ] Maybe this is caused by wrapped allocations.\n   - [ ] ```java.lang.AssertionError: \nExpecting:\n  \u003c[Database[demands, Rails For School Scheduling, allocations]]\u003e\nto contain at least one of the following elements:\n  \u003c[[demands, Rails For School Scheduling],\n    Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used]]\u003e\nbut none were found ```\n* [x] Allocations do not work for nested problems, because there is an equality problem. -\u003e Allocations had an inconsistent path.\n``Context of demand for removal should be part demands or used demands, but is not:\nRemoval context is           Database[demands, Rails For School Scheduling, allocations],\ndemands context is          [demands, Rails For School Scheduling] and\nused demands context is Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used].``\n* [ ] Imitate courses to teacher allocation solver from personal master thesis.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1648156151,"metadata":{"github-id":"UCE_lAHOFCNQW84xHWf2ziub9wk"},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n   - [ ] Use custom initializers for constraint based repair in order to improve results.\n   - [ ] Render performance data in Graph and monitor results,\nin order to get a felling, how much needs to be done and how much effect a single action had.\nDo this by reimplementing the old problem specific initializers.\n(Currently done via https://localhost:8444/net/splitcells/martins/avots/website/test.html)\n- [ ] Compare repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [x] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [x] Remove usage of Node logging interface. -\u003e I removed some Node usage and deprecated the interface instead.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way. -\u003e UiRouter can be used as an alternative Domsole.\n   - [x] Fix XML outpout for Domsole. -\u003e Will fix it, when it is used again or the code is cleaned up during maintenance.\n- [ ] Optimization does not work for second subproblem, because the Components of the removal event does not contain data, that fits to the sub problem's schema.\n   - [ ] Maybe this is caused by wrapped allocations.\n   - [ ] ```java.lang.AssertionError: \nExpecting:\n  \u003c[Database[demands, Rails For School Scheduling, allocations]]\u003e\nto contain at least one of the following elements:\n  \u003c[[demands, Rails For School Scheduling],\n    Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used]]\u003e\nbut none were found ```\n* [x] Allocations do not work for nested problems, because there is an equality problem. -\u003e Allocations had an inconsistent path.\n``Context of demand for removal should be part demands or used demands, but is not:\nRemoval context is           Database[demands, Rails For School Scheduling, allocations],\ndemands context is          [demands, Rails For School Scheduling] and\nused demands context is Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used].``\n* [ ] Imitate courses to teacher allocation solver from personal master thesis.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1648157214,"metadata":{"github-id":"UCE_lAHOFCNQW84xHWf2ziucI4s"},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n   - [ ] Use custom initializers for constraint based repair in order to improve results.\n   - [ ] Render performance data in Graph and monitor results,\nin order to get a felling, how much needs to be done and how much effect a single action had.\nDo this by reimplementing the old problem specific initializers.\n(Currently done via https://localhost:8444/net/splitcells/martins/avots/website/test.html)\n- [ ] Compare repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [x] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [x] Remove usage of Node logging interface. -\u003e I removed some Node usage and deprecated the interface instead.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way. -\u003e UiRouter can be used as an alternative Domsole.\n   - [x] Fix XML outpout for Domsole. -\u003e Will fix it, when it is used again or the code is cleaned up during maintenance.\n- [ ] Optimization does not work for second subproblem, because the Components of the removal event does not contain data, that fits to the sub problem's schema.\n   - [ ] Maybe this is caused by wrapped allocations.\n   - [ ] ```java.lang.AssertionError: \nExpecting:\n  \u003c[Database[demands, Rails For School Scheduling, allocations]]\u003e\nto contain at least one of the following elements:\n  \u003c[[demands, Rails For School Scheduling],\n    Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used]]\u003e\nbut none were found ```\n* [x] Allocations do not work for nested problems, because there is an equality problem. -\u003e Allocations had an inconsistent path.\n``Context of demand for removal should be part demands or used demands, but is not:\nRemoval context is           Database[demands, Rails For School Scheduling, allocations],\ndemands context is          [demands, Rails For School Scheduling] and\nused demands context is Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used].``\n* [ ] Imitate courses to teacher allocation solver from personal master thesis.\n   * [ ] Only grouping by course is important.\n   * [ ] Determine not allocated courses and their not used demands.\n   * [ ] Determine defying groups and their not used and used demands.\n   * [ ] Determine a representative allocation of defying groups and undo all allocations of defying groups.\n   * [ ] Use free demands of the representative for the repair of each defying group.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1648163474,"metadata":{"github-id":"UCE_lAHOFCNQW84xHWf2ziudAz4"},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n   - [ ] Use custom initializers for constraint based repair in order to improve results.\n   - [ ] Render performance data in Graph and monitor results,\nin order to get a felling, how much needs to be done and how much effect a single action had.\nDo this by reimplementing the old problem specific initializers.\n(Currently done via https://localhost:8444/net/splitcells/martins/avots/website/test.html)\n- [ ] Compare repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [x] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [x] Remove usage of Node logging interface. -\u003e I removed some Node usage and deprecated the interface instead.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way. -\u003e UiRouter can be used as an alternative Domsole.\n   - [x] Fix XML outpout for Domsole. -\u003e Will fix it, when it is used again or the code is cleaned up during maintenance.\n- [ ] Optimization does not work for second subproblem, because the Components of the removal event does not contain data, that fits to the sub problem's schema.\n   - [ ] Maybe this is caused by wrapped allocations.\n   - [ ] ```java.lang.AssertionError: \nExpecting:\n  \u003c[Database[demands, Rails For School Scheduling, allocations]]\u003e\nto contain at least one of the following elements:\n  \u003c[[demands, Rails For School Scheduling],\n    Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used]]\u003e\nbut none were found ```\n* [x] Allocations do not work for nested problems, because there is an equality problem. -\u003e Allocations had an inconsistent path.\n``Context of demand for removal should be part demands or used demands, but is not:\nRemoval context is           Database[demands, Rails For School Scheduling, allocations],\ndemands context is          [demands, Rails For School Scheduling] and\nused demands context is Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used].``\n* [ ] Imitate courses to teacher allocation solver from personal master thesis.\n   * [x] Only grouping by course is important.\n   * [ ] Determine not allocated courses and their not used demands.\n   * [ ] Determine defying groups and their not used and used demands.\n   * [ ] Determine a representative allocation of defying groups and undo all allocations of defying groups.\n   * [ ] Use free demands of the representative for the repair of each defying group.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1648668950,"metadata":{"github-id":"UCE_lAHOFCNQW84xHWf2zivfo7k"},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n   - [ ] Use custom initializers for constraint based repair in order to improve results.\n   - [ ] Render performance data in Graph and monitor results,\nin order to get a felling, how much needs to be done and how much effect a single action had.\nDo this by reimplementing the old problem specific initializers.\n(Currently done via https://localhost:8444/net/splitcells/martins/avots/website/test.html)\n- [ ] Compare repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [x] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [x] Remove usage of Node logging interface. -\u003e I removed some Node usage and deprecated the interface instead.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way. -\u003e UiRouter can be used as an alternative Domsole.\n   - [x] Fix XML outpout for Domsole. -\u003e Will fix it, when it is used again or the code is cleaned up during maintenance.\n- [ ] Optimization does not work for second subproblem, because the Components of the removal event does not contain data, that fits to the sub problem's schema.\n   - [ ] Maybe this is caused by wrapped allocations.\n   - [ ] ```java.lang.AssertionError: \nExpecting:\n  \u003c[Database[demands, Rails For School Scheduling, allocations]]\u003e\nto contain at least one of the following elements:\n  \u003c[[demands, Rails For School Scheduling],\n    Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used]]\u003e\nbut none were found ```\n* [x] Allocations do not work for nested problems, because there is an equality problem. -\u003e Allocations had an inconsistent path.\n``Context of demand for removal should be part demands or used demands, but is not:\nRemoval context is           Database[demands, Rails For School Scheduling, allocations],\ndemands context is          [demands, Rails For School Scheduling] and\nused demands context is Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used].``\n* [ ] Imitate courses to teacher allocation solver from personal master thesis.\n   * [x] Only grouping by course is important.\n   * [ ] Determine not allocated courses and their not used demands.\n   * [ ] Determine defying groups and their not used and used demands.\n   * [ ] Determine a representative allocation of defying groups and undo all allocations of defying groups.\n   * [ ] Use free demands of the representative for the repair of each defying group.\n   * [ ] Consider course's vintage in suplly selector.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1648680517,"metadata":{"github-id":"UCE_lAHOFCNQW84xHWf2zivhe8o"},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n   - [ ] Use custom initializers for constraint based repair in order to improve results.\n   - [ ] Render performance data in Graph and monitor results,\nin order to get a felling, how much needs to be done and how much effect a single action had.\nDo this by reimplementing the old problem specific initializers.\n(Currently done via https://localhost:8444/net/splitcells/martins/avots/website/test.html)\n- [ ] Compare repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [x] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [x] Remove usage of Node logging interface. -\u003e I removed some Node usage and deprecated the interface instead.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way. -\u003e UiRouter can be used as an alternative Domsole.\n   - [x] Fix XML outpout for Domsole. -\u003e Will fix it, when it is used again or the code is cleaned up during maintenance.\n- [ ] Optimization does not work for second subproblem, because the Components of the removal event does not contain data, that fits to the sub problem's schema.\n   - [ ] Maybe this is caused by wrapped allocations.\n   - [ ] ```java.lang.AssertionError: \nExpecting:\n  \u003c[Database[demands, Rails For School Scheduling, allocations]]\u003e\nto contain at least one of the following elements:\n  \u003c[[demands, Rails For School Scheduling],\n    Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used]]\u003e\nbut none were found ```\n* [x] Allocations do not work for nested problems, because there is an equality problem. -\u003e Allocations had an inconsistent path.\n``Context of demand for removal should be part demands or used demands, but is not:\nRemoval context is           Database[demands, Rails For School Scheduling, allocations],\ndemands context is          [demands, Rails For School Scheduling] and\nused demands context is Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used].``\n* [ ] Imitate courses to teacher allocation solver from personal master thesis.\n   * [x] Only grouping by course is important.\n   * [ ] Determine not allocated courses and their not used demands.\n   * [ ] Determine defying groups and their not used and used demands.\n   * [ ] Determine a representative allocation of defying groups and undo all allocations of defying groups.\n   * [ ] Use free demands of the representative for the repair of each defying group.\n   * [ ] Consider course's vintage in suplly selector.\n* [ ] Consider constraint query system for tables.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1648680675,"metadata":{"github-id":"UCE_lAHOFCNQW84xHWf2zivhgDM"},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n   - [ ] Use custom initializers for constraint based repair in order to improve results.\n   - [ ] Render performance data in Graph and monitor results,\nin order to get a felling, how much needs to be done and how much effect a single action had.\nDo this by reimplementing the old problem specific initializers.\n(Currently done via https://localhost:8444/net/splitcells/martins/avots/website/test.html)\n- [ ] Compare repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [x] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [x] Remove usage of Node logging interface. -\u003e I removed some Node usage and deprecated the interface instead.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way. -\u003e UiRouter can be used as an alternative Domsole.\n   - [x] Fix XML outpout for Domsole. -\u003e Will fix it, when it is used again or the code is cleaned up during maintenance.\n- [ ] Optimization does not work for second subproblem, because the Components of the removal event does not contain data, that fits to the sub problem's schema.\n   - [ ] Maybe this is caused by wrapped allocations.\n   - [ ] ```java.lang.AssertionError: \nExpecting:\n  \u003c[Database[demands, Rails For School Scheduling, allocations]]\u003e\nto contain at least one of the following elements:\n  \u003c[[demands, Rails For School Scheduling],\n    Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used]]\u003e\nbut none were found ```\n* [x] Allocations do not work for nested problems, because there is an equality problem. -\u003e Allocations had an inconsistent path.\n``Context of demand for removal should be part demands or used demands, but is not:\nRemoval context is           Database[demands, Rails For School Scheduling, allocations],\ndemands context is          [demands, Rails For School Scheduling] and\nused demands context is Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used].``\n* [ ] Imitate courses to teacher allocation solver from personal master thesis.\n   * [x] Only grouping by course is important.\n   * [ ] Determine not allocated courses and their not used demands.\n   * [ ] Determine defying groups and their not used and used demands.\n   * [ ] Determine a representative allocation of defying groups and undo all allocations of defying groups.\n   * [ ] Use free demands of the representative for the repair of each defying group.\n   * [ ] Consider course's vintage in supply selector.\n* [ ] Consider constraint query system for tables. Online optimization would be needed for that.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1648680809,"metadata":{"github-id":"UCE_lAHOFCNQW84xHWf2zivhhHw"},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n   - [ ] Use custom initializers for constraint based repair in order to improve results.\n   - [ ] Render performance data in Graph and monitor results,\nin order to get a felling, how much needs to be done and how much effect a single action had.\nDo this by reimplementing the old problem specific initializers.\n(Currently done via https://localhost:8444/net/splitcells/martins/avots/website/test.html)\n- [ ] Compare repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [x] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [x] Remove usage of Node logging interface. -\u003e I removed some Node usage and deprecated the interface instead.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way. -\u003e UiRouter can be used as an alternative Domsole.\n   - [x] Fix XML outpout for Domsole. -\u003e Will fix it, when it is used again or the code is cleaned up during maintenance.\n- [ ] Optimization does not work for second subproblem, because the Components of the removal event does not contain data, that fits to the sub problem's schema.\n   - [ ] Maybe this is caused by wrapped allocations.\n   - [ ] ```java.lang.AssertionError: \nExpecting:\n  \u003c[Database[demands, Rails For School Scheduling, allocations]]\u003e\nto contain at least one of the following elements:\n  \u003c[[demands, Rails For School Scheduling],\n    Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used]]\u003e\nbut none were found ```\n* [x] Allocations do not work for nested problems, because there is an equality problem. -\u003e Allocations had an inconsistent path.\n``Context of demand for removal should be part demands or used demands, but is not:\nRemoval context is           Database[demands, Rails For School Scheduling, allocations],\ndemands context is          [demands, Rails For School Scheduling] and\nused demands context is Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used].``\n* [ ] Imitate courses to teacher allocation solver from personal master thesis.\n   * [x] Only grouping by course is important.\n   * [ ] Determine not allocated courses and their not used demands.\n   * [ ] Determine defying groups and their not used and used demands.\n   * [ ] Determine a representative allocation of defying groups and undo all allocations of defying groups.\n   * [ ] Use free demands of the representative for the repair of each defying group.\n   * [ ] Consider course's vintage in supply selector.\n* [ ] Implement constraint query system for tables and use it in constraint based repair.. Online optimization would be needed for that.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1649894400,"metadata":{"github-id":"UCE_lAHOFCNQW84xHWf2ziyJNYc"},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n   - [ ] Use custom initializers for constraint based repair in order to improve results.\n   - [ ] Render performance data in Graph and monitor results,\nin order to get a felling, how much needs to be done and how much effect a single action had.\nDo this by reimplementing the old problem specific initializers.\n(Currently done via https://localhost:8444/net/splitcells/martins/avots/website/test.html)\n- [ ] Compare repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [x] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [x] Remove usage of Node logging interface. -\u003e I removed some Node usage and deprecated the interface instead.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way. -\u003e UiRouter can be used as an alternative Domsole.\n   - [x] Fix XML outpout for Domsole. -\u003e Will fix it, when it is used again or the code is cleaned up during maintenance.\n- [ ] Optimization does not work for second subproblem, because the Components of the removal event does not contain data, that fits to the sub problem's schema.\n   - [ ] Maybe this is caused by wrapped allocations.\n   - [ ] ```java.lang.AssertionError: \nExpecting:\n  \u003c[Database[demands, Rails For School Scheduling, allocations]]\u003e\nto contain at least one of the following elements:\n  \u003c[[demands, Rails For School Scheduling],\n    Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used]]\u003e\nbut none were found ```\n* [x] Allocations do not work for nested problems, because there is an equality problem. -\u003e Allocations had an inconsistent path.\n``Context of demand for removal should be part demands or used demands, but is not:\nRemoval context is           Database[demands, Rails For School Scheduling, allocations],\ndemands context is          [demands, Rails For School Scheduling] and\nused demands context is Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used].``\n* [ ] Imitate courses to teacher allocation solver from personal master thesis.\n   * [x] Only grouping by course is important.\n   * [ ] Determine not allocated courses and their not used demands.\n   * [ ] Determine defying groups and their not used and used demands.\n   * [ ] Determine a representative allocation of defying groups and undo all allocations of defying groups.\n   * [ ] Use free demands of the representative for the repair of each defying group.\n   * [ ] Consider course's vintage in supply selector.\n* [ ] Implement constraint query system for tables and use it in constraint based repair.. Online optimization would be needed for that.\n* [ ] Improve analysis by making it more table like.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1649894495,"metadata":{"github-id":"UCE_lAHOFCNQW84xHWf2ziyJON4"},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n   - [ ] Use custom initializers for constraint based repair in order to improve results.\n   - [ ] Render performance data in Graph and monitor results,\nin order to get a felling, how much needs to be done and how much effect a single action had.\nDo this by reimplementing the old problem specific initializers.\n(Currently done via https://localhost:8444/net/splitcells/martins/avots/website/test.html)\n- [ ] Compare repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [x] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [x] Remove usage of Node logging interface. -\u003e I removed some Node usage and deprecated the interface instead.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way. -\u003e UiRouter can be used as an alternative Domsole.\n   - [x] Fix XML outpout for Domsole. -\u003e Will fix it, when it is used again or the code is cleaned up during maintenance.\n- [ ] Optimization does not work for second subproblem, because the Components of the removal event does not contain data, that fits to the sub problem's schema.\n   - [ ] Maybe this is caused by wrapped allocations.\n   - [ ] ```java.lang.AssertionError: \nExpecting:\n  \u003c[Database[demands, Rails For School Scheduling, allocations]]\u003e\nto contain at least one of the following elements:\n  \u003c[[demands, Rails For School Scheduling],\n    Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used]]\u003e\nbut none were found ```\n* [x] Allocations do not work for nested problems, because there is an equality problem. -\u003e Allocations had an inconsistent path.\n``Context of demand for removal should be part demands or used demands, but is not:\nRemoval context is           Database[demands, Rails For School Scheduling, allocations],\ndemands context is          [demands, Rails For School Scheduling] and\nused demands context is Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used].``\n* [ ] Imitate courses to teacher allocation solver from personal master thesis.\n   * [x] Only grouping by course is important.\n   * [ ] Determine not allocated courses and their not used demands.\n   * [ ] Determine defying groups and their not used and used demands.\n   * [ ] Determine a representative allocation of defying groups and undo all allocations of defying groups.\n   * [ ] Use free demands of the representative for the repair of each defying group.\n   * [ ] Consider course's vintage in supply selector.\n* [ ] Implement constraint query system for tables and use it in constraint based repair.. Online optimization would be needed for that.\n* [ ] Improve analysis by making it more table like and create guidlines for table (searchability and simplicity) versus tree (organization).","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1649894834,"metadata":{"github-id":"UCE_lAHOFCNQW84xHWf2ziyJQ3U"},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n   - [ ] Use custom initializers for constraint based repair in order to improve results.\n   - [ ] Render performance data in Graph and monitor results,\nin order to get a felling, how much needs to be done and how much effect a single action had.\nDo this by reimplementing the old problem specific initializers.\n(Currently done via https://localhost:8444/net/splitcells/martins/avots/website/test.html)\n- [ ] Compare repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [x] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [x] Remove usage of Node logging interface. -\u003e I removed some Node usage and deprecated the interface instead.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way. -\u003e UiRouter can be used as an alternative Domsole.\n   - [x] Fix XML outpout for Domsole. -\u003e Will fix it, when it is used again or the code is cleaned up during maintenance.\n- [ ] Optimization does not work for second subproblem, because the Components of the removal event does not contain data, that fits to the sub problem's schema.\n   - [ ] Maybe this is caused by wrapped allocations.\n   - [ ] ```java.lang.AssertionError: \nExpecting:\n  \u003c[Database[demands, Rails For School Scheduling, allocations]]\u003e\nto contain at least one of the following elements:\n  \u003c[[demands, Rails For School Scheduling],\n    Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used]]\u003e\nbut none were found ```\n* [x] Allocations do not work for nested problems, because there is an equality problem. -\u003e Allocations had an inconsistent path.\n``Context of demand for removal should be part demands or used demands, but is not:\nRemoval context is           Database[demands, Rails For School Scheduling, allocations],\ndemands context is          [demands, Rails For School Scheduling] and\nused demands context is Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used].``\n* [ ] Imitate courses to teacher allocation solver from personal master thesis.\n   * [x] Only grouping by course is important.\n   * [x] Determine not allocated courses and their not used demands.\n   * [ ] Determine defying groups and their not used and used demands.\n   * [ ] Determine a representative allocation of defying groups and undo all allocations of defying groups.\n   * [x] Use free demands of the representative for the repair of each defying group.\n   * [ ] Randomize each repair step.\n   * [ ] Select only suitable teachers.\n* [ ] Implement constraint query system for tables and use it in constraint based repair.. Online optimization would be needed for that.\n* [ ] Improve analysis by making it more table like and create guidlines for table (searchability and simplicity) versus tree (organization).","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1652125118,"metadata":{"github-id":"UCE_lAHOFCNQW84xHWf2zi2r3Ak"},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n   - [ ] Use custom initializers for constraint based repair in order to improve results.\n   - [ ] Render performance data in Graph and monitor results,\nin order to get a felling, how much needs to be done and how much effect a single action had.\nDo this by reimplementing the old problem specific initializers.\n(Currently done via https://localhost:8444/net/splitcells/martins/avots/website/test.html)\n- [ ] Compare repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [x] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [x] Remove usage of Node logging interface. -\u003e I removed some Node usage and deprecated the interface instead.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way. -\u003e UiRouter can be used as an alternative Domsole.\n   - [x] Fix XML outpout for Domsole. -\u003e Will fix it, when it is used again or the code is cleaned up during maintenance.\n- [ ] Optimization does not work for second subproblem, because the Components of the removal event does not contain data, that fits to the sub problem's schema.\n   - [ ] Maybe this is caused by wrapped allocations.\n   - [ ] ```java.lang.AssertionError: \nExpecting:\n  \u003c[Database[demands, Rails For School Scheduling, allocations]]\u003e\nto contain at least one of the following elements:\n  \u003c[[demands, Rails For School Scheduling],\n    Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used]]\u003e\nbut none were found ```\n* [x] Allocations do not work for nested problems, because there is an equality problem. -\u003e Allocations had an inconsistent path.\n``Context of demand for removal should be part demands or used demands, but is not:\nRemoval context is           Database[demands, Rails For School Scheduling, allocations],\ndemands context is          [demands, Rails For School Scheduling] and\nused demands context is Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used].``\n* [ ] Imitate courses to teacher allocation solver from personal master thesis.\n   * [x] Only grouping by course is important.\n   * [x] Determine not allocated courses and their not used demands.\n   * [ ] Determine defying groups and their not used and used demands.\n   * [ ] Determine a representative allocation of defying groups and undo all allocations of defying groups.\n   * [x] Use free demands of the representative for the repair of each defying group.\n   * [ ] Randomize each repair step.\n   * [ ] Select only suitable teachers.\n* [ ] Implement constraint query system for tables and use it in constraint based repair.. Online optimization would be needed for that.\n* [ ] Improve analysis by making it more table like and create guidlines for table (searchability and simplicity) versus tree (organization).\n* [ ] Add temporary storage project to private website.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1652125529,"metadata":{"github-id":"UCE_lAHOFCNQW84xHWf2zi2r8To"},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n   - [ ] Use custom initializers for constraint based repair in order to improve results.\n   - [ ] Render performance data in Graph and monitor results,\nin order to get a felling, how much needs to be done and how much effect a single action had.\nDo this by reimplementing the old problem specific initializers.\n(Currently done via https://localhost:8444/net/splitcells/martins/avots/website/test.html)\n- [ ] Compare repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [x] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [x] Remove usage of Node logging interface. -\u003e I removed some Node usage and deprecated the interface instead.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way. -\u003e UiRouter can be used as an alternative Domsole.\n   - [x] Fix XML outpout for Domsole. -\u003e Will fix it, when it is used again or the code is cleaned up during maintenance.\n- [ ] Optimization does not work for second subproblem, because the Components of the removal event does not contain data, that fits to the sub problem's schema.\n   - [ ] Maybe this is caused by wrapped allocations.\n   - [ ] ```java.lang.AssertionError: \nExpecting:\n  \u003c[Database[demands, Rails For School Scheduling, allocations]]\u003e\nto contain at least one of the following elements:\n  \u003c[[demands, Rails For School Scheduling],\n    Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used]]\u003e\nbut none were found ```\n* [x] Allocations do not work for nested problems, because there is an equality problem. -\u003e Allocations had an inconsistent path.\n``Context of demand for removal should be part demands or used demands, but is not:\nRemoval context is           Database[demands, Rails For School Scheduling, allocations],\ndemands context is          [demands, Rails For School Scheduling] and\nused demands context is Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used].``\n* [ ] Imitate railed courses to teacher allocation solver from personal master thesis.\n   * [x] Only grouping by course is important.\n   * [x] Determine not allocated courses and their not used demands.\n   * [ ] Determine defying groups and their not used and used demands.\n   * [ ] Determine a representative allocation of defying groups and undo all allocations of defying groups.\n   * [x] Use free demands of the representative for the repair of each defying group.\n   * [ ] Randomize each repair step.\n   * [ ] Select only suitable teachers.\n* [ ] Implement constraint query system for tables and use it in constraint based repair.. Online optimization would be needed for that.\n* [ ] Improve analysis by making it more table like and create guidlines for table (searchability and simplicity) versus tree (organization).\n* [ ] Add temporary storage project to private website.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1652133616,"metadata":{"github-id":"UCE_lAHOFCNQW84xHWf2zi2tafw"},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n   - [ ] Use custom initializers for constraint based repair in order to improve results.\n   - [ ] Render performance data in Graph and monitor results,\nin order to get a felling, how much needs to be done and how much effect a single action had.\nDo this by reimplementing the old problem specific initializers.\n(Currently done via https://localhost:8444/net/splitcells/martins/avots/website/test.html)\n- [ ] Compare repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [x] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [x] Remove usage of Node logging interface. -\u003e I removed some Node usage and deprecated the interface instead.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way. -\u003e UiRouter can be used as an alternative Domsole.\n   - [x] Fix XML outpout for Domsole. -\u003e Will fix it, when it is used again or the code is cleaned up during maintenance.\n- [ ] Optimization does not work for second subproblem, because the Components of the removal event does not contain data, that fits to the sub problem's schema.\n   - [ ] Maybe this is caused by wrapped allocations.\n   - [ ] ```java.lang.AssertionError: \nExpecting:\n  \u003c[Database[demands, Rails For School Scheduling, allocations]]\u003e\nto contain at least one of the following elements:\n  \u003c[[demands, Rails For School Scheduling],\n    Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used]]\u003e\nbut none were found ```\n* [x] Allocations do not work for nested problems, because there is an equality problem. -\u003e Allocations had an inconsistent path.\n``Context of demand for removal should be part demands or used demands, but is not:\nRemoval context is           Database[demands, Rails For School Scheduling, allocations],\ndemands context is          [demands, Rails For School Scheduling] and\nused demands context is Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used].``\n* [ ] Imitate railed courses to teacher allocation solver from personal master thesis.\n   * [x] Only grouping by course is important.\n   * [x] Determine not allocated courses and their not used demands.\n   * [ ] Determine defying groups and their not used and used demands.\n   * [ ] Determine a representative allocation of defying groups and undo all allocations of defying groups.\n   * [x] Use free demands of the representative for the repair of each defying group.\n   * [x] Randomize each repair step.\n   * [ ] Select only suitable teachers.\n* [ ] Implement constraint query system for tables and use it in constraint based repair.. Online optimization would be needed for that.\n* [ ] Improve analysis by making it more table like and create guidlines for table (searchability and simplicity) versus tree (organization).\n* [ ] Add temporary storage project to private website.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1652313594,"metadata":{"github-id":"UCE_lAHOFCNQW84xHWf2zi3Oi_4"},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n   - [ ] Use custom initializers for constraint based repair in order to improve results.\n   - [ ] Render performance data in Graph and monitor results,\nin order to get a felling, how much needs to be done and how much effect a single action had.\nDo this by reimplementing the old problem specific initializers.\n(Currently done via https://localhost:8444/net/splitcells/martins/avots/website/test.html)\n- [ ] Compare repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [x] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [x] Remove usage of Node logging interface. -\u003e I removed some Node usage and deprecated the interface instead.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way. -\u003e UiRouter can be used as an alternative Domsole.\n   - [x] Fix XML outpout for Domsole. -\u003e Will fix it, when it is used again or the code is cleaned up during maintenance.\n- [ ] Optimization does not work for second subproblem, because the Components of the removal event does not contain data, that fits to the sub problem's schema.\n   - [ ] Maybe this is caused by wrapped allocations.\n   - [ ] ```java.lang.AssertionError: \nExpecting:\n  \u003c[Database[demands, Rails For School Scheduling, allocations]]\u003e\nto contain at least one of the following elements:\n  \u003c[[demands, Rails For School Scheduling],\n    Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used]]\u003e\nbut none were found ```\n* [x] Allocations do not work for nested problems, because there is an equality problem. -\u003e Allocations had an inconsistent path.\n``Context of demand for removal should be part demands or used demands, but is not:\nRemoval context is           Database[demands, Rails For School Scheduling, allocations],\ndemands context is          [demands, Rails For School Scheduling] and\nused demands context is Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used].``\n* [ ] Imitate railed courses to teacher allocation solver from personal master thesis.\n   * [x] Only grouping by course is important.\n   * [x] Determine not allocated courses and their not used demands.\n   * [ ] Determine defying groups and their not used and used demands.\n   * [ ] Determine a representative allocation of defying groups and undo all allocations of defying groups.\n   * [x] Use free demands of the representative for the repair of each defying group.\n   * [x] Randomize each repair step.\n   * [ ] Select only suitable teachers.\n   * [ ] Repair all incorrect values and not just some.\n* [ ] Implement constraint query system for tables and use it in constraint based repair.. Online optimization would be needed for that.\n* [ ] Improve analysis by making it more table like and create guidlines for table (searchability and simplicity) versus tree (organization).\n* [ ] Add temporary storage project to private website.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1652313699,"metadata":{"github-id":"UCE_lAHOFCNQW84xHWf2zi3Oj8Q"},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n   - [ ] Use custom initializers for constraint based repair in order to improve results.\n   - [ ] Render performance data in Graph and monitor results,\nin order to get a felling, how much needs to be done and how much effect a single action had.\nDo this by reimplementing the old problem specific initializers.\n(Currently done via https://localhost:8444/net/splitcells/martins/avots/website/test.html)\n- [ ] Compare repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [x] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [x] Remove usage of Node logging interface. -\u003e I removed some Node usage and deprecated the interface instead.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way. -\u003e UiRouter can be used as an alternative Domsole.\n   - [x] Fix XML outpout for Domsole. -\u003e Will fix it, when it is used again or the code is cleaned up during maintenance.\n- [ ] Optimization does not work for second subproblem, because the Components of the removal event does not contain data, that fits to the sub problem's schema.\n   - [ ] Maybe this is caused by wrapped allocations.\n   - [ ] ```java.lang.AssertionError: \nExpecting:\n  \u003c[Database[demands, Rails For School Scheduling, allocations]]\u003e\nto contain at least one of the following elements:\n  \u003c[[demands, Rails For School Scheduling],\n    Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used]]\u003e\nbut none were found ```\n* [x] Allocations do not work for nested problems, because there is an equality problem. -\u003e Allocations had an inconsistent path.\n``Context of demand for removal should be part demands or used demands, but is not:\nRemoval context is           Database[demands, Rails For School Scheduling, allocations],\ndemands context is          [demands, Rails For School Scheduling] and\nused demands context is Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used].``\n* [ ] Imitate railed courses to teacher allocation solver from personal master thesis.\n   * [x] Only grouping by course is important.\n   * [x] Determine not allocated courses and their not used demands.\n   * [ ] Determine defying groups and their not used and used demands.\n   * [ ] Determine a representative allocation of defying groups and undo all allocations of defying groups.\n   * [x] Use free demands of the representative for the repair of each defying group.\n   * [x] Randomize each repair step.\n   * [ ] Select only suitable teachers.\n   * [ ] Repair all incorrect values and not just some by repair any constraint error and by always converting all groupings to groupings by course id.\n* [ ] Implement constraint query system for tables and use it in constraint based repair. Online optimization would be needed for that.\n* [ ] Improve analysis by making it more table like and create guidlines for table (searchability and simplicity) versus tree (organization).\n* [ ] Add temporary storage project to private website.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1652313825,"metadata":{"github-id":"UCE_lAHOFCNQW84xHWf2zi3Ok8I"},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n   - [ ] Use custom initializers for constraint based repair in order to improve results.\n   - [ ] Render performance data in Graph and monitor results,\nin order to get a felling, how much needs to be done and how much effect a single action had.\nDo this by reimplementing the old problem specific initializers.\n(Currently done via https://localhost:8444/net/splitcells/martins/avots/website/test.html)\n- [ ] Compare repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [x] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [x] Remove usage of Node logging interface. -\u003e I removed some Node usage and deprecated the interface instead.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way. -\u003e UiRouter can be used as an alternative Domsole.\n   - [x] Fix XML outpout for Domsole. -\u003e Will fix it, when it is used again or the code is cleaned up during maintenance.\n- [ ] Optimization does not work for second subproblem, because the Components of the removal event does not contain data, that fits to the sub problem's schema.\n   - [ ] Maybe this is caused by wrapped allocations.\n   - [ ] ```java.lang.AssertionError: \nExpecting:\n  \u003c[Database[demands, Rails For School Scheduling, allocations]]\u003e\nto contain at least one of the following elements:\n  \u003c[[demands, Rails For School Scheduling],\n    Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used]]\u003e\nbut none were found ```\n* [x] Allocations do not work for nested problems, because there is an equality problem. -\u003e Allocations had an inconsistent path.\n``Context of demand for removal should be part demands or used demands, but is not:\nRemoval context is           Database[demands, Rails For School Scheduling, allocations],\ndemands context is          [demands, Rails For School Scheduling] and\nused demands context is Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used].``\n* [ ] Imitate railed courses to teacher allocation solver from personal master thesis.\n   * [x] Only grouping by course is important.\n   * [x] Determine not allocated courses and their not used demands.\n   * [ ] Determine defying groups and their not used and used demands.\n   * [ ] Determine a representative allocation of defying groups and undo all allocations of defying groups.\n   * [x] Use free demands of the representative for the repair of each defying group.\n   * [x] Randomize each repair step.\n   * [ ] Select only suitable teachers.\n   * [ ] Repair all incorrect values and not just some by repair any constraint error and by always converting all groupings to groupings by course id.\n   * [ ] Deallocate all lines with a course id, that has an error, during each repair iteration step.\n* [ ] Implement constraint query system for tables and use it in constraint based repair. Online optimization would be needed for that.\n* [ ] Improve analysis by making it more table like and create guidlines for table (searchability and simplicity) versus tree (organization).\n* [ ] Add temporary storage project to private website.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1652313910,"metadata":{"github-id":"UCE_lAHOFCNQW84xHWf2zi3OluU"},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n   - [ ] Use custom initializers for constraint based repair in order to improve results.\n   - [ ] Render performance data in Graph and monitor results,\nin order to get a felling, how much needs to be done and how much effect a single action had.\nDo this by reimplementing the old problem specific initializers.\n(Currently done via https://localhost:8444/net/splitcells/martins/avots/website/test.html)\n- [ ] Compare repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [x] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [x] Remove usage of Node logging interface. -\u003e I removed some Node usage and deprecated the interface instead.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way. -\u003e UiRouter can be used as an alternative Domsole.\n   - [x] Fix XML outpout for Domsole. -\u003e Will fix it, when it is used again or the code is cleaned up during maintenance.\n- [ ] Optimization does not work for second subproblem, because the Components of the removal event does not contain data, that fits to the sub problem's schema.\n   - [ ] Maybe this is caused by wrapped allocations.\n   - [ ] ```java.lang.AssertionError: \nExpecting:\n  \u003c[Database[demands, Rails For School Scheduling, allocations]]\u003e\nto contain at least one of the following elements:\n  \u003c[[demands, Rails For School Scheduling],\n    Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used]]\u003e\nbut none were found ```\n* [x] Allocations do not work for nested problems, because there is an equality problem. -\u003e Allocations had an inconsistent path.\n``Context of demand for removal should be part demands or used demands, but is not:\nRemoval context is           Database[demands, Rails For School Scheduling, allocations],\ndemands context is          [demands, Rails For School Scheduling] and\nused demands context is Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used].``\n* [ ] Imitate railed courses to teacher allocation solver from personal master thesis.\n   * [x] Only grouping by course is important.\n   * [x] Determine not allocated courses and their not used demands.\n   * [ ] Determine defying groups and their not used and used demands.\n   * [ ] Determine a representative allocation of defying groups and undo all allocations of defying groups.\n   * [x] Use free demands of the representative for the repair of each defying group.\n   * [x] Randomize each repair step.\n   * [ ] Select only suitable teachers.\n   * [ ] Repair all incorrect values and not just some by repair any constraint error and by always converting all groupings to groupings by course id.\n   * [ ] Deallocate all lines with a course id, that has an error, during each repair iteration step.\n   * [ ] Optionally deallocate all lines with a subject, that has an error, during each repair iteration step.\n* [ ] Implement constraint query system for tables and use it in constraint based repair. Online optimization would be needed for that.\n* [ ] Improve analysis by making it more table like and create guidlines for table (searchability and simplicity) versus tree (organization).\n* [ ] Add temporary storage project to private website.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1653566994,"metadata":{"github-id":"UCE_lAHOFCNQW84xHWf2zi6L7z0"},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n   - [ ] Use custom initializers for constraint based repair in order to improve results.\n   - [ ] Render performance data in Graph and monitor results,\nin order to get a felling, how much needs to be done and how much effect a single action had.\nDo this by reimplementing the old problem specific initializers.\n(Currently done via https://localhost:8444/net/splitcells/martins/avots/website/test.html)\n- [ ] Compare repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [x] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [x] Remove usage of Node logging interface. -\u003e I removed some Node usage and deprecated the interface instead.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way. -\u003e UiRouter can be used as an alternative Domsole.\n   - [x] Fix XML outpout for Domsole. -\u003e Will fix it, when it is used again or the code is cleaned up during maintenance.\n- [ ] Optimization does not work for second subproblem, because the Components of the removal event does not contain data, that fits to the sub problem's schema.\n   - [ ] Maybe this is caused by wrapped allocations.\n   - [ ] ```java.lang.AssertionError: \nExpecting:\n  \u003c[Database[demands, Rails For School Scheduling, allocations]]\u003e\nto contain at least one of the following elements:\n  \u003c[[demands, Rails For School Scheduling],\n    Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used]]\u003e\nbut none were found ```\n* [x] Allocations do not work for nested problems, because there is an equality problem. -\u003e Allocations had an inconsistent path.\n``Context of demand for removal should be part demands or used demands, but is not:\nRemoval context is           Database[demands, Rails For School Scheduling, allocations],\ndemands context is          [demands, Rails For School Scheduling] and\nused demands context is Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used].``\n* [ ] Imitate railed courses to teacher allocation solver from personal master thesis.\n   * [x] Only grouping by course is important.\n   * [x] Determine not allocated courses and their not used demands.\n   * [ ] Determine defying groups and their not used and used demands.\n   * [ ] Determine a representative allocation of defying groups and undo all allocations of defying groups.\n   * [x] Use free demands of the representative for the repair of each defying group.\n   * [x] Randomize each repair step.\n   * [ ] Select only suitable teachers.\n   * [ ] Repair all incorrect values and not just some by repair any constraint error and by always converting all groupings to groupings by course id.\n   * [ ] Deallocate all lines with a course id, that has an error, during each repair iteration step.\n   * [ ] Optionally deallocate all lines with a subject, that has an error, during each repair iteration step.\n   * [ ] Use unused demands.\n* [ ] Implement constraint query system for tables and use it in constraint based repair. Online optimization would be needed for that.\n* [ ] Improve analysis by making it more table like and create guidlines for table (searchability and simplicity) versus tree (organization).\n* [ ] Add temporary storage project to private website.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1653649135,"metadata":{"github-id":"UCE_lAHOFCNQW84xHWf2zi6YaDU"},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n   - [ ] Use custom initializers for constraint based repair in order to improve results.\n   - [ ] Render performance data in Graph and monitor results,\nin order to get a felling, how much needs to be done and how much effect a single action had.\nDo this by reimplementing the old problem specific initializers.\n(Currently done via https://localhost:8444/net/splitcells/martins/avots/website/test.html)\n- [ ] Compare repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [x] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [x] Remove usage of Node logging interface. -\u003e I removed some Node usage and deprecated the interface instead.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way. -\u003e UiRouter can be used as an alternative Domsole.\n   - [x] Fix XML outpout for Domsole. -\u003e Will fix it, when it is used again or the code is cleaned up during maintenance.\n- [ ] Optimization does not work for second subproblem, because the Components of the removal event does not contain data, that fits to the sub problem's schema.\n   - [ ] Maybe this is caused by wrapped allocations.\n   - [ ] ```java.lang.AssertionError: \nExpecting:\n  \u003c[Database[demands, Rails For School Scheduling, allocations]]\u003e\nto contain at least one of the following elements:\n  \u003c[[demands, Rails For School Scheduling],\n    Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used]]\u003e\nbut none were found ```\n* [x] Allocations do not work for nested problems, because there is an equality problem. -\u003e Allocations had an inconsistent path.\n``Context of demand for removal should be part demands or used demands, but is not:\nRemoval context is           Database[demands, Rails For School Scheduling, allocations],\ndemands context is          [demands, Rails For School Scheduling] and\nused demands context is Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used].``\n* [ ] Imitate railed courses to teacher allocation solver from personal master thesis.\n   * [x] Only grouping by course is important.\n   * [x] Determine not allocated courses and their not used demands.\n   * [ ] Determine defying groups and their not used and used demands.\n   * [ ] Determine a representative allocation of defying groups and undo all allocations of defying groups.\n   * [x] Use free demands of the representative for the repair of each defying group.\n   * [x] Randomize each repair step.\n   * [ ] Select only suitable teachers.\n   * [ ] Repair all incorrect values and not just some by repair any constraint error and by always converting all groupings to groupings by course id.\n   * [ ] Deallocate all lines with a course id, that has an error, during each repair iteration step.\n   * [ ] Optionally deallocate all lines with a subject, that has an error, during each repair iteration step.\n   * [ ] Use unused demands.\n   * [ ] Randomization performance seems to be bad.\n* [ ] Implement constraint query system for tables and use it in constraint based repair. Online optimization would be needed for that.\n* [ ] Improve analysis by making it more table like and create guidlines for table (searchability and simplicity) versus tree (organization).\n* [ ] Add temporary storage project to private website.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1653681680,"metadata":{"github-id":"UCE_lAHOFCNQW84xHWf2zi6d04E"},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n   - [ ] Use custom initializers for constraint based repair in order to improve results.\n   - [ ] Render performance data in Graph and monitor results,\nin order to get a felling, how much needs to be done and how much effect a single action had.\nDo this by reimplementing the old problem specific initializers.\n(Currently done via https://localhost:8444/net/splitcells/martins/avots/website/test.html)\n- [ ] Compare repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [x] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [x] Remove usage of Node logging interface. -\u003e I removed some Node usage and deprecated the interface instead.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way. -\u003e UiRouter can be used as an alternative Domsole.\n   - [x] Fix XML outpout for Domsole. -\u003e Will fix it, when it is used again or the code is cleaned up during maintenance.\n- [ ] Optimization does not work for second subproblem, because the Components of the removal event does not contain data, that fits to the sub problem's schema.\n   - [ ] Maybe this is caused by wrapped allocations.\n   - [ ] ```java.lang.AssertionError: \nExpecting:\n  \u003c[Database[demands, Rails For School Scheduling, allocations]]\u003e\nto contain at least one of the following elements:\n  \u003c[[demands, Rails For School Scheduling],\n    Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used]]\u003e\nbut none were found ```\n* [x] Allocations do not work for nested problems, because there is an equality problem. -\u003e Allocations had an inconsistent path.\n``Context of demand for removal should be part demands or used demands, but is not:\nRemoval context is           Database[demands, Rails For School Scheduling, allocations],\ndemands context is          [demands, Rails For School Scheduling] and\nused demands context is Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used].``\n* [ ] Imitate railed courses to teacher allocation solver from personal master thesis.\n   * [x] Only grouping by course is important.\n   * [x] Determine not allocated courses and their not used demands.\n   * [ ] Determine defying groups and their not used and used demands.\n   * [ ] Determine a representative allocation of defying groups and undo all allocations of defying groups.\n   * [x] Use free demands of the representative for the repair of each defying group.\n   * [x] Randomize each repair step.\n   * [x] Select only suitable teachers.\n   * [ ] Repair all incorrect values and not just some by repair any constraint error and by always converting all groupings to groupings by course id.\n   * [ ] Deallocate all lines with a course id, that has an error, during each repair iteration step.\n   * [ ] Optionally deallocate all lines with a subject, that has an error, during each repair iteration step.\n   * [ ] Use unused demands.\n   * [ ] Randomization performance seems to be bad.\n* [ ] Implement constraint query system for tables and use it in constraint based repair. Online optimization would be needed for that.\n* [ ] Improve analysis by making it more table like and create guidlines for table (searchability and simplicity) versus tree (organization).\n* [ ] Add temporary storage project to private website.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1653681701,"metadata":{"github-id":"UCE_lAHOFCNQW84xHWf2zi6d1Ec"},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n   - [ ] Use custom initializers for constraint based repair in order to improve results.\n   - [ ] Render performance data in Graph and monitor results,\nin order to get a felling, how much needs to be done and how much effect a single action had.\nDo this by reimplementing the old problem specific initializers.\n(Currently done via https://localhost:8444/net/splitcells/martins/avots/website/test.html)\n- [ ] Compare repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [x] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [x] Remove usage of Node logging interface. -\u003e I removed some Node usage and deprecated the interface instead.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way. -\u003e UiRouter can be used as an alternative Domsole.\n   - [x] Fix XML outpout for Domsole. -\u003e Will fix it, when it is used again or the code is cleaned up during maintenance.\n- [ ] Optimization does not work for second subproblem, because the Components of the removal event does not contain data, that fits to the sub problem's schema.\n   - [ ] Maybe this is caused by wrapped allocations.\n   - [ ] ```java.lang.AssertionError: \nExpecting:\n  \u003c[Database[demands, Rails For School Scheduling, allocations]]\u003e\nto contain at least one of the following elements:\n  \u003c[[demands, Rails For School Scheduling],\n    Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used]]\u003e\nbut none were found ```\n* [x] Allocations do not work for nested problems, because there is an equality problem. -\u003e Allocations had an inconsistent path.\n``Context of demand for removal should be part demands or used demands, but is not:\nRemoval context is           Database[demands, Rails For School Scheduling, allocations],\ndemands context is          [demands, Rails For School Scheduling] and\nused demands context is Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used].``\n* [ ] Imitate railed courses to teacher allocation solver from personal master thesis.\n   * [x] Only grouping by course is important.\n   * [x] Determine not allocated courses and their not used demands.\n   * [ ] Determine defying groups and their not used and used demands.\n   * [ ] Determine a representative allocation of defying groups and undo all allocations of defying groups.\n   * [x] Use free demands of the representative for the repair of each defying group.\n   * [x] Randomize each repair step.\n   * [x] Select only suitable teachers.\n   * [x] Repair all incorrect values and not just some by repair any constraint error and by always converting all groupings to groupings by course id.\n   * [ ] Deallocate all lines with a course id, that has an error, during each repair iteration step.\n   * [ ] Optionally deallocate all lines with a subject, that has an error, during each repair iteration step.\n   * [ ] Use unused demands.\n   * [ ] Randomization performance seems to be bad.\n* [ ] Implement constraint query system for tables and use it in constraint based repair. Online optimization would be needed for that.\n* [ ] Improve analysis by making it more table like and create guidlines for table (searchability and simplicity) versus tree (organization).\n* [ ] Add temporary storage project to private website.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1653685142,"metadata":{"github-id":"UCE_lAHOFCNQW84xHWf2zi6eRuQ"},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n   - [ ] Use custom initializers for constraint based repair in order to improve results.\n   - [ ] Render performance data in Graph and monitor results,\nin order to get a felling, how much needs to be done and how much effect a single action had.\nDo this by reimplementing the old problem specific initializers.\n(Currently done via https://localhost:8444/net/splitcells/martins/avots/website/test.html)\n- [ ] Compare repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [x] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [x] Remove usage of Node logging interface. -\u003e I removed some Node usage and deprecated the interface instead.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way. -\u003e UiRouter can be used as an alternative Domsole.\n   - [x] Fix XML outpout for Domsole. -\u003e Will fix it, when it is used again or the code is cleaned up during maintenance.\n- [ ] Optimization does not work for second subproblem, because the Components of the removal event does not contain data, that fits to the sub problem's schema.\n   - [ ] Maybe this is caused by wrapped allocations.\n   - [ ] ```java.lang.AssertionError: \nExpecting:\n  \u003c[Database[demands, Rails For School Scheduling, allocations]]\u003e\nto contain at least one of the following elements:\n  \u003c[[demands, Rails For School Scheduling],\n    Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used]]\u003e\nbut none were found ```\n* [x] Allocations do not work for nested problems, because there is an equality problem. -\u003e Allocations had an inconsistent path.\n``Context of demand for removal should be part demands or used demands, but is not:\nRemoval context is           Database[demands, Rails For School Scheduling, allocations],\ndemands context is          [demands, Rails For School Scheduling] and\nused demands context is Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used].``\n* [ ] Imitate railed courses to teacher allocation solver from personal master thesis.\n   * [x] Only grouping by course is important.\n   * [x] Determine not allocated courses and their not used demands.\n   * [ ] Determine defying groups and their not used and used demands.\n   * [ ] Determine a representative allocation of defying groups and undo all allocations of defying groups.\n   * [x] Use free demands of the representative for the repair of each defying group.\n   * [x] Randomize each repair step.\n   * [x] Select only suitable teachers.\n   * [x] Repair all incorrect values and not just some by repair any constraint error and by always converting all groupings to groupings by course id.\n   * [ ] Deallocate all lines with a course id, that has an error, during each repair iteration step.\n   * [ ] Optionally deallocate all lines with a subject, that has an error, during each repair iteration step.\n   * [ ] Use unused demands.\n   * [ ] Randomization performance seems to be bad.\n* [ ] Implement constraint query system for tables and use it in constraint based repair. Online optimization would be needed for that.\n* [ ] Improve analysis by making it more table like and create guidelines for table (searchability and simplicity) versus tree (organization).\n* [ ] Add temporary storage project to private website.\n* [ ] Adjust teacher subject suitability and course subject in test data. Some course subjects may need to have a teacher for the subject adjustments.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1654004732,"metadata":{"github-id":"UCE_lAHOFCNQW84xHWf2zi6-7-U"},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n   - [ ] Use custom initializers for constraint based repair in order to improve results.\n   - [ ] Render performance data in Graph and monitor results,\nin order to get a felling, how much needs to be done and how much effect a single action had.\nDo this by reimplementing the old problem specific initializers.\n(Currently done via https://localhost:8444/net/splitcells/martins/avots/website/test.html)\n- [ ] Compare repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [x] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [x] Remove usage of Node logging interface. -\u003e I removed some Node usage and deprecated the interface instead.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way. -\u003e UiRouter can be used as an alternative Domsole.\n   - [x] Fix XML outpout for Domsole. -\u003e Will fix it, when it is used again or the code is cleaned up during maintenance.\n- [ ] Optimization does not work for second subproblem, because the Components of the removal event does not contain data, that fits to the sub problem's schema.\n   - [ ] Maybe this is caused by wrapped allocations.\n   - [ ] ```java.lang.AssertionError: \nExpecting:\n  \u003c[Database[demands, Rails For School Scheduling, allocations]]\u003e\nto contain at least one of the following elements:\n  \u003c[[demands, Rails For School Scheduling],\n    Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used]]\u003e\nbut none were found ```\n* [x] Allocations do not work for nested problems, because there is an equality problem. -\u003e Allocations had an inconsistent path.\n``Context of demand for removal should be part demands or used demands, but is not:\nRemoval context is           Database[demands, Rails For School Scheduling, allocations],\ndemands context is          [demands, Rails For School Scheduling] and\nused demands context is Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used].``\n* [ ] Imitate railed courses to teacher allocation solver from personal master thesis.\n   * [x] Only grouping by course is important.\n   * [x] Determine not allocated courses and their not used demands.\n   * [ ] Determine defying groups and their not used and used demands.\n   * [ ] Determine a representative allocation of defying groups and undo all allocations of defying groups.\n   * [x] Use free demands of the representative for the repair of each defying group.\n   * [x] Randomize each repair step.\n   * [x] Select only suitable teachers.\n   * [x] Repair all incorrect values and not just some by repair any constraint error and by always converting all groupings to groupings by course id.\n   * [ ] Deallocate all lines with a course id, that has an error, during each repair iteration step.\n   * [ ] Optionally deallocate all lines with a subject, that has an error, during each repair iteration step.\n   * [ ] Use unused demands.\n   * [ ] Randomization performance seems to be bad.\n   * [ ] Every course is currently on the same rail.\n* [ ] Implement constraint query system for tables and use it in constraint based repair. Online optimization would be needed for that.\n* [ ] Improve analysis by making it more table like and create guidelines for table (searchability and simplicity) versus tree (organization).\n* [ ] Add temporary storage project to private website.\n* [ ] Adjust teacher subject suitability and course subject in test data. Some course subjects may need to have a teacher for the subject adjustments.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1654117020,"metadata":{"github-id":"UCE_lAHOFCNQW84xHWf2zi7VDns"},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n   - [ ] Use custom initializers for constraint based repair in order to improve results.\n   - [ ] Render performance data in Graph and monitor results,\nin order to get a felling, how much needs to be done and how much effect a single action had.\nDo this by reimplementing the old problem specific initializers.\n(Currently done via https://localhost:8444/net/splitcells/martins/avots/website/test.html)\n- [ ] Compare repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [x] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [x] Remove usage of Node logging interface. -\u003e I removed some Node usage and deprecated the interface instead.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way. -\u003e UiRouter can be used as an alternative Domsole.\n   - [x] Fix XML outpout for Domsole. -\u003e Will fix it, when it is used again or the code is cleaned up during maintenance.\n- [ ] Optimization does not work for second subproblem, because the Components of the removal event does not contain data, that fits to the sub problem's schema.\n   - [ ] Maybe this is caused by wrapped allocations.\n   - [ ] ```java.lang.AssertionError: \nExpecting:\n  \u003c[Database[demands, Rails For School Scheduling, allocations]]\u003e\nto contain at least one of the following elements:\n  \u003c[[demands, Rails For School Scheduling],\n    Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used]]\u003e\nbut none were found ```\n* [x] Allocations do not work for nested problems, because there is an equality problem. -\u003e Allocations had an inconsistent path.\n``Context of demand for removal should be part demands or used demands, but is not:\nRemoval context is           Database[demands, Rails For School Scheduling, allocations],\ndemands context is          [demands, Rails For School Scheduling] and\nused demands context is Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used].``\n* [ ] Imitate railed courses to teacher allocation solver from personal master thesis.\n   * [ ] Assign courses to rails.\n      * [ ] Every course is currently on the same rail.\n      * [ ] Every course has a length of 0.\n   * [ ] Assign teachers to courses.\n      * [x] Only grouping by course is important.\n      * [x] Determine not allocated courses and their not used demands.\n      * [ ] Determine defying groups and their not used and used demands.\n      * [ ] Determine a representative allocation of defying groups and undo all allocations of defying groups.\n      * [x] Use free demands of the representative for the repair of each defying group.\n      * [x] Randomize each repair step.\n      * [x] Select only suitable teachers.\n      * [x] Repair all incorrect values and not just some by repair any constraint error and by always converting all groupings to groupings by course id.\n      * [ ] Deallocate all lines with a course id, that has an error, during each repair iteration step.\n      * [ ] Optionally deallocate all lines with a subject, that has an error, during each repair iteration step.\n      * [ ] Use unused demands.\n      * [ ] Randomization performance seems to be bad.\n   * [ ] Assign pupils to courses.\n* [ ] Implement constraint query system for tables and use it in constraint based repair. Online optimization would be needed for that.\n* [ ] Improve analysis by making it more table like and create guidelines for table (searchability and simplicity) versus tree (organization).\n* [ ] Add temporary storage project to private website.\n* [ ] Adjust teacher subject suitability and course subject in test data. Some course subjects may need to have a teacher for the subject adjustments.\n* [ ] Document problem.\n* [ ] Create a presentation for the problem.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1654117048,"metadata":{"github-id":"UCE_lAHOFCNQW84xHWf2zi7VD4Q"},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n   - [ ] Use custom initializers for constraint based repair in order to improve results.\n   - [ ] Render performance data in Graph and monitor results,\nin order to get a felling, how much needs to be done and how much effect a single action had.\nDo this by reimplementing the old problem specific initializers.\n(Currently done via https://localhost:8444/net/splitcells/martins/avots/website/test.html)\n- [ ] Compare repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [x] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [x] Remove usage of Node logging interface. -\u003e I removed some Node usage and deprecated the interface instead.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way. -\u003e UiRouter can be used as an alternative Domsole.\n   - [x] Fix XML outpout for Domsole. -\u003e Will fix it, when it is used again or the code is cleaned up during maintenance.\n- [ ] Optimization does not work for second subproblem, because the Components of the removal event does not contain data, that fits to the sub problem's schema.\n   - [ ] Maybe this is caused by wrapped allocations.\n   - [ ] ```java.lang.AssertionError: \nExpecting:\n  \u003c[Database[demands, Rails For School Scheduling, allocations]]\u003e\nto contain at least one of the following elements:\n  \u003c[[demands, Rails For School Scheduling],\n    Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used]]\u003e\nbut none were found ```\n* [x] Allocations do not work for nested problems, because there is an equality problem. -\u003e Allocations had an inconsistent path.\n``Context of demand for removal should be part demands or used demands, but is not:\nRemoval context is           Database[demands, Rails For School Scheduling, allocations],\ndemands context is          [demands, Rails For School Scheduling] and\nused demands context is Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used].``\n* [ ] Imitate railed courses to teacher allocation solver from personal master thesis.\n   * [ ] Assign courses to rails.\n      * [ ] Every course is currently on the same rail.\n      * [ ] Every course has no allocated hours.\n   * [ ] Assign teachers to courses.\n      * [x] Only grouping by course is important.\n      * [x] Determine not allocated courses and their not used demands.\n      * [ ] Determine defying groups and their not used and used demands.\n      * [ ] Determine a representative allocation of defying groups and undo all allocations of defying groups.\n      * [x] Use free demands of the representative for the repair of each defying group.\n      * [x] Randomize each repair step.\n      * [x] Select only suitable teachers.\n      * [x] Repair all incorrect values and not just some by repair any constraint error and by always converting all groupings to groupings by course id.\n      * [ ] Deallocate all lines with a course id, that has an error, during each repair iteration step.\n      * [ ] Optionally deallocate all lines with a subject, that has an error, during each repair iteration step.\n      * [ ] Use unused demands.\n      * [ ] Randomization performance seems to be bad.\n   * [ ] Assign pupils to courses.\n* [ ] Implement constraint query system for tables and use it in constraint based repair. Online optimization would be needed for that.\n* [ ] Improve analysis by making it more table like and create guidelines for table (searchability and simplicity) versus tree (organization).\n* [ ] Add temporary storage project to private website.\n* [ ] Adjust teacher subject suitability and course subject in test data. Some course subjects may need to have a teacher for the subject adjustments.\n* [ ] Document problem.\n* [ ] Create a presentation for the problem.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1654117132,"metadata":{"github-id":"UCE_lAHOFCNQW84xHWf2zi7VE6Q"},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n   - [ ] Use custom initializers for constraint based repair in order to improve results.\n   - [ ] Render performance data in Graph and monitor results,\nin order to get a felling, how much needs to be done and how much effect a single action had.\nDo this by reimplementing the old problem specific initializers.\n(Currently done via https://localhost:8444/net/splitcells/martins/avots/website/test.html)\n- [ ] Compare repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [x] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [x] Remove usage of Node logging interface. -\u003e I removed some Node usage and deprecated the interface instead.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way. -\u003e UiRouter can be used as an alternative Domsole.\n   - [x] Fix XML outpout for Domsole. -\u003e Will fix it, when it is used again or the code is cleaned up during maintenance.\n- [ ] Optimization does not work for second subproblem, because the Components of the removal event does not contain data, that fits to the sub problem's schema.\n   - [ ] Maybe this is caused by wrapped allocations.\n   - [ ] ```java.lang.AssertionError: \nExpecting:\n  \u003c[Database[demands, Rails For School Scheduling, allocations]]\u003e\nto contain at least one of the following elements:\n  \u003c[[demands, Rails For School Scheduling],\n    Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used]]\u003e\nbut none were found ```\n* [x] Allocations do not work for nested problems, because there is an equality problem. -\u003e Allocations had an inconsistent path.\n``Context of demand for removal should be part demands or used demands, but is not:\nRemoval context is           Database[demands, Rails For School Scheduling, allocations],\ndemands context is          [demands, Rails For School Scheduling] and\nused demands context is Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used].``\n* [ ] Imitate railed courses to teacher allocation solver from personal master thesis.\n   * [ ] Assign courses to rails.\n      * [ ] Every course is currently on the same rail.\n      * [ ] Every course has no allocated hours.\n   * [ ] Assign teachers to courses.\n      * [x] Only grouping by course is important.\n      * [x] Determine not allocated courses and their not used demands.\n      * [ ] Determine defying groups and their not used and used demands.\n      * [ ] Determine a representative allocation of defying groups and undo all allocations of defying groups.\n      * [x] Use free demands of the representative for the repair of each defying group.\n      * [x] Randomize each repair step.\n      * [x] Select only suitable teachers.\n      * [x] Repair all incorrect values and not just some by repair any constraint error and by always converting all groupings to groupings by course id.\n      * [ ] Deallocate all lines with a course id, that has an error, during each repair iteration step.\n      * [ ] Optionally deallocate all lines with a subject, that has an error, during each repair iteration step.\n      * [ ] Use unused demands.\n      * [ ] Randomization performance seems to be bad.\n   * [ ] Assign pupils to courses.\n* [ ] Implement constraint query system for tables and use it in constraint based repair. Online optimization would be needed for that.\n* [ ] Improve analysis by making it more table like and create guidelines for table (searchability and simplicity) versus tree (organization).\n* [ ] Add temporary storage project to private website.\n* [ ] Adjust teacher subject suitability and course subject in test data. Some course subjects may need to have a teacher for the subject adjustments.\n* [ ] Document problem.\n* [ ] Create a presentation for the problem.\n* [ ] Test all constraints.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1654117686,"metadata":{"github-id":"UCE_lAHOFCNQW84xHWf2zi7VMj0"},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n   - [ ] Use custom initializers for constraint based repair in order to improve results.\n   - [ ] Render performance data in Graph and monitor results,\nin order to get a felling, how much needs to be done and how much effect a single action had.\nDo this by reimplementing the old problem specific initializers.\n(Currently done via https://localhost:8444/net/splitcells/martins/avots/website/test.html)\n- [ ] Compare repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [x] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [x] Remove usage of Node logging interface. -\u003e I removed some Node usage and deprecated the interface instead.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way. -\u003e UiRouter can be used as an alternative Domsole.\n   - [x] Fix XML outpout for Domsole. -\u003e Will fix it, when it is used again or the code is cleaned up during maintenance.\n- [ ] Optimization does not work for second subproblem, because the Components of the removal event does not contain data, that fits to the sub problem's schema.\n   - [ ] Maybe this is caused by wrapped allocations.\n   - [ ] ```java.lang.AssertionError: \nExpecting:\n  \u003c[Database[demands, Rails For School Scheduling, allocations]]\u003e\nto contain at least one of the following elements:\n  \u003c[[demands, Rails For School Scheduling],\n    Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used]]\u003e\nbut none were found ```\n* [x] Allocations do not work for nested problems, because there is an equality problem. -\u003e Allocations had an inconsistent path.\n``Context of demand for removal should be part demands or used demands, but is not:\nRemoval context is           Database[demands, Rails For School Scheduling, allocations],\ndemands context is          [demands, Rails For School Scheduling] and\nused demands context is Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used].``\n* [ ] Imitate railed courses to teacher allocation solver from personal master thesis.\n   * [ ] Assign courses to rails.\n      * [ ] Every course is currently on the same rail.\n      * [ ] Every course has no allocated hours.\n   * [ ] Assign teachers to courses.\n      * [x] Only grouping by course is important.\n      * [x] Determine not allocated courses and their not used demands.\n      * [ ] Determine defying groups and their not used and used demands.\n      * [ ] Determine a representative allocation of defying groups and undo all allocations of defying groups.\n      * [x] Use free demands of the representative for the repair of each defying group.\n      * [x] Randomize each repair step.\n      * [x] Select only suitable teachers.\n      * [x] Repair all incorrect values and not just some by repair any constraint error and by always converting all groupings to groupings by course id.\n      * [ ] Deallocate all lines with a course id, that has an error, during each repair iteration step.\n      * [ ] Optionally deallocate all lines with a subject, that has an error, during each repair iteration step.\n      * [ ] Use unused demands.\n      * [ ] Randomization performance seems to be bad.\n   * [ ] Assign pupils to courses.\n* [ ] Implement constraint query system for tables and use it in constraint based repair. Online optimization would be needed for that.\n* [ ] Improve analysis by making it more table like and create guidelines for table (searchability and simplicity) versus tree (organization).\n* [ ] Add temporary storage project to private website.\n* [ ] Adjust teacher subject suitability and course subject in test data. Some course subjects may need to have a teacher for the subject adjustments.\n* [ ] Document problem.\n* [ ] Create a presentation for the problem.\n* [ ] Test all constraints.\n* [ ] Fix last element of solution paths in logging (i.e. `net/splitcells/gel/GelEnv/demands.allocations.allocations/`).","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1654120301,"metadata":{"github-id":"UCE_lAHOFCNQW84xHWf2zi7VpWM"},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n   - [ ] Use custom initializers for constraint based repair in order to improve results.\n   - [ ] Render performance data in Graph and monitor results,\nin order to get a felling, how much needs to be done and how much effect a single action had.\nDo this by reimplementing the old problem specific initializers.\n(Currently done via https://localhost:8444/net/splitcells/martins/avots/website/test.html)\n- [ ] Compare repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [x] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [x] Remove usage of Node logging interface. -\u003e I removed some Node usage and deprecated the interface instead.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way. -\u003e UiRouter can be used as an alternative Domsole.\n   - [x] Fix XML outpout for Domsole. -\u003e Will fix it, when it is used again or the code is cleaned up during maintenance.\n- [ ] Optimization does not work for second subproblem, because the Components of the removal event does not contain data, that fits to the sub problem's schema.\n   - [ ] Maybe this is caused by wrapped allocations.\n   - [ ] ```java.lang.AssertionError: \nExpecting:\n  \u003c[Database[demands, Rails For School Scheduling, allocations]]\u003e\nto contain at least one of the following elements:\n  \u003c[[demands, Rails For School Scheduling],\n    Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used]]\u003e\nbut none were found ```\n* [x] Allocations do not work for nested problems, because there is an equality problem. -\u003e Allocations had an inconsistent path.\n``Context of demand for removal should be part demands or used demands, but is not:\nRemoval context is           Database[demands, Rails For School Scheduling, allocations],\ndemands context is          [demands, Rails For School Scheduling] and\nused demands context is Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used].``\n* [ ] Imitate railed courses to teacher allocation solver from personal master thesis.\n   * [ ] Assign courses to rails.\n      * [ ] Every course is currently on the same rail.\n      * [x] Every course has no allocated hours.\n   * [ ] Assign teachers to courses.\n      * [x] Only grouping by course is important.\n      * [x] Determine not allocated courses and their not used demands.\n      * [ ] Determine defying groups and their not used and used demands.\n      * [ ] Determine a representative allocation of defying groups and undo all allocations of defying groups.\n      * [x] Use free demands of the representative for the repair of each defying group.\n      * [x] Randomize each repair step.\n      * [x] Select only suitable teachers.\n      * [x] Repair all incorrect values and not just some by repair any constraint error and by always converting all groupings to groupings by course id.\n      * [ ] Deallocate all lines with a course id, that has an error, during each repair iteration step.\n      * [ ] Optionally deallocate all lines with a subject, that has an error, during each repair iteration step.\n      * [ ] Use unused demands.\n      * [ ] Randomization performance seems to be bad.\n   * [ ] Assign pupils to courses.\n* [ ] Implement constraint query system for tables and use it in constraint based repair. Online optimization would be needed for that.\n* [ ] Improve analysis by making it more table like and create guidelines for table (searchability and simplicity) versus tree (organization).\n* [ ] Add temporary storage project to private website.\n* [ ] Adjust teacher subject suitability and course subject in test data. Some course subjects may need to have a teacher for the subject adjustments.\n* [ ] Document problem.\n* [ ] Create a presentation for the problem.\n* [ ] Test all constraints.\n* [ ] Fix last element of solution paths in logging (i.e. `net/splitcells/gel/GelEnv/demands.allocations.allocations/`).","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1654120308,"metadata":{"github-id":"UCE_lAHOFCNQW84xHWf2zi7Vpa8"},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n   - [ ] Use custom initializers for constraint based repair in order to improve results.\n   - [ ] Render performance data in Graph and monitor results,\nin order to get a felling, how much needs to be done and how much effect a single action had.\nDo this by reimplementing the old problem specific initializers.\n(Currently done via https://localhost:8444/net/splitcells/martins/avots/website/test.html)\n- [ ] Compare repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [x] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [x] Remove usage of Node logging interface. -\u003e I removed some Node usage and deprecated the interface instead.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way. -\u003e UiRouter can be used as an alternative Domsole.\n   - [x] Fix XML outpout for Domsole. -\u003e Will fix it, when it is used again or the code is cleaned up during maintenance.\n- [ ] Optimization does not work for second subproblem, because the Components of the removal event does not contain data, that fits to the sub problem's schema.\n   - [ ] Maybe this is caused by wrapped allocations.\n   - [ ] ```java.lang.AssertionError: \nExpecting:\n  \u003c[Database[demands, Rails For School Scheduling, allocations]]\u003e\nto contain at least one of the following elements:\n  \u003c[[demands, Rails For School Scheduling],\n    Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used]]\u003e\nbut none were found ```\n* [x] Allocations do not work for nested problems, because there is an equality problem. -\u003e Allocations had an inconsistent path.\n``Context of demand for removal should be part demands or used demands, but is not:\nRemoval context is           Database[demands, Rails For School Scheduling, allocations],\ndemands context is          [demands, Rails For School Scheduling] and\nused demands context is Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used].``\n* [ ] Imitate railed courses to teacher allocation solver from personal master thesis.\n   * [ ] Assign courses to rails.\n      * [x] Every course is currently on the same rail.\n      * [x] Every course has no allocated hours.\n   * [ ] Assign teachers to courses.\n      * [x] Only grouping by course is important.\n      * [x] Determine not allocated courses and their not used demands.\n      * [ ] Determine defying groups and their not used and used demands.\n      * [ ] Determine a representative allocation of defying groups and undo all allocations of defying groups.\n      * [x] Use free demands of the representative for the repair of each defying group.\n      * [x] Randomize each repair step.\n      * [x] Select only suitable teachers.\n      * [x] Repair all incorrect values and not just some by repair any constraint error and by always converting all groupings to groupings by course id.\n      * [ ] Deallocate all lines with a course id, that has an error, during each repair iteration step.\n      * [ ] Optionally deallocate all lines with a subject, that has an error, during each repair iteration step.\n      * [ ] Use unused demands.\n      * [ ] Randomization performance seems to be bad.\n   * [ ] Assign pupils to courses.\n* [ ] Implement constraint query system for tables and use it in constraint based repair. Online optimization would be needed for that.\n* [ ] Improve analysis by making it more table like and create guidelines for table (searchability and simplicity) versus tree (organization).\n* [ ] Add temporary storage project to private website.\n* [ ] Adjust teacher subject suitability and course subject in test data. Some course subjects may need to have a teacher for the subject adjustments.\n* [ ] Document problem.\n* [ ] Create a presentation for the problem.\n* [ ] Test all constraints.\n* [ ] Fix last element of solution paths in logging (i.e. `net/splitcells/gel/GelEnv/demands.allocations.allocations/`).","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1654120684,"metadata":{"github-id":"UCE_lAHOFCNQW84xHWf2zi7VtYc"},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n   - [ ] Use custom initializers for constraint based repair in order to improve results.\n   - [ ] Render performance data in Graph and monitor results,\nin order to get a felling, how much needs to be done and how much effect a single action had.\nDo this by reimplementing the old problem specific initializers.\n(Currently done via https://localhost:8444/net/splitcells/martins/avots/website/test.html)\n- [ ] Compare repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [x] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [x] Remove usage of Node logging interface. -\u003e I removed some Node usage and deprecated the interface instead.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way. -\u003e UiRouter can be used as an alternative Domsole.\n   - [x] Fix XML outpout for Domsole. -\u003e Will fix it, when it is used again or the code is cleaned up during maintenance.\n- [ ] Optimization does not work for second subproblem, because the Components of the removal event does not contain data, that fits to the sub problem's schema.\n   - [ ] Maybe this is caused by wrapped allocations.\n   - [ ] ```java.lang.AssertionError: \nExpecting:\n  \u003c[Database[demands, Rails For School Scheduling, allocations]]\u003e\nto contain at least one of the following elements:\n  \u003c[[demands, Rails For School Scheduling],\n    Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used]]\u003e\nbut none were found ```\n* [x] Allocations do not work for nested problems, because there is an equality problem. -\u003e Allocations had an inconsistent path.\n``Context of demand for removal should be part demands or used demands, but is not:\nRemoval context is           Database[demands, Rails For School Scheduling, allocations],\ndemands context is          [demands, Rails For School Scheduling] and\nused demands context is Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used].``\n* [ ] Imitate railed courses to teacher allocation solver from personal master thesis.\n   * [ ] Assign courses to rails.\n      * [x] Every course is currently on the same rail.\n      * [x] Every course has no allocated hours.\n      * [ ] The repair proposals do not generate only valid hour allocations.\n   * [ ] Assign teachers to courses.\n      * [x] Only grouping by course is important.\n      * [x] Determine not allocated courses and their not used demands.\n      * [ ] Determine defying groups and their not used and used demands.\n      * [ ] Determine a representative allocation of defying groups and undo all allocations of defying groups.\n      * [x] Use free demands of the representative for the repair of each defying group.\n      * [x] Randomize each repair step.\n      * [x] Select only suitable teachers.\n      * [x] Repair all incorrect values and not just some by repair any constraint error and by always converting all groupings to groupings by course id.\n      * [ ] Deallocate all lines with a course id, that has an error, during each repair iteration step.\n      * [ ] Optionally deallocate all lines with a subject, that has an error, during each repair iteration step.\n      * [ ] Use unused demands.\n      * [ ] Randomization performance seems to be bad.\n   * [ ] Assign pupils to courses.\n* [ ] Implement constraint query system for tables and use it in constraint based repair. Online optimization would be needed for that.\n* [ ] Improve analysis by making it more table like and create guidelines for table (searchability and simplicity) versus tree (organization).\n* [ ] Add temporary storage project to private website.\n* [ ] Adjust teacher subject suitability and course subject in test data. Some course subjects may need to have a teacher for the subject adjustments.\n* [ ] Document problem.\n* [ ] Create a presentation for the problem.\n* [ ] Test all constraints.\n* [ ] Fix last element of solution paths in logging (i.e. `net/splitcells/gel/GelEnv/demands.allocations.allocations/`).","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1654120807,"metadata":{"github-id":"UCE_lAHOFCNQW84xHWf2zi7VuzY"},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n   - [ ] Use custom initializers for constraint based repair in order to improve results.\n   - [ ] Render performance data in Graph and monitor results,\nin order to get a felling, how much needs to be done and how much effect a single action had.\nDo this by reimplementing the old problem specific initializers.\n(Currently done via https://localhost:8444/net/splitcells/martins/avots/website/test.html)\n- [ ] Compare repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [x] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [x] Remove usage of Node logging interface. -\u003e I removed some Node usage and deprecated the interface instead.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way. -\u003e UiRouter can be used as an alternative Domsole.\n   - [x] Fix XML outpout for Domsole. -\u003e Will fix it, when it is used again or the code is cleaned up during maintenance.\n- [ ] Optimization does not work for second subproblem, because the Components of the removal event does not contain data, that fits to the sub problem's schema.\n   - [ ] Maybe this is caused by wrapped allocations.\n   - [ ] ```java.lang.AssertionError: \nExpecting:\n  \u003c[Database[demands, Rails For School Scheduling, allocations]]\u003e\nto contain at least one of the following elements:\n  \u003c[[demands, Rails For School Scheduling],\n    Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used]]\u003e\nbut none were found ```\n* [x] Allocations do not work for nested problems, because there is an equality problem. -\u003e Allocations had an inconsistent path.\n``Context of demand for removal should be part demands or used demands, but is not:\nRemoval context is           Database[demands, Rails For School Scheduling, allocations],\ndemands context is          [demands, Rails For School Scheduling] and\nused demands context is Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used].``\n* [ ] Imitate railed courses to teacher allocation solver from personal master thesis.\n   * [ ] Assign courses to rails.\n      * [x] Every course is currently on the same rail.\n      * [x] Every course has no allocated hours.\n      * [ ] The repair proposals do not generate only valid hour allocations.\n      * [ ] The average course of the generated supplies is not correct (half of target).\n   * [ ] Assign teachers to courses.\n      * [x] Only grouping by course is important.\n      * [x] Determine not allocated courses and their not used demands.\n      * [ ] Determine defying groups and their not used and used demands.\n      * [ ] Determine a representative allocation of defying groups and undo all allocations of defying groups.\n      * [x] Use free demands of the representative for the repair of each defying group.\n      * [x] Randomize each repair step.\n      * [x] Select only suitable teachers.\n      * [x] Repair all incorrect values and not just some by repair any constraint error and by always converting all groupings to groupings by course id.\n      * [ ] Deallocate all lines with a course id, that has an error, during each repair iteration step.\n      * [ ] Optionally deallocate all lines with a subject, that has an error, during each repair iteration step.\n      * [ ] Use unused demands.\n      * [ ] Randomization performance seems to be bad.\n   * [ ] Assign pupils to courses.\n* [ ] Implement constraint query system for tables and use it in constraint based repair. Online optimization would be needed for that.\n* [ ] Improve analysis by making it more table like and create guidelines for table (searchability and simplicity) versus tree (organization).\n* [ ] Add temporary storage project to private website.\n* [ ] Adjust teacher subject suitability and course subject in test data. Some course subjects may need to have a teacher for the subject adjustments.\n* [ ] Document problem.\n* [ ] Create a presentation for the problem.\n* [ ] Test all constraints.\n* [ ] Fix last element of solution paths in logging (i.e. `net/splitcells/gel/GelEnv/demands.allocations.allocations/`).","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1654121002,"metadata":{"github-id":"UCE_lAHOFCNQW84xHWf2zi7VxCQ"},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n   - [ ] Use custom initializers for constraint based repair in order to improve results.\n   - [ ] Render performance data in Graph and monitor results,\nin order to get a felling, how much needs to be done and how much effect a single action had.\nDo this by reimplementing the old problem specific initializers.\n(Currently done via https://localhost:8444/net/splitcells/martins/avots/website/test.html)\n- [ ] Compare repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [x] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [x] Remove usage of Node logging interface. -\u003e I removed some Node usage and deprecated the interface instead.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way. -\u003e UiRouter can be used as an alternative Domsole.\n   - [x] Fix XML outpout for Domsole. -\u003e Will fix it, when it is used again or the code is cleaned up during maintenance.\n* [x] Allocations do not work for nested problems, because there is an equality problem. -\u003e Allocations had an inconsistent path.\n``Context of demand for removal should be part demands or used demands, but is not:\nRemoval context is           Database[demands, Rails For School Scheduling, allocations],\ndemands context is          [demands, Rails For School Scheduling] and\nused demands context is Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used].``\n* [ ] Imitate railed courses to teacher allocation solver from personal master thesis.\n   * [ ] Assign courses to rails.\n      * [x] Every course is currently on the same rail.\n      * [x] Every course has no allocated hours.\n      * [ ] The repair proposals do not generate only valid hour allocations.\n      * [ ] The average course of the generated supplies is not correct (half of target).\n   * [ ] Assign teachers to courses.\n      * [x] Only grouping by course is important.\n      * [x] Determine not allocated courses and their not used demands.\n      * [ ] Determine defying groups and their not used and used demands.\n      * [ ] Determine a representative allocation of defying groups and undo all allocations of defying groups.\n      * [x] Use free demands of the representative for the repair of each defying group.\n      * [x] Randomize each repair step.\n      * [x] Select only suitable teachers.\n      * [x] Repair all incorrect values and not just some by repair any constraint error and by always converting all groupings to groupings by course id.\n      * [ ] Deallocate all lines with a course id, that has an error, during each repair iteration step.\n      * [ ] Optionally deallocate all lines with a subject, that has an error, during each repair iteration step.\n      * [ ] Use unused demands.\n      * [ ] Randomization performance seems to be bad.\n   * [ ] Assign pupils to courses.\n* [ ] Implement constraint query system for tables and use it in constraint based repair. Online optimization would be needed for that.\n* [ ] Improve analysis by making it more table like and create guidelines for table (searchability and simplicity) versus tree (organization).\n* [ ] Add temporary storage project to private website.\n* [ ] Adjust teacher subject suitability and course subject in test data. Some course subjects may need to have a teacher for the subject adjustments.\n* [ ] Create a presentation for the problem.\n* [ ] Test all constraints.\n* [ ] Fix last element of solution paths in logging (i.e. `net/splitcells/gel/GelEnv/demands.allocations.allocations/`).","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1654196452,"metadata":{"github-id":"UCE_lAHOFCNQW84xHWf2zi7l5g8"},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n   - [ ] Use custom initializers for constraint based repair in order to improve results.\n   - [ ] Render performance data in Graph and monitor results,\nin order to get a felling, how much needs to be done and how much effect a single action had.\nDo this by reimplementing the old problem specific initializers.\n(Currently done via https://localhost:8444/net/splitcells/martins/avots/website/test.html)\n- [ ] Compare repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [x] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [x] Remove usage of Node logging interface. -\u003e I removed some Node usage and deprecated the interface instead.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way. -\u003e UiRouter can be used as an alternative Domsole.\n   - [x] Fix XML outpout for Domsole. -\u003e Will fix it, when it is used again or the code is cleaned up during maintenance.\n* [x] Allocations do not work for nested problems, because there is an equality problem. -\u003e Allocations had an inconsistent path.\n``Context of demand for removal should be part demands or used demands, but is not:\nRemoval context is           Database[demands, Rails For School Scheduling, allocations],\ndemands context is          [demands, Rails For School Scheduling] and\nused demands context is Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used].``\n* [ ] Imitate railed courses to teacher allocation solver from personal master thesis.\n   * [ ] Assign courses to rails.\n      * [x] Every course is currently on the same rail.\n      * [x] Every course has no allocated hours.\n      * [ ] The repair proposals does not generate only valid hour allocations.\n      * [ ] The average course length of the generated supplies is not correct (half of target).\n   * [ ] Assign teachers to courses.\n      * [x] Only grouping by course is important.\n      * [x] Determine not allocated courses and their not used demands.\n      * [ ] Determine defying groups and their not used and used demands.\n      * [ ] Determine a representative allocation of defying groups and undo all allocations of defying groups.\n      * [x] Use free demands of the representative for the repair of each defying group.\n      * [x] Randomize each repair step.\n      * [x] Select only suitable teachers.\n      * [x] Repair all incorrect values and not just some by repair any constraint error and by always converting all groupings to groupings by course id.\n      * [ ] Deallocate all lines with a course id, that has an error, during each repair iteration step.\n      * [ ] Optionally deallocate all lines with a subject, that has an error, during each repair iteration step.\n      * [ ] Use unused demands.\n      * [ ] Randomization performance seems to be bad.\n   * [ ] Assign pupils to courses.\n* [ ] Implement constraint query system for tables and use it in constraint based repair. Online optimization would be needed for that.\n* [ ] Improve analysis by making it more table like and create guidelines for table (searchability and simplicity) versus tree (organization).\n* [ ] Add temporary storage project to private website.\n* [ ] Adjust teacher subject suitability and course subject in test data. Some course subjects may need to have a teacher for the subject adjustments.\n* [ ] Create a presentation for the problem.\n* [ ] Test all constraints.\n* [ ] Fix last element of solution paths in logging (i.e. `net/splitcells/gel/GelEnv/demands.allocations.allocations/`).","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1654196458,"metadata":{"github-id":"UCE_lAHOFCNQW84xHWf2zi7l5nU"},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n   - [ ] Use custom initializers for constraint based repair in order to improve results.\n   - [ ] Render performance data in Graph and monitor results,\nin order to get a felling, how much needs to be done and how much effect a single action had.\nDo this by reimplementing the old problem specific initializers.\n(Currently done via https://localhost:8444/net/splitcells/martins/avots/website/test.html)\n- [ ] Compare repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [x] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [x] Remove usage of Node logging interface. -\u003e I removed some Node usage and deprecated the interface instead.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way. -\u003e UiRouter can be used as an alternative Domsole.\n   - [x] Fix XML outpout for Domsole. -\u003e Will fix it, when it is used again or the code is cleaned up during maintenance.\n* [x] Allocations do not work for nested problems, because there is an equality problem. -\u003e Allocations had an inconsistent path.\n``Context of demand for removal should be part demands or used demands, but is not:\nRemoval context is           Database[demands, Rails For School Scheduling, allocations],\ndemands context is          [demands, Rails For School Scheduling] and\nused demands context is Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used].``\n* [ ] Imitate railed courses to teacher allocation solver from personal master thesis.\n   * [ ] Assign courses to rails.\n      * [x] Every course is currently on the same rail.\n      * [x] Every course has no allocated hours.\n      * [ ] The repair proposals does not generate only valid hour allocations.\n      * [x] The average course length of the generated supplies is not correct (half of target).\n   * [ ] Assign teachers to courses.\n      * [x] Only grouping by course is important.\n      * [x] Determine not allocated courses and their not used demands.\n      * [ ] Determine defying groups and their not used and used demands.\n      * [ ] Determine a representative allocation of defying groups and undo all allocations of defying groups.\n      * [x] Use free demands of the representative for the repair of each defying group.\n      * [x] Randomize each repair step.\n      * [x] Select only suitable teachers.\n      * [x] Repair all incorrect values and not just some by repair any constraint error and by always converting all groupings to groupings by course id.\n      * [ ] Deallocate all lines with a course id, that has an error, during each repair iteration step.\n      * [ ] Optionally deallocate all lines with a subject, that has an error, during each repair iteration step.\n      * [ ] Use unused demands.\n      * [ ] Randomization performance seems to be bad.\n   * [ ] Assign pupils to courses.\n* [ ] Implement constraint query system for tables and use it in constraint based repair. Online optimization would be needed for that.\n* [ ] Improve analysis by making it more table like and create guidelines for table (searchability and simplicity) versus tree (organization).\n* [ ] Add temporary storage project to private website.\n* [ ] Adjust teacher subject suitability and course subject in test data. Some course subjects may need to have a teacher for the subject adjustments.\n* [ ] Create a presentation for the problem.\n* [ ] Test all constraints.\n* [ ] Fix last element of solution paths in logging (i.e. `net/splitcells/gel/GelEnv/demands.allocations.allocations/`).","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1654196502,"metadata":{"github-id":"UCE_lAHOFCNQW84xHWf2zi7l6PA"},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n   - [ ] Use custom initializers for constraint based repair in order to improve results.\n   - [ ] Render performance data in Graph and monitor results,\nin order to get a felling, how much needs to be done and how much effect a single action had.\nDo this by reimplementing the old problem specific initializers.\n(Currently done via https://localhost:8444/net/splitcells/martins/avots/website/test.html)\n- [ ] Compare repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [x] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [x] Remove usage of Node logging interface. -\u003e I removed some Node usage and deprecated the interface instead.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way. -\u003e UiRouter can be used as an alternative Domsole.\n   - [x] Fix XML outpout for Domsole. -\u003e Will fix it, when it is used again or the code is cleaned up during maintenance.\n* [x] Allocations do not work for nested problems, because there is an equality problem. -\u003e Allocations had an inconsistent path.\n``Context of demand for removal should be part demands or used demands, but is not:\nRemoval context is           Database[demands, Rails For School Scheduling, allocations],\ndemands context is          [demands, Rails For School Scheduling] and\nused demands context is Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used].``\n* [ ] Imitate railed courses to teacher allocation solver from personal master thesis.\n   * [ ] Assign courses to rails.\n      * [x] Every course is currently on the same rail.\n      * [x] Every course has no allocated hours.\n      * [ ] The repair proposals does not generate only valid hour allocations. Maybe, because the split calculation does not consider already allocated slots of a course.\n      * [x] The average course length of the generated supplies is not correct (half of target).\n   * [ ] Assign teachers to courses.\n      * [x] Only grouping by course is important.\n      * [x] Determine not allocated courses and their not used demands.\n      * [ ] Determine defying groups and their not used and used demands.\n      * [ ] Determine a representative allocation of defying groups and undo all allocations of defying groups.\n      * [x] Use free demands of the representative for the repair of each defying group.\n      * [x] Randomize each repair step.\n      * [x] Select only suitable teachers.\n      * [x] Repair all incorrect values and not just some by repair any constraint error and by always converting all groupings to groupings by course id.\n      * [ ] Deallocate all lines with a course id, that has an error, during each repair iteration step.\n      * [ ] Optionally deallocate all lines with a subject, that has an error, during each repair iteration step.\n      * [ ] Use unused demands.\n      * [ ] Randomization performance seems to be bad.\n   * [ ] Assign pupils to courses.\n* [ ] Implement constraint query system for tables and use it in constraint based repair. Online optimization would be needed for that.\n* [ ] Improve analysis by making it more table like and create guidelines for table (searchability and simplicity) versus tree (organization).\n* [ ] Add temporary storage project to private website.\n* [ ] Adjust teacher subject suitability and course subject in test data. Some course subjects may need to have a teacher for the subject adjustments.\n* [ ] Create a presentation for the problem.\n* [ ] Test all constraints.\n* [ ] Fix last element of solution paths in logging (i.e. `net/splitcells/gel/GelEnv/demands.allocations.allocations/`).","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1654199737,"metadata":{"github-id":"UCE_lAHOFCNQW84xHWf2zi7miKA"},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n   - [ ] Use custom initializers for constraint based repair in order to improve results.\n   - [ ] Render performance data in Graph and monitor results,\nin order to get a felling, how much needs to be done and how much effect a single action had.\nDo this by reimplementing the old problem specific initializers.\n(Currently done via https://localhost:8444/net/splitcells/martins/avots/website/test.html)\n- [ ] Compare repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [x] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [x] Remove usage of Node logging interface. -\u003e I removed some Node usage and deprecated the interface instead.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way. -\u003e UiRouter can be used as an alternative Domsole.\n   - [x] Fix XML outpout for Domsole. -\u003e Will fix it, when it is used again or the code is cleaned up during maintenance.\n* [x] Allocations do not work for nested problems, because there is an equality problem. -\u003e Allocations had an inconsistent path.\n``Context of demand for removal should be part demands or used demands, but is not:\nRemoval context is           Database[demands, Rails For School Scheduling, allocations],\ndemands context is          [demands, Rails For School Scheduling] and\nused demands context is Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used].``\n* [ ] Imitate railed courses to teacher allocation solver from personal master thesis.\n   * [ ] Assign courses to rails.\n      * [x] Every course is currently on the same rail.\n      * [x] Every course has no allocated hours.\n      * [x] The repair proposals does not generate only valid hour allocations. Maybe, because the split calculation does not consider already allocated slots of a course. -\u003e This was caused by generating the demands incorrectly.\n      * [x] The average course length of the generated demands is not correct (half of target).\n      * [ ] Selecting element of a free course slot leads to an error, because there are fewer left than assumed.\n         * freeDemandGroups contains only demands, that are freed in the current step. Already free demands are ignored.\n         * solutionView still contains all demands, that are already select for repair and which will be deallocated.\n         * [ ] allocatedCourses needs therefore to be checked.\n         * [ ] chosenSplit should also consider the real number of demands of a course to be repaired.\n   * [ ] Assign teachers to courses.\n      * [x] Only grouping by course is important.\n      * [x] Determine not allocated courses and their not used demands.\n      * [ ] Determine defying groups and their not used and used demands.\n      * [ ] Determine a representative allocation of defying groups and undo all allocations of defying groups.\n      * [x] Use free demands of the representative for the repair of each defying group.\n      * [x] Randomize each repair step.\n      * [x] Select only suitable teachers.\n      * [x] Repair all incorrect values and not just some by repair any constraint error and by always converting all groupings to groupings by course id.\n      * [ ] Deallocate all lines with a course id, that has an error, during each repair iteration step.\n      * [ ] Optionally deallocate all lines with a subject, that has an error, during each repair iteration step.\n      * [ ] Use unused demands.\n      * [ ] Randomization performance seems to be bad.\n   * [ ] Assign pupils to courses.\n* [ ] Implement constraint query system for tables and use it in constraint based repair. Online optimization would be needed for that.\n* [ ] Improve analysis by making it more table like and create guidelines for table (searchability and simplicity) versus tree (organization).\n* [ ] Add temporary storage project to private website.\n* [ ] Adjust teacher subject suitability and course subject in test data. Some course subjects may need to have a teacher for the subject adjustments.\n* [ ] Create a presentation for the problem.\n* [ ] Test all constraints.\n* [ ] Fix last element of solution paths in logging (i.e. `net/splitcells/gel/GelEnv/demands.allocations.allocations/`).","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1654249971,"metadata":{"github-id":"UCE_lAHOFCNQW84xHWf2zi7trwQ"},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n   - [ ] Use custom initializers for constraint based repair in order to improve results.\n   - [ ] Render performance data in Graph and monitor results,\nin order to get a felling, how much needs to be done and how much effect a single action had.\nDo this by reimplementing the old problem specific initializers.\n(Currently done via https://localhost:8444/net/splitcells/martins/avots/website/test.html)\n- [ ] Compare repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [x] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [x] Remove usage of Node logging interface. -\u003e I removed some Node usage and deprecated the interface instead.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way. -\u003e UiRouter can be used as an alternative Domsole.\n   - [x] Fix XML outpout for Domsole. -\u003e Will fix it, when it is used again or the code is cleaned up during maintenance.\n* [x] Allocations do not work for nested problems, because there is an equality problem. -\u003e Allocations had an inconsistent path.\n``Context of demand for removal should be part demands or used demands, but is not:\nRemoval context is           Database[demands, Rails For School Scheduling, allocations],\ndemands context is          [demands, Rails For School Scheduling] and\nused demands context is Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used].``\n* [ ] Imitate railed courses to teacher allocation solver from personal master thesis.\n   * [ ] Assign courses to rails.\n      * [x] Every course is currently on the same rail.\n      * [x] Every course has no allocated hours.\n      * [x] The repair proposals does not generate only valid hour allocations. Maybe, because the split calculation does not consider already allocated slots of a course.\n      * [x] The average course length of the generated demands is not correct (half of target).\n      * [x] Selecting element of a free course slot leads to an error, because there are fewer left than assumed.\n         * freeDemandGroups contains only demands, that are freed in the current step. Already free demands are ignored.\n         * solutionView still uses all demands of freeDemandGroups.\n         * [x] allocatedCourses needs therefore to be checked.\n         * [x] chosenSplit should also consider the real number of demands of a course to be repaired.\n         * [x] freeSlots needs to be filled with pre optimize unused demands.\n         * [x] How is determined, which demand gets void rail? -\u003e via nonEmptySlotCount\n   * [ ] Assign teachers to courses.\n      * [x] Only grouping by course is important.\n      * [x] Determine not allocated courses and their not used demands.\n      * [ ] Determine defying groups and their not used and used demands.\n      * [ ] Determine a representative allocation of defying groups and undo all allocations of defying groups.\n      * [x] Use free demands of the representative for the repair of each defying group.\n      * [x] Randomize each repair step.\n      * [x] Select only suitable teachers.\n      * [x] Repair all incorrect values and not just some by repair any constraint error and by always converting all groupings to groupings by course id.\n      * [ ] Deallocate all lines with a course id, that has an error, during each repair iteration step.\n      * [ ] Optionally deallocate all lines with a subject, that has an error, during each repair iteration step.\n      * [ ] Use unused demands.\n      * [ ] Randomization performance seems to be bad.\n   * [ ] Assign pupils to courses.\n* [ ] Implement constraint query system for tables and use it in constraint based repair. Online optimization would be needed for that.\n* [ ] Improve analysis by making it more table like and create guidelines for table (searchability and simplicity) versus tree (organization).\n* [ ] Add temporary storage project to private website.\n* [ ] Adjust teacher subject suitability and course subject in test data. Some course subjects may need to have a teacher for the subject adjustments.\n* [ ] Create a presentation for the problem.\n* [ ] Test all constraints.\n* [ ] Fix last element of solution paths in logging (i.e. `net/splitcells/gel/GelEnv/demands.allocations.allocations/`).","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1654249976,"metadata":{"github-id":"UCE_lAHOFCNQW84xHWf2zi7trz8"},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n   - [ ] Use custom initializers for constraint based repair in order to improve results.\n   - [ ] Render performance data in Graph and monitor results,\nin order to get a felling, how much needs to be done and how much effect a single action had.\nDo this by reimplementing the old problem specific initializers.\n(Currently done via https://localhost:8444/net/splitcells/martins/avots/website/test.html)\n- [ ] Compare repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [x] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [x] Remove usage of Node logging interface. -\u003e I removed some Node usage and deprecated the interface instead.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way. -\u003e UiRouter can be used as an alternative Domsole.\n   - [x] Fix XML outpout for Domsole. -\u003e Will fix it, when it is used again or the code is cleaned up during maintenance.\n* [x] Allocations do not work for nested problems, because there is an equality problem. -\u003e Allocations had an inconsistent path.\n``Context of demand for removal should be part demands or used demands, but is not:\nRemoval context is           Database[demands, Rails For School Scheduling, allocations],\ndemands context is          [demands, Rails For School Scheduling] and\nused demands context is Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used].``\n* [ ] Imitate railed courses to teacher allocation solver from personal master thesis.\n   * [ ] Assign courses to rails.\n      * [x] Every course is currently on the same rail.\n      * [x] Every course has no allocated hours.\n      * [ ] The repair proposals does not generate only valid hour allocations. Maybe, because the split calculation does not consider already allocated slots of a course.\n      * [x] The average course length of the generated demands is not correct (half of target).\n      * [x] Selecting element of a free course slot leads to an error, because there are fewer left than assumed.\n         * freeDemandGroups contains only demands, that are freed in the current step. Already free demands are ignored.\n         * solutionView still uses all demands of freeDemandGroups.\n         * [x] allocatedCourses needs therefore to be checked.\n         * [x] chosenSplit should also consider the real number of demands of a course to be repaired.\n         * [x] freeSlots needs to be filled with pre optimize unused demands.\n         * [x] How is determined, which demand gets void rail? -\u003e via nonEmptySlotCount\n   * [ ] Assign teachers to courses.\n      * [x] Only grouping by course is important.\n      * [x] Determine not allocated courses and their not used demands.\n      * [ ] Determine defying groups and their not used and used demands.\n      * [ ] Determine a representative allocation of defying groups and undo all allocations of defying groups.\n      * [x] Use free demands of the representative for the repair of each defying group.\n      * [x] Randomize each repair step.\n      * [x] Select only suitable teachers.\n      * [x] Repair all incorrect values and not just some by repair any constraint error and by always converting all groupings to groupings by course id.\n      * [ ] Deallocate all lines with a course id, that has an error, during each repair iteration step.\n      * [ ] Optionally deallocate all lines with a subject, that has an error, during each repair iteration step.\n      * [ ] Use unused demands.\n      * [ ] Randomization performance seems to be bad.\n   * [ ] Assign pupils to courses.\n* [ ] Implement constraint query system for tables and use it in constraint based repair. Online optimization would be needed for that.\n* [ ] Improve analysis by making it more table like and create guidelines for table (searchability and simplicity) versus tree (organization).\n* [ ] Add temporary storage project to private website.\n* [ ] Adjust teacher subject suitability and course subject in test data. Some course subjects may need to have a teacher for the subject adjustments.\n* [ ] Create a presentation for the problem.\n* [ ] Test all constraints.\n* [ ] Fix last element of solution paths in logging (i.e. `net/splitcells/gel/GelEnv/demands.allocations.allocations/`).","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1654283460,"metadata":{"github-id":"UCE_lAHOFCNQW84xHWf2zi7z5HQ"},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n   - [ ] Use custom initializers for constraint based repair in order to improve results.\n   - [ ] Render performance data in Graph and monitor results,\nin order to get a felling, how much needs to be done and how much effect a single action had.\nDo this by reimplementing the old problem specific initializers.\n(Currently done via https://localhost:8444/net/splitcells/martins/avots/website/test.html)\n- [ ] Compare repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [x] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [x] Remove usage of Node logging interface. -\u003e I removed some Node usage and deprecated the interface instead.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way. -\u003e UiRouter can be used as an alternative Domsole.\n   - [x] Fix XML outpout for Domsole. -\u003e Will fix it, when it is used again or the code is cleaned up during maintenance.\n* [x] Allocations do not work for nested problems, because there is an equality problem. -\u003e Allocations had an inconsistent path.\n``Context of demand for removal should be part demands or used demands, but is not:\nRemoval context is           Database[demands, Rails For School Scheduling, allocations],\ndemands context is          [demands, Rails For School Scheduling] and\nused demands context is Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used].``\n* [ ] Imitate railed courses to teacher allocation solver from personal master thesis.\n   * [ ] Assign courses to rails.\n      * [x] Every course is currently on the same rail.\n      * [x] Every course has no allocated hours.\n      * [x] Completely free courses are ignored by constraint repair.\n         This happens when linear initialization is omitted or if repair reaches such state by accident.\n         * [x] The same demand is allocated multiple times in one optimization step.\n            * [x] freeSlots is determined incorrectly, because it assumes that demand grouping is always happaning along the course id.\n      * [x] The average course length of the generated demands is not correct (half of target).\n      * [x] Selecting element of a free course slot leads to an error, because there are fewer left than assumed.\n         * freeDemandGroups contains only demands, that are freed in the current step. Already free demands are ignored.\n         * solutionView still uses all demands of freeDemandGroups.\n         * [x] allocatedCourses needs therefore to be checked.\n         * [x] chosenSplit should also consider the real number of demands of a course to be repaired.\n         * [x] freeSlots needs to be filled with pre optimize unused demands.\n         * [x] How is determined, which demand gets void rail? -\u003e via nonEmptySlotCount\n   * [ ] Assign teachers to courses.\n      * [x] Only grouping by course is important.\n      * [x] Determine not allocated courses and their not used demands.\n      * [ ] Determine defying groups and their not used and used demands.\n      * [ ] Determine a representative allocation of defying groups and undo all allocations of defying groups.\n      * [x] Use free demands of the representative for the repair of each defying group.\n      * [x] Randomize each repair step.\n      * [x] Select only suitable teachers.\n      * [x] Repair all incorrect values and not just some by repair any constraint error and by always converting all groupings to groupings by course id.\n      * [ ] Deallocate all lines with a course id, that has an error, during each repair iteration step.\n      * [ ] Optionally deallocate all lines with a subject, that has an error, during each repair iteration step.\n      * [ ] Use unused demands.\n      * [ ] Randomization performance seems to be bad.\n   * [ ] Assign pupils to courses.\n* [ ] Implement constraint query system for tables and use it in constraint based repair. Online optimization would be needed for that.\n* [ ] Improve analysis by making it more table like and create guidelines for table (searchability and simplicity) versus tree (organization).\n* [ ] Add temporary storage project to private website.\n* [ ] Adjust teacher subject suitability and course subject in test data. Some course subjects may need to have a teacher for the subject adjustments.\n* [ ] Create a presentation for the problem.\n* [ ] Test all constraints.\n* [ ] Fix last element of solution paths in logging (i.e. `net/splitcells/gel/GelEnv/demands.allocations.allocations/`).","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1654286587,"metadata":{"github-id":"UCE_lAHOFCNQW84xHWf2zi70aHY"},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n   - [ ] Use custom initializers for constraint based repair in order to improve results.\n   - [ ] Render performance data in Graph and monitor results,\nin order to get a felling, how much needs to be done and how much effect a single action had.\nDo this by reimplementing the old problem specific initializers.\n(Currently done via https://localhost:8444/net/splitcells/martins/avots/website/test.html)\n- [ ] Compare repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [x] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [x] Remove usage of Node logging interface. -\u003e I removed some Node usage and deprecated the interface instead.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way. -\u003e UiRouter can be used as an alternative Domsole.\n   - [x] Fix XML outpout for Domsole. -\u003e Will fix it, when it is used again or the code is cleaned up during maintenance.\n* [x] Allocations do not work for nested problems, because there is an equality problem. -\u003e Allocations had an inconsistent path.\n``Context of demand for removal should be part demands or used demands, but is not:\nRemoval context is           Database[demands, Rails For School Scheduling, allocations],\ndemands context is          [demands, Rails For School Scheduling] and\nused demands context is Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used].``\n* [ ] Imitate railed courses to teacher allocation solver from personal master thesis.\n   * [ ] Assign courses to rails.\n      * [x] Every course is currently on the same rail.\n      * [x] Every course has no allocated hours.\n      * [x] Completely free courses are ignored by constraint repair.\n         This happens when linear initialization is omitted or if repair reaches such state by accident.\n         * [x] The same demand is allocated multiple times in one optimization step.\n            * [x] freeSlots is determined incorrectly, because it assumes that demand grouping is always happaning along the course id.\n      * [x] The average course length of the generated demands is not correct (half of target).\n      * [x] Selecting element of a free course slot leads to an error, because there are fewer left than assumed.\n         * freeDemandGroups contains only demands, that are freed in the current step. Already free demands are ignored.\n         * solutionView still uses all demands of freeDemandGroups.\n         * [x] allocatedCourses needs therefore to be checked.\n         * [x] chosenSplit should also consider the real number of demands of a course to be repaired.\n         * [x] freeSlots needs to be filled with pre optimize unused demands.\n         * [x] How is determined, which demand gets void rail? -\u003e via nonEmptySlotCount\n      * [ ] The allocated course hours is calculated incorrectly by the repair.\n      * [x] Create history report more searchable by LibreOffice.\n        Otherwise, the low searchability will always take a toll during history analysis.\n   * [ ] Assign teachers to courses.\n      * [x] Only grouping by course is important.\n      * [x] Determine not allocated courses and their not used demands.\n      * [ ] Determine defying groups and their not used and used demands.\n      * [ ] Determine a representative allocation of defying groups and undo all allocations of defying groups.\n      * [x] Use free demands of the representative for the repair of each defying group.\n      * [x] Randomize each repair step.\n      * [x] Select only suitable teachers.\n      * [x] Repair all incorrect values and not just some by repair any constraint error and by always converting all groupings to groupings by course id.\n      * [ ] Deallocate all lines with a course id, that has an error, during each repair iteration step.\n      * [ ] Optionally deallocate all lines with a subject, that has an error, during each repair iteration step.\n      * [ ] Use unused demands.\n      * [ ] Randomization performance seems to be bad.\n   * [ ] Assign pupils to courses.\n* [ ] Implement constraint query system for tables and use it in constraint based repair. Online optimization would be needed for that.\n* [ ] Improve analysis by making it more table like and create guidelines for table (searchability and simplicity) versus tree (organization).\n* [ ] Add temporary storage project to private website.\n* [ ] Adjust teacher subject suitability and course subject in test data. Some course subjects may need to have a teacher for the subject adjustments.\n* [ ] Create a presentation for the problem.\n* [ ] Test all constraints.\n* [ ] Fix last element of solution paths in logging (i.e. `net/splitcells/gel/GelEnv/demands.allocations.allocations/`).","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1654334706,"metadata":{"github-id":"UCE_lAHOFCNQW84xHWf2zi75Hao"},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n   - [ ] Use custom initializers for constraint based repair in order to improve results.\n   - [ ] Render performance data in Graph and monitor results,\nin order to get a felling, how much needs to be done and how much effect a single action had.\nDo this by reimplementing the old problem specific initializers.\n(Currently done via https://localhost:8444/net/splitcells/martins/avots/website/test.html)\n- [ ] Compare repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [x] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [x] Remove usage of Node logging interface. -\u003e I removed some Node usage and deprecated the interface instead.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way. -\u003e UiRouter can be used as an alternative Domsole.\n   - [x] Fix XML outpout for Domsole. -\u003e Will fix it, when it is used again or the code is cleaned up during maintenance.\n* [x] Allocations do not work for nested problems, because there is an equality problem. -\u003e Allocations had an inconsistent path.\n``Context of demand for removal should be part demands or used demands, but is not:\nRemoval context is           Database[demands, Rails For School Scheduling, allocations],\ndemands context is          [demands, Rails For School Scheduling] and\nused demands context is Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used].``\n* [ ] Imitate railed courses to teacher allocation solver from personal master thesis.\n   * [ ] Assign courses to rails.\n      * [x] Every course is currently on the same rail.\n      * [x] Every course has no allocated hours.\n      * [x] Completely free courses are ignored by constraint repair.\n         This happens when linear initialization is omitted or if repair reaches such state by accident.\n         * [x] The same demand is allocated multiple times in one optimization step.\n            * [x] freeSlots is determined incorrectly, because it assumes that demand grouping is always happaning along the course id.\n      * [x] The average course length of the generated demands is not correct (half of target).\n      * [x] Selecting element of a free course slot leads to an error, because there are fewer left than assumed.\n         * freeDemandGroups contains only demands, that are freed in the current step. Already free demands are ignored.\n         * solutionView still uses all demands of freeDemandGroups.\n         * [x] allocatedCourses needs therefore to be checked.\n         * [x] chosenSplit should also consider the real number of demands of a course to be repaired.\n         * [x] freeSlots needs to be filled with pre optimize unused demands.\n         * [x] How is determined, which demand gets void rail? -\u003e via nonEmptySlotCount\n      * [ ] The allocated course hours is calculated incorrectly by the repair.\n         * [ ] retainedAllocatedHours is calculated incorrectly as it does not substract allocated hourse which are removed in the current optimization step.\n      * [x] Create history report more searchable by LibreOffice.\n        Otherwise, the low searchability will always take a toll during history analysis.\n   * [ ] Assign teachers to courses.\n      * [x] Only grouping by course is important.\n      * [x] Determine not allocated courses and their not used demands.\n      * [ ] Determine defying groups and their not used and used demands.\n      * [ ] Determine a representative allocation of defying groups and undo all allocations of defying groups.\n      * [x] Use free demands of the representative for the repair of each defying group.\n      * [x] Randomize each repair step.\n      * [x] Select only suitable teachers.\n      * [x] Repair all incorrect values and not just some by repair any constraint error and by always converting all groupings to groupings by course id.\n      * [ ] Deallocate all lines with a course id, that has an error, during each repair iteration step.\n      * [ ] Optionally deallocate all lines with a subject, that has an error, during each repair iteration step.\n      * [ ] Use unused demands.\n      * [ ] Randomization performance seems to be bad.\n   * [ ] Assign pupils to courses.\n* [ ] Implement constraint query system for tables and use it in constraint based repair. Online optimization would be needed for that.\n* [ ] Improve analysis by making it more table like and create guidelines for table (searchability and simplicity) versus tree (organization).\n* [ ] Add temporary storage project to private website.\n* [ ] Adjust teacher subject suitability and course subject in test data. Some course subjects may need to have a teacher for the subject adjustments.\n* [ ] Create a presentation for the problem.\n* [ ] Test all constraints.\n* [ ] Fix last element of solution paths in logging (i.e. `net/splitcells/gel/GelEnv/demands.allocations.allocations/`).","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1654335719,"metadata":{"github-id":"UCE_lAHOFCNQW84xHWf2zi75MuY"},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n   - [ ] Use custom initializers for constraint based repair in order to improve results.\n   - [ ] Render performance data in Graph and monitor results,\nin order to get a felling, how much needs to be done and how much effect a single action had.\nDo this by reimplementing the old problem specific initializers.\n(Currently done via https://localhost:8444/net/splitcells/martins/avots/website/test.html)\n- [ ] Compare repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [x] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [x] Remove usage of Node logging interface. -\u003e I removed some Node usage and deprecated the interface instead.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way. -\u003e UiRouter can be used as an alternative Domsole.\n   - [x] Fix XML outpout for Domsole. -\u003e Will fix it, when it is used again or the code is cleaned up during maintenance.\n* [x] Allocations do not work for nested problems, because there is an equality problem. -\u003e Allocations had an inconsistent path.\n``Context of demand for removal should be part demands or used demands, but is not:\nRemoval context is           Database[demands, Rails For School Scheduling, allocations],\ndemands context is          [demands, Rails For School Scheduling] and\nused demands context is Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used].``\n* [ ] Imitate railed courses to teacher allocation solver from personal master thesis.\n   * [ ] Assign courses to rails.\n      * [x] Every course is currently on the same rail.\n      * [x] Every course has no allocated hours.\n      * [x] Completely free courses are ignored by constraint repair.\n         This happens when linear initialization is omitted or if repair reaches such state by accident.\n         * [x] The same demand is allocated multiple times in one optimization step.\n            * [x] freeSlots is determined incorrectly, because it assumes that demand grouping is always happaning along the course id.\n      * [x] The average course length of the generated demands is not correct (half of target).\n      * [x] Selecting element of a free course slot leads to an error, because there are fewer left than assumed.\n         * freeDemandGroups contains only demands, that are freed in the current step. Already free demands are ignored.\n         * solutionView still uses all demands of freeDemandGroups.\n         * [x] allocatedCourses needs therefore to be checked.\n         * [x] chosenSplit should also consider the real number of demands of a course to be repaired.\n         * [x] freeSlots needs to be filled with pre optimize unused demands.\n         * [x] How is determined, which demand gets void rail? -\u003e via nonEmptySlotCount\n      * [ ] The allocated course hours is calculated incorrectly by the repair.\n         * [ ] retainedAllocatedHours is calculated incorrectly as it does not substract allocated hourse which are removed in the current optimization step.\n         * [ ] There seems to be a problem in the understanding of index relations between allocations, free demands and used demands.\n      * [x] Create history report more searchable by LibreOffice.\n        Otherwise, the low searchability will always take a toll during history analysis.\n   * [ ] Assign teachers to courses.\n      * [x] Only grouping by course is important.\n      * [x] Determine not allocated courses and their not used demands.\n      * [ ] Determine defying groups and their not used and used demands.\n      * [ ] Determine a representative allocation of defying groups and undo all allocations of defying groups.\n      * [x] Use free demands of the representative for the repair of each defying group.\n      * [x] Randomize each repair step.\n      * [x] Select only suitable teachers.\n      * [x] Repair all incorrect values and not just some by repair any constraint error and by always converting all groupings to groupings by course id.\n      * [ ] Deallocate all lines with a course id, that has an error, during each repair iteration step.\n      * [ ] Optionally deallocate all lines with a subject, that has an error, during each repair iteration step.\n      * [ ] Use unused demands.\n      * [ ] Randomization performance seems to be bad.\n   * [ ] Assign pupils to courses.\n* [ ] Implement constraint query system for tables and use it in constraint based repair. Online optimization would be needed for that.\n* [ ] Improve analysis by making it more table like and create guidelines for table (searchability and simplicity) versus tree (organization).\n* [ ] Add temporary storage project to private website.\n* [ ] Adjust teacher subject suitability and course subject in test data. Some course subjects may need to have a teacher for the subject adjustments.\n* [ ] Create a presentation for the problem.\n* [ ] Test all constraints.\n* [ ] Fix last element of solution paths in logging (i.e. `net/splitcells/gel/GelEnv/demands.allocations.allocations/`).","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1654551446,"metadata":{"github-id":"UCE_lAHOFCNQW84xHWf2zi8N7iY"},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n   - [ ] Use custom initializers for constraint based repair in order to improve results.\n   - [ ] Render performance data in Graph and monitor results,\nin order to get a felling, how much needs to be done and how much effect a single action had.\nDo this by reimplementing the old problem specific initializers.\n(Currently done via https://localhost:8444/net/splitcells/martins/avots/website/test.html)\n- [ ] Compare repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [x] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [x] Remove usage of Node logging interface. -\u003e I removed some Node usage and deprecated the interface instead.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way. -\u003e UiRouter can be used as an alternative Domsole.\n   - [x] Fix XML outpout for Domsole. -\u003e Will fix it, when it is used again or the code is cleaned up during maintenance.\n* [x] Allocations do not work for nested problems, because there is an equality problem. -\u003e Allocations had an inconsistent path.\n``Context of demand for removal should be part demands or used demands, but is not:\nRemoval context is           Database[demands, Rails For School Scheduling, allocations],\ndemands context is          [demands, Rails For School Scheduling] and\nused demands context is Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used].``\n* [ ] Imitate railed courses to teacher allocation solver from personal master thesis.\n   * [ ] Assign courses to rails.\n      * [x] Every course is currently on the same rail.\n      * [x] Every course has no allocated hours.\n      * [x] Completely free courses are ignored by constraint repair.\n         This happens when linear initialization is omitted or if repair reaches such state by accident.\n         * [x] The same demand is allocated multiple times in one optimization step.\n            * [x] freeSlots is determined incorrectly, because it assumes that demand grouping is always happaning along the course id.\n      * [x] The average course length of the generated demands is not correct (half of target).\n      * [x] Selecting element of a free course slot leads to an error, because there are fewer left than assumed.\n         * freeDemandGroups contains only demands, that are freed in the current step. Already free demands are ignored.\n         * solutionView still uses all demands of freeDemandGroups.\n         * [x] allocatedCourses needs therefore to be checked.\n         * [x] chosenSplit should also consider the real number of demands of a course to be repaired.\n         * [x] freeSlots needs to be filled with pre optimize unused demands.\n         * [x] How is determined, which demand gets void rail? -\u003e via nonEmptySlotCount\n      * [ ] The allocated course hours is calculated incorrectly by the repair.\n         * [ ] retainedAllocatedHours is calculated incorrectly as it does not substract allocated hourse which are removed in the current optimization step.\n         * [x] There seems to be a problem in the understanding of index relations between allocations, free demands and used demands.\n      * [x] Create history report more searchable by LibreOffice.\n        Otherwise, the low searchability will always take a toll during history analysis.\n   * [ ] Assign teachers to courses.\n      * [x] Only grouping by course is important.\n      * [x] Determine not allocated courses and their not used demands.\n      * [ ] Determine defying groups and their not used and used demands.\n      * [ ] Determine a representative allocation of defying groups and undo all allocations of defying groups.\n      * [x] Use free demands of the representative for the repair of each defying group.\n      * [x] Randomize each repair step.\n      * [x] Select only suitable teachers.\n      * [x] Repair all incorrect values and not just some by repair any constraint error and by always converting all groupings to groupings by course id.\n      * [ ] Deallocate all lines with a course id, that has an error, during each repair iteration step.\n      * [ ] Optionally deallocate all lines with a subject, that has an error, during each repair iteration step.\n      * [ ] Use unused demands.\n      * [ ] Randomization performance seems to be bad.\n   * [ ] Assign pupils to courses.\n* [ ] Implement constraint query system for tables and use it in constraint based repair. Online optimization would be needed for that.\n* [ ] Improve analysis by making it more table like and create guidelines for table (searchability and simplicity) versus tree (organization).\n* [ ] Add temporary storage project to private website.\n* [ ] Adjust teacher subject suitability and course subject in test data. Some course subjects may need to have a teacher for the subject adjustments.\n* [ ] Create a presentation for the problem.\n* [ ] Test all constraints.\n* [ ] Fix last element of solution paths in logging (i.e. `net/splitcells/gel/GelEnv/demands.allocations.allocations/`).","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1654551466,"metadata":{"github-id":"UCE_lAHOFCNQW84xHWf2zi8N7u4"},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n   - [ ] Use custom initializers for constraint based repair in order to improve results.\n   - [ ] Render performance data in Graph and monitor results,\nin order to get a felling, how much needs to be done and how much effect a single action had.\nDo this by reimplementing the old problem specific initializers.\n(Currently done via https://localhost:8444/net/splitcells/martins/avots/website/test.html)\n- [ ] Compare repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [x] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [x] Remove usage of Node logging interface. -\u003e I removed some Node usage and deprecated the interface instead.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way. -\u003e UiRouter can be used as an alternative Domsole.\n   - [x] Fix XML outpout for Domsole. -\u003e Will fix it, when it is used again or the code is cleaned up during maintenance.\n* [x] Allocations do not work for nested problems, because there is an equality problem. -\u003e Allocations had an inconsistent path.\n``Context of demand for removal should be part demands or used demands, but is not:\nRemoval context is           Database[demands, Rails For School Scheduling, allocations],\ndemands context is          [demands, Rails For School Scheduling] and\nused demands context is Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used].``\n* [ ] Imitate railed courses to teacher allocation solver from personal master thesis.\n   * [ ] Assign courses to rails.\n      * [x] Every course is currently on the same rail.\n      * [x] Every course has no allocated hours.\n      * [x] Completely free courses are ignored by constraint repair.\n         This happens when linear initialization is omitted or if repair reaches such state by accident.\n         * [x] The same demand is allocated multiple times in one optimization step.\n            * [x] freeSlots is determined incorrectly, because it assumes that demand grouping is always happaning along the course id.\n      * [x] The average course length of the generated demands is not correct (half of target).\n      * [x] Selecting element of a free course slot leads to an error, because there are fewer left than assumed.\n         * freeDemandGroups contains only demands, that are freed in the current step. Already free demands are ignored.\n         * solutionView still uses all demands of freeDemandGroups.\n         * [x] allocatedCourses needs therefore to be checked.\n         * [x] chosenSplit should also consider the real number of demands of a course to be repaired.\n         * [x] freeSlots needs to be filled with pre optimize unused demands.\n         * [x] How is determined, which demand gets void rail? -\u003e via nonEmptySlotCount\n      * [ ] The allocated course hours is calculated incorrectly by the repair.\n         * [ ] retainedAllocatedHours is calculated incorrectly as it does not substract allocated hourse which are removed in the current optimization step.\n         * [x] There seems to be a problem in the understanding of index relations between allocations, free demands and used demands. -\u003e This was documented.\n      * [x] Create history report more searchable by LibreOffice.\n        Otherwise, the low searchability will always take a toll during history analysis.\n   * [ ] Assign teachers to courses.\n      * [x] Only grouping by course is important.\n      * [x] Determine not allocated courses and their not used demands.\n      * [ ] Determine defying groups and their not used and used demands.\n      * [ ] Determine a representative allocation of defying groups and undo all allocations of defying groups.\n      * [x] Use free demands of the representative for the repair of each defying group.\n      * [x] Randomize each repair step.\n      * [x] Select only suitable teachers.\n      * [x] Repair all incorrect values and not just some by repair any constraint error and by always converting all groupings to groupings by course id.\n      * [ ] Deallocate all lines with a course id, that has an error, during each repair iteration step.\n      * [ ] Optionally deallocate all lines with a subject, that has an error, during each repair iteration step.\n      * [ ] Use unused demands.\n      * [ ] Randomization performance seems to be bad.\n   * [ ] Assign pupils to courses.\n* [ ] Implement constraint query system for tables and use it in constraint based repair. Online optimization would be needed for that.\n* [ ] Improve analysis by making it more table like and create guidelines for table (searchability and simplicity) versus tree (organization).\n* [ ] Add temporary storage project to private website.\n* [ ] Adjust teacher subject suitability and course subject in test data. Some course subjects may need to have a teacher for the subject adjustments.\n* [ ] Create a presentation for the problem.\n* [ ] Test all constraints.\n* [ ] Fix last element of solution paths in logging (i.e. `net/splitcells/gel/GelEnv/demands.allocations.allocations/`).","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1654551474,"metadata":{"github-id":"UCE_lAHOFCNQW84xHWf2zi8N71s"},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n   - [ ] Use custom initializers for constraint based repair in order to improve results.\n   - [ ] Render performance data in Graph and monitor results,\nin order to get a felling, how much needs to be done and how much effect a single action had.\nDo this by reimplementing the old problem specific initializers.\n(Currently done via https://localhost:8444/net/splitcells/martins/avots/website/test.html)\n- [ ] Compare repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [x] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [x] Remove usage of Node logging interface. -\u003e I removed some Node usage and deprecated the interface instead.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way. -\u003e UiRouter can be used as an alternative Domsole.\n   - [x] Fix XML outpout for Domsole. -\u003e Will fix it, when it is used again or the code is cleaned up during maintenance.\n* [x] Allocations do not work for nested problems, because there is an equality problem. -\u003e Allocations had an inconsistent path.\n``Context of demand for removal should be part demands or used demands, but is not:\nRemoval context is           Database[demands, Rails For School Scheduling, allocations],\ndemands context is          [demands, Rails For School Scheduling] and\nused demands context is Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used].``\n* [ ] Imitate railed courses to teacher allocation solver from personal master thesis.\n   * [ ] Assign courses to rails.\n      * [x] Every course is currently on the same rail.\n      * [x] Every course has no allocated hours.\n      * [x] Completely free courses are ignored by constraint repair.\n         This happens when linear initialization is omitted or if repair reaches such state by accident.\n         * [x] The same demand is allocated multiple times in one optimization step.\n            * [x] freeSlots is determined incorrectly, because it assumes that demand grouping is always happaning along the course id.\n      * [x] The average course length of the generated demands is not correct (half of target).\n      * [x] Selecting element of a free course slot leads to an error, because there are fewer left than assumed.\n         * freeDemandGroups contains only demands, that are freed in the current step. Already free demands are ignored.\n         * solutionView still uses all demands of freeDemandGroups.\n         * [x] allocatedCourses needs therefore to be checked.\n         * [x] chosenSplit should also consider the real number of demands of a course to be repaired.\n         * [x] freeSlots needs to be filled with pre optimize unused demands.\n         * [x] How is determined, which demand gets void rail? -\u003e via nonEmptySlotCount\n      * [ ] The allocated course hours is calculated incorrectly by the repair.\n         * [ ] retainedAllocatedHours is calculated incorrectly as it does not substract allocated hourse which are removed in the current optimization step.\n         * [x] There seems to be a problem in the understanding of index relations between allocations, free demands and used demands. -\u003e This is now documented.\n      * [x] Create history report more searchable by LibreOffice.\n        Otherwise, the low searchability will always take a toll during history analysis.\n   * [ ] Assign teachers to courses.\n      * [x] Only grouping by course is important.\n      * [x] Determine not allocated courses and their not used demands.\n      * [ ] Determine defying groups and their not used and used demands.\n      * [ ] Determine a representative allocation of defying groups and undo all allocations of defying groups.\n      * [x] Use free demands of the representative for the repair of each defying group.\n      * [x] Randomize each repair step.\n      * [x] Select only suitable teachers.\n      * [x] Repair all incorrect values and not just some by repair any constraint error and by always converting all groupings to groupings by course id.\n      * [ ] Deallocate all lines with a course id, that has an error, during each repair iteration step.\n      * [ ] Optionally deallocate all lines with a subject, that has an error, during each repair iteration step.\n      * [ ] Use unused demands.\n      * [ ] Randomization performance seems to be bad.\n   * [ ] Assign pupils to courses.\n* [ ] Implement constraint query system for tables and use it in constraint based repair. Online optimization would be needed for that.\n* [ ] Improve analysis by making it more table like and create guidelines for table (searchability and simplicity) versus tree (organization).\n* [ ] Add temporary storage project to private website.\n* [ ] Adjust teacher subject suitability and course subject in test data. Some course subjects may need to have a teacher for the subject adjustments.\n* [ ] Create a presentation for the problem.\n* [ ] Test all constraints.\n* [ ] Fix last element of solution paths in logging (i.e. `net/splitcells/gel/GelEnv/demands.allocations.allocations/`).","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1654552891,"metadata":{"github-id":"UCE_lAHOFCNQW84xHWf2zi8OKv8"},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n   - [ ] Use custom initializers for constraint based repair in order to improve results.\n   - [ ] Render performance data in Graph and monitor results,\nin order to get a felling, how much needs to be done and how much effect a single action had.\nDo this by reimplementing the old problem specific initializers.\n(Currently done via https://localhost:8444/net/splitcells/martins/avots/website/test.html)\n- [ ] Compare repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [x] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [x] Remove usage of Node logging interface. -\u003e I removed some Node usage and deprecated the interface instead.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way. -\u003e UiRouter can be used as an alternative Domsole.\n   - [x] Fix XML outpout for Domsole. -\u003e Will fix it, when it is used again or the code is cleaned up during maintenance.\n* [x] Allocations do not work for nested problems, because there is an equality problem. -\u003e Allocations had an inconsistent path.\n``Context of demand for removal should be part demands or used demands, but is not:\nRemoval context is           Database[demands, Rails For School Scheduling, allocations],\ndemands context is          [demands, Rails For School Scheduling] and\nused demands context is Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used].``\n* [ ] Imitate railed courses to teacher allocation solver from personal master thesis.\n   * [ ] Assign courses to rails.\n      * [x] Every course is currently on the same rail.\n      * [x] Every course has no allocated hours.\n      * [x] Completely free courses are ignored by constraint repair.\n         This happens when linear initialization is omitted or if repair reaches such state by accident.\n         * [x] The same demand is allocated multiple times in one optimization step.\n            * [x] freeSlots is determined incorrectly, because it assumes that demand grouping is always happaning along the course id.\n      * [x] The average course length of the generated demands is not correct (half of target).\n      * [x] Selecting element of a free course slot leads to an error, because there are fewer left than assumed.\n         * freeDemandGroups contains only demands, that are freed in the current step. Already free demands are ignored.\n         * solutionView still uses all demands of freeDemandGroups.\n         * [x] allocatedCourses needs therefore to be checked.\n         * [x] chosenSplit should also consider the real number of demands of a course to be repaired.\n         * [x] freeSlots needs to be filled with pre optimize unused demands.\n         * [x] How is determined, which demand gets void rail? -\u003e via nonEmptySlotCount\n      * [ ] The allocated course hours is calculated incorrectly by the repair.\n         * [x] retainedAllocatedHours is calculated incorrectly as it does not substract allocated hourse which are removed in the current optimization step.\n         * [x] There seems to be a problem in the understanding of index relations between allocations, free demands and used demands. -\u003e This is now documented.\n      * [x] Create history report more searchable by LibreOffice.\n        Otherwise, the low searchability will always take a toll during history analysis.\n   * [ ] Assign teachers to courses.\n      * [x] Only grouping by course is important.\n      * [x] Determine not allocated courses and their not used demands.\n      * [ ] Determine defying groups and their not used and used demands.\n      * [ ] Determine a representative allocation of defying groups and undo all allocations of defying groups.\n      * [x] Use free demands of the representative for the repair of each defying group.\n      * [x] Randomize each repair step.\n      * [x] Select only suitable teachers.\n      * [x] Repair all incorrect values and not just some by repair any constraint error and by always converting all groupings to groupings by course id.\n      * [ ] Deallocate all lines with a course id, that has an error, during each repair iteration step.\n      * [ ] Optionally deallocate all lines with a subject, that has an error, during each repair iteration step.\n      * [ ] Use unused demands.\n      * [ ] Randomization performance seems to be bad.\n   * [ ] Assign pupils to courses.\n* [ ] Implement constraint query system for tables and use it in constraint based repair. Online optimization would be needed for that.\n* [ ] Improve analysis by making it more table like and create guidelines for table (searchability and simplicity) versus tree (organization).\n* [ ] Add temporary storage project to private website.\n* [ ] Adjust teacher subject suitability and course subject in test data. Some course subjects may need to have a teacher for the subject adjustments.\n* [ ] Create a presentation for the problem.\n* [ ] Test all constraints.\n* [ ] Fix last element of solution paths in logging (i.e. `net/splitcells/gel/GelEnv/demands.allocations.allocations/`).","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1654552895,"metadata":{"github-id":"UCE_lAHOFCNQW84xHWf2zi8OKzQ"},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n   - [ ] Use custom initializers for constraint based repair in order to improve results.\n   - [ ] Render performance data in Graph and monitor results,\nin order to get a felling, how much needs to be done and how much effect a single action had.\nDo this by reimplementing the old problem specific initializers.\n(Currently done via https://localhost:8444/net/splitcells/martins/avots/website/test.html)\n- [ ] Compare repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [x] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [x] Remove usage of Node logging interface. -\u003e I removed some Node usage and deprecated the interface instead.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way. -\u003e UiRouter can be used as an alternative Domsole.\n   - [x] Fix XML outpout for Domsole. -\u003e Will fix it, when it is used again or the code is cleaned up during maintenance.\n* [x] Allocations do not work for nested problems, because there is an equality problem. -\u003e Allocations had an inconsistent path.\n``Context of demand for removal should be part demands or used demands, but is not:\nRemoval context is           Database[demands, Rails For School Scheduling, allocations],\ndemands context is          [demands, Rails For School Scheduling] and\nused demands context is Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used].``\n* [ ] Imitate railed courses to teacher allocation solver from personal master thesis.\n   * [ ] Assign courses to rails.\n      * [x] Every course is currently on the same rail.\n      * [x] Every course has no allocated hours.\n      * [x] Completely free courses are ignored by constraint repair.\n         This happens when linear initialization is omitted or if repair reaches such state by accident.\n         * [x] The same demand is allocated multiple times in one optimization step.\n            * [x] freeSlots is determined incorrectly, because it assumes that demand grouping is always happaning along the course id.\n      * [x] The average course length of the generated demands is not correct (half of target).\n      * [x] Selecting element of a free course slot leads to an error, because there are fewer left than assumed.\n         * freeDemandGroups contains only demands, that are freed in the current step. Already free demands are ignored.\n         * solutionView still uses all demands of freeDemandGroups.\n         * [x] allocatedCourses needs therefore to be checked.\n         * [x] chosenSplit should also consider the real number of demands of a course to be repaired.\n         * [x] freeSlots needs to be filled with pre optimize unused demands.\n         * [x] How is determined, which demand gets void rail? -\u003e via nonEmptySlotCount\n      * [x] The allocated course hours is calculated incorrectly by the repair.\n         * [x] retainedAllocatedHours is calculated incorrectly as it does not substract allocated hourse which are removed in the current optimization step.\n         * [x] There seems to be a problem in the understanding of index relations between allocations, free demands and used demands. -\u003e This is now documented.\n      * [x] Create history report more searchable by LibreOffice.\n        Otherwise, the low searchability will always take a toll during history analysis.\n   * [ ] Assign teachers to courses.\n      * [x] Only grouping by course is important.\n      * [x] Determine not allocated courses and their not used demands.\n      * [ ] Determine defying groups and their not used and used demands.\n      * [ ] Determine a representative allocation of defying groups and undo all allocations of defying groups.\n      * [x] Use free demands of the representative for the repair of each defying group.\n      * [x] Randomize each repair step.\n      * [x] Select only suitable teachers.\n      * [x] Repair all incorrect values and not just some by repair any constraint error and by always converting all groupings to groupings by course id.\n      * [ ] Deallocate all lines with a course id, that has an error, during each repair iteration step.\n      * [ ] Optionally deallocate all lines with a subject, that has an error, during each repair iteration step.\n      * [ ] Use unused demands.\n      * [ ] Randomization performance seems to be bad.\n   * [ ] Assign pupils to courses.\n* [ ] Implement constraint query system for tables and use it in constraint based repair. Online optimization would be needed for that.\n* [ ] Improve analysis by making it more table like and create guidelines for table (searchability and simplicity) versus tree (organization).\n* [ ] Add temporary storage project to private website.\n* [ ] Adjust teacher subject suitability and course subject in test data. Some course subjects may need to have a teacher for the subject adjustments.\n* [ ] Create a presentation for the problem.\n* [ ] Test all constraints.\n* [ ] Fix last element of solution paths in logging (i.e. `net/splitcells/gel/GelEnv/demands.allocations.allocations/`).","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1654552922,"metadata":{"github-id":"UCE_lAHOFCNQW84xHWf2zi8OLLw"},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n   - [ ] Use custom initializers for constraint based repair in order to improve results.\n   - [ ] Render performance data in Graph and monitor results,\nin order to get a felling, how much needs to be done and how much effect a single action had.\nDo this by reimplementing the old problem specific initializers.\n(Currently done via https://localhost:8444/net/splitcells/martins/avots/website/test.html)\n- [ ] Compare repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [x] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [x] Remove usage of Node logging interface. -\u003e I removed some Node usage and deprecated the interface instead.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way. -\u003e UiRouter can be used as an alternative Domsole.\n   - [x] Fix XML outpout for Domsole. -\u003e Will fix it, when it is used again or the code is cleaned up during maintenance.\n* [x] Allocations do not work for nested problems, because there is an equality problem. -\u003e Allocations had an inconsistent path.\n``Context of demand for removal should be part demands or used demands, but is not:\nRemoval context is           Database[demands, Rails For School Scheduling, allocations],\ndemands context is          [demands, Rails For School Scheduling] and\nused demands context is Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used].``\n* [ ] Imitate railed courses to teacher allocation solver from personal master thesis.\n   * [ ] Assign courses to rails.\n      * [x] Every course is currently on the same rail.\n      * [x] Every course has no allocated hours.\n      * [x] Completely free courses are ignored by constraint repair.\n         This happens when linear initialization is omitted or if repair reaches such state by accident.\n         * [x] The same demand is allocated multiple times in one optimization step.\n            * [x] freeSlots is determined incorrectly, because it assumes that demand grouping is always happaning along the course id.\n      * [x] The average course length of the generated demands is not correct (half of target).\n      * [x] Selecting element of a free course slot leads to an error, because there are fewer left than assumed.\n         * freeDemandGroups contains only demands, that are freed in the current step. Already free demands are ignored.\n         * solutionView still uses all demands of freeDemandGroups.\n         * [x] allocatedCourses needs therefore to be checked.\n         * [x] chosenSplit should also consider the real number of demands of a course to be repaired.\n         * [x] freeSlots needs to be filled with pre optimize unused demands.\n         * [x] How is determined, which demand gets void rail? -\u003e via nonEmptySlotCount\n      * [x] The allocated course hours is calculated incorrectly by the repair.\n         * [x] retainedAllocatedHours is calculated incorrectly as it does not substract allocated hourse which are removed in the current optimization step.\n         * [x] There seems to be a problem in the understanding of index relations between allocations, free demands and used demands. -\u003e This is now documented.\n      * [x] Create history report more searchable by LibreOffice.\n        Otherwise, the low searchability will always take a toll during history analysis.\n      * [ ] Courses in one rail have not always the same length.\n   * [ ] Assign teachers to courses.\n      * [x] Only grouping by course is important.\n      * [x] Determine not allocated courses and their not used demands.\n      * [ ] Determine defying groups and their not used and used demands.\n      * [ ] Determine a representative allocation of defying groups and undo all allocations of defying groups.\n      * [x] Use free demands of the representative for the repair of each defying group.\n      * [x] Randomize each repair step.\n      * [x] Select only suitable teachers.\n      * [x] Repair all incorrect values and not just some by repair any constraint error and by always converting all groupings to groupings by course id.\n      * [ ] Deallocate all lines with a course id, that has an error, during each repair iteration step.\n      * [ ] Optionally deallocate all lines with a subject, that has an error, during each repair iteration step.\n      * [ ] Use unused demands.\n      * [ ] Randomization performance seems to be bad.\n   * [ ] Assign pupils to courses.\n* [ ] Implement constraint query system for tables and use it in constraint based repair. Online optimization would be needed for that.\n* [ ] Improve analysis by making it more table like and create guidelines for table (searchability and simplicity) versus tree (organization).\n* [ ] Add temporary storage project to private website.\n* [ ] Adjust teacher subject suitability and course subject in test data. Some course subjects may need to have a teacher for the subject adjustments.\n* [ ] Create a presentation for the problem.\n* [ ] Test all constraints.\n* [ ] Fix last element of solution paths in logging (i.e. `net/splitcells/gel/GelEnv/demands.allocations.allocations/`).","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1654636604,"metadata":{"github-id":"UCE_lAHOFCNQW84xHWf2zi8fF30"},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n   - [ ] Use custom initializers for constraint based repair in order to improve results.\n   - [ ] Render performance data in Graph and monitor results,\nin order to get a felling, how much needs to be done and how much effect a single action had.\nDo this by reimplementing the old problem specific initializers.\n(Currently done via https://localhost:8444/net/splitcells/martins/avots/website/test.html)\n- [ ] Compare repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [x] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [x] Remove usage of Node logging interface. -\u003e I removed some Node usage and deprecated the interface instead.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way. -\u003e UiRouter can be used as an alternative Domsole.\n   - [x] Fix XML outpout for Domsole. -\u003e Will fix it, when it is used again or the code is cleaned up during maintenance.\n* [x] Allocations do not work for nested problems, because there is an equality problem. -\u003e Allocations had an inconsistent path.\n``Context of demand for removal should be part demands or used demands, but is not:\nRemoval context is           Database[demands, Rails For School Scheduling, allocations],\ndemands context is          [demands, Rails For School Scheduling] and\nused demands context is Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used].``\n* [ ] Imitate railed courses to teacher allocation solver from personal master thesis.\n   * [ ] Assign courses to rails.\n      * [x] Every course is currently on the same rail.\n      * [x] Every course has no allocated hours.\n      * [x] Completely free courses are ignored by constraint repair.\n         This happens when linear initialization is omitted or if repair reaches such state by accident.\n         * [x] The same demand is allocated multiple times in one optimization step.\n            * [x] freeSlots is determined incorrectly, because it assumes that demand grouping is always happaning along the course id.\n      * [x] The average course length of the generated demands is not correct (half of target).\n      * [x] Selecting element of a free course slot leads to an error, because there are fewer left than assumed.\n         * freeDemandGroups contains only demands, that are freed in the current step. Already free demands are ignored.\n         * solutionView still uses all demands of freeDemandGroups.\n         * [x] allocatedCourses needs therefore to be checked.\n         * [x] chosenSplit should also consider the real number of demands of a course to be repaired.\n         * [x] freeSlots needs to be filled with pre optimize unused demands.\n         * [x] How is determined, which demand gets void rail? -\u003e via nonEmptySlotCount\n      * [x] The allocated course hours is calculated incorrectly by the repair.\n         * [x] retainedAllocatedHours is calculated incorrectly as it does not substract allocated hourse which are removed in the current optimization step.\n         * [x] There seems to be a problem in the understanding of index relations between allocations, free demands and used demands. -\u003e This is now documented.\n      * [x] Create history report more searchable by LibreOffice.\n        Otherwise, the low searchability will always take a toll during history analysis.\n      * [ ] Courses in one rail have not always the same length.\n   * [ ] Assign teachers to courses.\n      * [x] Only grouping by course is important.\n      * [x] Determine not allocated courses and their not used demands.\n      * [ ] Determine defying groups and their not used and used demands.\n      * [ ] Determine a representative allocation of defying groups and undo all allocations of defying groups.\n      * [x] Use free demands of the representative for the repair of each defying group.\n      * [x] Randomize each repair step.\n      * [x] Select only suitable teachers.\n      * [x] Repair all incorrect values and not just some by repair any constraint error and by always converting all groupings to groupings by course id.\n      * [ ] Deallocate all lines with a course id, that has an error, during each repair iteration step.\n      * [ ] Optionally deallocate all lines with a subject, that has an error, during each repair iteration step.\n      * [ ] Use unused demands.\n      * [ ] Randomization performance seems to be bad.\n   * [ ] Assign pupils to courses.\n* [ ] Implement constraint query system for tables and use it in constraint based repair. Online optimization would be needed for that.\n* [ ] Improve analysis by making it more table like and create guidelines for table (searchability and simplicity) versus tree (organization).\n* [ ] Add temporary storage project to private website.\n* [ ] Adjust teacher subject suitability and course subject in test data. Some course subjects may need to have a teacher for the subject adjustments.\n* [ ] Create a presentation for the problem.\n* [ ] Test all constraints.\n* [ ] Fix last element of solution paths in logging (i.e. `net/splitcells/gel/GelEnv/demands.allocations.allocations/`).\n* [ ] Alternative to GroupSelector interface: select constraint nodes via Query interface.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1654638363,"metadata":{"github-id":"UCE_lAHOFCNQW84xHWf2zi8fc3c"},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n   - [ ] Use custom initializers for constraint based repair in order to improve results.\n   - [ ] Render performance data in Graph and monitor results,\nin order to get a felling, how much needs to be done and how much effect a single action had.\nDo this by reimplementing the old problem specific initializers.\n(Currently done via https://localhost:8444/net/splitcells/martins/avots/website/test.html)\n- [ ] Compare repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [x] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [x] Remove usage of Node logging interface. -\u003e I removed some Node usage and deprecated the interface instead.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way. -\u003e UiRouter can be used as an alternative Domsole.\n   - [x] Fix XML outpout for Domsole. -\u003e Will fix it, when it is used again or the code is cleaned up during maintenance.\n* [x] Allocations do not work for nested problems, because there is an equality problem. -\u003e Allocations had an inconsistent path.\n``Context of demand for removal should be part demands or used demands, but is not:\nRemoval context is           Database[demands, Rails For School Scheduling, allocations],\ndemands context is          [demands, Rails For School Scheduling] and\nused demands context is Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used].``\n* [ ] Imitate railed courses to teacher allocation solver from personal master thesis.\n   * [ ] Assign courses to rails.\n      * [x] Every course is currently on the same rail.\n      * [x] Every course has no allocated hours.\n      * [x] Completely free courses are ignored by constraint repair.\n         This happens when linear initialization is omitted or if repair reaches such state by accident.\n         * [x] The same demand is allocated multiple times in one optimization step.\n            * [x] freeSlots is determined incorrectly, because it assumes that demand grouping is always happaning along the course id.\n      * [x] The average course length of the generated demands is not correct (half of target).\n      * [x] Selecting element of a free course slot leads to an error, because there are fewer left than assumed.\n         * freeDemandGroups contains only demands, that are freed in the current step. Already free demands are ignored.\n         * solutionView still uses all demands of freeDemandGroups.\n         * [x] allocatedCourses needs therefore to be checked.\n         * [x] chosenSplit should also consider the real number of demands of a course to be repaired.\n         * [x] freeSlots needs to be filled with pre optimize unused demands.\n         * [x] How is determined, which demand gets void rail? -\u003e via nonEmptySlotCount\n      * [x] The allocated course hours is calculated incorrectly by the repair.\n         * [x] retainedAllocatedHours is calculated incorrectly as it does not substract allocated hourse which are removed in the current optimization step.\n         * [x] There seems to be a problem in the understanding of index relations between allocations, free demands and used demands. -\u003e This is now documented.\n      * [x] Create history report more searchable by LibreOffice.\n        Otherwise, the low searchability will always take a toll during history analysis.\n      * [ ] Courses in one rail have not always the same length. -\u003e This is caused by the fact, that the constraint repair sometimes all faulty allocations of a rail with defiance.\n         * [ ] Add flag to repair, so it's possible to only repair faulty allocations without changing non-faulty allocations.\n            * [ ] offline repair\n            * [ ] online repair\n   * [ ] Assign teachers to courses.\n      * [x] Only grouping by course is important.\n      * [x] Determine not allocated courses and their not used demands.\n      * [ ] Determine defying groups and their not used and used demands.\n      * [ ] Determine a representative allocation of defying groups and undo all allocations of defying groups.\n      * [x] Use free demands of the representative for the repair of each defying group.\n      * [x] Randomize each repair step.\n      * [x] Select only suitable teachers.\n      * [x] Repair all incorrect values and not just some by repair any constraint error and by always converting all groupings to groupings by course id.\n      * [ ] Deallocate all lines with a course id, that has an error, during each repair iteration step.\n      * [ ] Optionally deallocate all lines with a subject, that has an error, during each repair iteration step.\n      * [ ] Use unused demands.\n      * [ ] Randomization performance seems to be bad.\n   * [ ] Assign pupils to courses.\n* [ ] Implement constraint query system for tables and use it in constraint based repair. Online optimization would be needed for that.\n* [ ] Improve analysis by making it more table like and create guidelines for table (searchability and simplicity) versus tree (organization).\n* [ ] Add temporary storage project to private website.\n* [ ] Adjust teacher subject suitability and course subject in test data. Some course subjects may need to have a teacher for the subject adjustments.\n* [ ] Create a presentation for the problem.\n* [ ] Test all constraints.\n* [ ] Fix last element of solution paths in logging (i.e. `net/splitcells/gel/GelEnv/demands.allocations.allocations/`).\n* [ ] Alternative to GroupSelector interface: select constraint nodes via Query interface.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1654807802,"metadata":{"github-id":"UCE_lAHOFCNQW84xHWf2zi8_d8o"},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n   - [ ] Use custom initializers for constraint based repair in order to improve results.\n   - [ ] Render performance data in Graph and monitor results,\nin order to get a felling, how much needs to be done and how much effect a single action had.\nDo this by reimplementing the old problem specific initializers.\n(Currently done via https://localhost:8444/net/splitcells/martins/avots/website/test.html)\n- [ ] Compare repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [x] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [x] Remove usage of Node logging interface. -\u003e I removed some Node usage and deprecated the interface instead.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way. -\u003e UiRouter can be used as an alternative Domsole.\n   - [x] Fix XML outpout for Domsole. -\u003e Will fix it, when it is used again or the code is cleaned up during maintenance.\n* [x] Allocations do not work for nested problems, because there is an equality problem. -\u003e Allocations had an inconsistent path.\n``Context of demand for removal should be part demands or used demands, but is not:\nRemoval context is           Database[demands, Rails For School Scheduling, allocations],\ndemands context is          [demands, Rails For School Scheduling] and\nused demands context is Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used].``\n* [ ] Imitate railed courses to teacher allocation solver from personal master thesis.\n   * [ ] Assign courses to rails.\n      * [x] Every course is currently on the same rail.\n      * [x] Every course has no allocated hours.\n      * [x] Completely free courses are ignored by constraint repair.\n         This happens when linear initialization is omitted or if repair reaches such state by accident.\n         * [x] The same demand is allocated multiple times in one optimization step.\n            * [x] freeSlots is determined incorrectly, because it assumes that demand grouping is always happaning along the course id.\n      * [x] The average course length of the generated demands is not correct (half of target).\n      * [x] Selecting element of a free course slot leads to an error, because there are fewer left than assumed.\n         * freeDemandGroups contains only demands, that are freed in the current step. Already free demands are ignored.\n         * solutionView still uses all demands of freeDemandGroups.\n         * [x] allocatedCourses needs therefore to be checked.\n         * [x] chosenSplit should also consider the real number of demands of a course to be repaired.\n         * [x] freeSlots needs to be filled with pre optimize unused demands.\n         * [x] How is determined, which demand gets void rail? -\u003e via nonEmptySlotCount\n      * [ ] The allocated course hours is calculated incorrectly by the repair.\n         * [ ] retainedAllocatedHours is calculated incorrectly as it does not substract allocated hourse which are removed in the current optimization step.\n         * [x] There seems to be a problem in the understanding of index relations between allocations, free demands and used demands. -\u003e This was documented.\n      * [x] Create history report more searchable by LibreOffice.\n        Otherwise, the low searchability will always take a toll during history analysis.\n   * [ ] Assign teachers to courses.\n      * [x] Only grouping by course is important.\n      * [x] Determine not allocated courses and their not used demands.\n      * [ ] Determine defying groups and their not used and used demands.\n      * [ ] Determine a representative allocation of defying groups and undo all allocations of defying groups.\n      * [x] Use free demands of the representative for the repair of each defying group.\n      * [x] Randomize each repair step.\n      * [x] Select only suitable teachers.\n      * [x] Repair all incorrect values and not just some by repair any constraint error and by always converting all groupings to groupings by course id.\n      * [ ] Deallocate all lines with a course id, that has an error, during each repair iteration step.\n      * [ ] Optionally deallocate all lines with a subject, that has an error, during each repair iteration step.\n      * [ ] Use unused demands.\n      * [ ] Randomization performance seems to be bad.\n   * [ ] Assign pupils to courses.\n* [ ] Implement constraint query system for tables and use it in constraint based repair. Online optimization would be needed for that.\n* [ ] Improve analysis by making it more table like and create guidelines for table (searchability and simplicity) versus tree (organization).\n* [ ] Add temporary storage project to private website.\n* [ ] Adjust teacher subject suitability and course subject in test data. Some course subjects may need to have a teacher for the subject adjustments.\n* [ ] Create a presentation for the problem.\n* [ ] Test all constraints.\n* [ ] Fix last element of solution paths in logging (i.e. `net/splitcells/gel/GelEnv/demands.allocations.allocations/`).\n* [ ] Make example data more sane,","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1654941815,"metadata":{"github-id":"UCE_lAHOFCNQW84xHWf2zi9Q71k"},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n   - [ ] Use custom initializers for constraint based repair in order to improve results.\n   - [ ] Render performance data in Graph and monitor results,\nin order to get a felling, how much needs to be done and how much effect a single action had.\nDo this by reimplementing the old problem specific initializers.\n(Currently done via https://localhost:8444/net/splitcells/martins/avots/website/test.html)\n- [ ] Compare repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [x] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [x] Remove usage of Node logging interface. -\u003e I removed some Node usage and deprecated the interface instead.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way. -\u003e UiRouter can be used as an alternative Domsole.\n   - [x] Fix XML outpout for Domsole. -\u003e Will fix it, when it is used again or the code is cleaned up during maintenance.\n* [x] Allocations do not work for nested problems, because there is an equality problem. -\u003e Allocations had an inconsistent path.\n``Context of demand for removal should be part demands or used demands, but is not:\nRemoval context is           Database[demands, Rails For School Scheduling, allocations],\ndemands context is          [demands, Rails For School Scheduling] and\nused demands context is Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used].``\n* [ ] Imitate railed courses to teacher allocation solver from personal master thesis.\n   * [ ] Assign courses to rails.\n      * [x] Every course is currently on the same rail.\n      * [x] Every course has no allocated hours.\n      * [x] Completely free courses are ignored by constraint repair.\n         This happens when linear initialization is omitted or if repair reaches such state by accident.\n         * [x] The same demand is allocated multiple times in one optimization step.\n            * [x] freeSlots is determined incorrectly, because it assumes that demand grouping is always happaning along the course id.\n      * [x] The average course length of the generated demands is not correct (half of target).\n      * [x] Selecting element of a free course slot leads to an error, because there are fewer left than assumed.\n         * freeDemandGroups contains only demands, that are freed in the current step. Already free demands are ignored.\n         * solutionView still uses all demands of freeDemandGroups.\n         * [x] allocatedCourses needs therefore to be checked.\n         * [x] chosenSplit should also consider the real number of demands of a course to be repaired.\n         * [x] freeSlots needs to be filled with pre optimize unused demands.\n         * [x] How is determined, which demand gets void rail? -\u003e via nonEmptySlotCount\n      * [x] The allocated course hours is calculated incorrectly by the repair. Done via a repair hill climber.\n         * [x] retainedAllocatedHours is calculated incorrectly as it does not substract allocated hourse which are removed in the current optimization step.\n         * [x] There seems to be a problem in the understanding of index relations between allocations, free demands and used \ndemands. -\u003e This was documented.\n      * [x] Create history report more searchable by LibreOffice.\n        Otherwise, the low searchability will always take a toll during history analysis.\n      * [ ] Improve hill climber repair performance by trying every supply value combination once instead of trying out all free supplies, which contains duplicates.\n   * [ ] Assign teachers to courses.\n      * [x] Only grouping by course is important.\n      * [x] Determine not allocated courses and their not used demands.\n      * [ ] Determine defying groups and their not used and used demands.\n      * [ ] Determine a representative allocation of defying groups and undo all allocations of defying groups.\n      * [x] Use free demands of the representative for the repair of each defying group.\n      * [x] Randomize each repair step.\n      * [x] Select only suitable teachers.\n      * [x] Repair all incorrect values and not just some by repair any constraint error and by always converting all groupings to groupings by course id.\n      * [ ] Deallocate all lines with a course id, that has an error, during each repair iteration step.\n      * [ ] Optionally deallocate all lines with a subject, that has an error, during each repair iteration step.\n      * [ ] Use unused demands.\n      * [ ] Randomization performance seems to be bad.\n   * [ ] Assign pupils to courses.\n* [ ] Implement constraint query system for tables and use it in constraint based repair. Online optimization would be needed for that.\n* [ ] Improve analysis by making it more table like and create guidelines for table (searchability and simplicity) versus tree (organization).\n* [ ] Add temporary storage project to private website.\n* [ ] Adjust teacher subject suitability and course subject in test data. Some course subjects may need to have a teacher for the subject adjustments.\n* [ ] Create a presentation for the problem.\n* [ ] Test all constraints.\n* [ ] Fix last element of solution paths in logging (i.e. `net/splitcells/gel/GelEnv/demands.allocations.allocations/`).\n* [ ] Make example data more sane,","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1655242609,"metadata":{"github-id":"UCE_lAHOFCNQW84xHWf2zi927xU"},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n   - [ ] Use custom initializers for constraint based repair in order to improve results.\n   - [ ] Render performance data in Graph and monitor results,\nin order to get a felling, how much needs to be done and how much effect a single action had.\nDo this by reimplementing the old problem specific initializers.\n(Currently done via https://localhost:8444/net/splitcells/martins/avots/website/test.html)\n- [ ] Compare repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [x] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [x] Remove usage of Node logging interface. -\u003e I removed some Node usage and deprecated the interface instead.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way. -\u003e UiRouter can be used as an alternative Domsole.\n   - [x] Fix XML outpout for Domsole. -\u003e Will fix it, when it is used again or the code is cleaned up during maintenance.\n* [x] Allocations do not work for nested problems, because there is an equality problem. -\u003e Allocations had an inconsistent path.\n``Context of demand for removal should be part demands or used demands, but is not:\nRemoval context is           Database[demands, Rails For School Scheduling, allocations],\ndemands context is          [demands, Rails For School Scheduling] and\nused demands context is Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used].``\n* [ ] Imitate railed courses to teacher allocation solver from personal master thesis.\n   * [ ] Assign courses to rails.\n      * [x] Every course is currently on the same rail.\n      * [x] Every course has no allocated hours.\n      * [x] Completely free courses are ignored by constraint repair.\n         This happens when linear initialization is omitted or if repair reaches such state by accident.\n         * [x] The same demand is allocated multiple times in one optimization step.\n            * [x] freeSlots is determined incorrectly, because it assumes that demand grouping is always happaning along the course id.\n      * [x] The average course length of the generated demands is not correct (half of target).\n      * [x] Selecting element of a free course slot leads to an error, because there are fewer left than assumed.\n         * freeDemandGroups contains only demands, that are freed in the current step. Already free demands are ignored.\n         * solutionView still uses all demands of freeDemandGroups.\n         * [x] allocatedCourses needs therefore to be checked.\n         * [x] chosenSplit should also consider the real number of demands of a course to be repaired.\n         * [x] freeSlots needs to be filled with pre optimize unused demands.\n         * [x] How is determined, which demand gets void rail? -\u003e via nonEmptySlotCount\n      * [x] The allocated course hours is calculated incorrectly by the repair. Done via a repair hill climber.\n         * [x] retainedAllocatedHours is calculated incorrectly as it does not substract allocated hourse which are removed in the current optimization step.\n         * [x] There seems to be a problem in the understanding of index relations between allocations, free demands and used \ndemands. -\u003e This was documented.\n      * [x] Create history report more searchable by LibreOffice.\n        Otherwise, the low searchability will always take a toll during history analysis.\n      * [ ] Improve hill climber repair performance by trying every supply value combination once instead of trying out all free supplies, which contains duplicates.\n   * [ ] Assign teachers to courses.\n      * [x] Only grouping by course is important.\n      * [x] Determine not allocated courses and their not used demands.\n      * [ ] Determine defying groups and their not used and used demands.\n      * [ ] Determine a representative allocation of defying groups and undo all allocations of defying groups.\n      * [x] Use free demands of the representative for the repair of each defying group.\n      * [x] Randomize each repair step.\n      * [x] Select only suitable teachers.\n      * [x] Repair all incorrect values and not just some by repair any constraint error and by always converting all groupings to groupings by course id.\n      * [ ] Deallocate all lines with a course id, that has an error, during each repair iteration step.\n      * [ ] Optionally deallocate all lines with a subject, that has an error, during each repair iteration step.\n      * [ ] Use unused demands.\n      * [ ] Randomization performance seems to be bad.\n   * [ ] Assign pupils to courses.\n* [ ] Implement constraint query system for tables and use it in constraint based repair. Online optimization would be needed for that.\n* [x] Improve analysis by making it more table like and create guidelines for table (searchability and simplicity) versus tree (organization).\n* [ ] Add temporary storage project to private website.\n* [ ] Adjust teacher subject suitability and course subject in test data. Some course subjects may need to have a teacher for the subject adjustments.\n* [ ] Create a presentation for the problem.\n* [ ] Test all constraints.\n* [ ] Fix last element of solution paths in logging (i.e. `net/splitcells/gel/GelEnv/demands.allocations.allocations/`).\n* [ ] Make example data more sane,","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1655242614,"metadata":{"github-id":"UCE_lAHOFCNQW84xHWf2zi9270w"},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n   - [ ] Use custom initializers for constraint based repair in order to improve results.\n   - [ ] Render performance data in Graph and monitor results,\nin order to get a felling, how much needs to be done and how much effect a single action had.\nDo this by reimplementing the old problem specific initializers.\n(Currently done via https://localhost:8444/net/splitcells/martins/avots/website/test.html)\n- [ ] Compare repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [x] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [x] Remove usage of Node logging interface. -\u003e I removed some Node usage and deprecated the interface instead.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way. -\u003e UiRouter can be used as an alternative Domsole.\n   - [x] Fix XML outpout for Domsole. -\u003e Will fix it, when it is used again or the code is cleaned up during maintenance.\n* [x] Allocations do not work for nested problems, because there is an equality problem. -\u003e Allocations had an inconsistent path.\n``Context of demand for removal should be part demands or used demands, but is not:\nRemoval context is           Database[demands, Rails For School Scheduling, allocations],\ndemands context is          [demands, Rails For School Scheduling] and\nused demands context is Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used].``\n* [ ] Imitate railed courses to teacher allocation solver from personal master thesis.\n   * [ ] Assign courses to rails.\n      * [x] Every course is currently on the same rail.\n      * [x] Every course has no allocated hours.\n      * [x] Completely free courses are ignored by constraint repair.\n         This happens when linear initialization is omitted or if repair reaches such state by accident.\n         * [x] The same demand is allocated multiple times in one optimization step.\n            * [x] freeSlots is determined incorrectly, because it assumes that demand grouping is always happaning along the course id.\n      * [x] The average course length of the generated demands is not correct (half of target).\n      * [x] Selecting element of a free course slot leads to an error, because there are fewer left than assumed.\n         * freeDemandGroups contains only demands, that are freed in the current step. Already free demands are ignored.\n         * solutionView still uses all demands of freeDemandGroups.\n         * [x] allocatedCourses needs therefore to be checked.\n         * [x] chosenSplit should also consider the real number of demands of a course to be repaired.\n         * [x] freeSlots needs to be filled with pre optimize unused demands.\n         * [x] How is determined, which demand gets void rail? -\u003e via nonEmptySlotCount\n      * [x] The allocated course hours is calculated incorrectly by the repair. Done via a repair hill climber.\n         * [x] retainedAllocatedHours is calculated incorrectly as it does not substract allocated hourse which are removed in the current optimization step.\n         * [x] There seems to be a problem in the understanding of index relations between allocations, free demands and used \ndemands. -\u003e This was documented.\n      * [x] Create history report more searchable by LibreOffice.\n        Otherwise, the low searchability will always take a toll during history analysis.\n      * [ ] Improve hill climber repair performance by trying every supply value combination once instead of trying out all free supplies, which contains duplicates.\n   * [ ] Assign teachers to courses.\n      * [x] Only grouping by course is important.\n      * [x] Determine not allocated courses and their not used demands.\n      * [ ] Determine defying groups and their not used and used demands.\n      * [ ] Determine a representative allocation of defying groups and undo all allocations of defying groups.\n      * [x] Use free demands of the representative for the repair of each defying group.\n      * [x] Randomize each repair step.\n      * [x] Select only suitable teachers.\n      * [x] Repair all incorrect values and not just some by repair any constraint error and by always converting all groupings to groupings by course id.\n      * [ ] Deallocate all lines with a course id, that has an error, during each repair iteration step.\n      * [ ] Optionally deallocate all lines with a subject, that has an error, during each repair iteration step.\n      * [ ] Use unused demands.\n      * [ ] Randomization performance seems to be bad.\n   * [ ] Assign pupils to courses.\n* [ ] Implement constraint query system for tables and use it in constraint based repair. Online optimization would be needed for that.\n* [ ] Improve analysis by making it more table like and create guidelines for table (searchability and simplicity) versus tree (organization).\n* [ ] Add temporary storage project to private website.\n* [ ] Adjust teacher subject suitability and course subject in test data. Some course subjects may need to have a teacher for the subject adjustments.\n* [ ] Create a presentation for the problem.\n* [ ] Test all constraints.\n* [ ] Fix last element of solution paths in logging (i.e. `net/splitcells/gel/GelEnv/demands.allocations.allocations/`).\n* [ ] Make example data more sane,","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1655242620,"metadata":{"github-id":"UCE_lAHOFCNQW84xHWf2zi9275k"},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n   - [ ] Use custom initializers for constraint based repair in order to improve results.\n   - [ ] Render performance data in Graph and monitor results,\nin order to get a felling, how much needs to be done and how much effect a single action had.\nDo this by reimplementing the old problem specific initializers.\n(Currently done via https://localhost:8444/net/splitcells/martins/avots/website/test.html)\n- [ ] Compare repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [x] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [x] Remove usage of Node logging interface. -\u003e I removed some Node usage and deprecated the interface instead.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way. -\u003e UiRouter can be used as an alternative Domsole.\n   - [x] Fix XML outpout for Domsole. -\u003e Will fix it, when it is used again or the code is cleaned up during maintenance.\n* [x] Allocations do not work for nested problems, because there is an equality problem. -\u003e Allocations had an inconsistent path.\n``Context of demand for removal should be part demands or used demands, but is not:\nRemoval context is           Database[demands, Rails For School Scheduling, allocations],\ndemands context is          [demands, Rails For School Scheduling] and\nused demands context is Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used].``\n* [ ] Imitate railed courses to teacher allocation solver from personal master thesis.\n   * [ ] Assign courses to rails.\n      * [x] Every course is currently on the same rail.\n      * [x] Every course has no allocated hours.\n      * [x] Completely free courses are ignored by constraint repair.\n         This happens when linear initialization is omitted or if repair reaches such state by accident.\n         * [x] The same demand is allocated multiple times in one optimization step.\n            * [x] freeSlots is determined incorrectly, because it assumes that demand grouping is always happaning along the course id.\n      * [x] The average course length of the generated demands is not correct (half of target).\n      * [x] Selecting element of a free course slot leads to an error, because there are fewer left than assumed.\n         * freeDemandGroups contains only demands, that are freed in the current step. Already free demands are ignored.\n         * solutionView still uses all demands of freeDemandGroups.\n         * [x] allocatedCourses needs therefore to be checked.\n         * [x] chosenSplit should also consider the real number of demands of a course to be repaired.\n         * [x] freeSlots needs to be filled with pre optimize unused demands.\n         * [x] How is determined, which demand gets void rail? -\u003e via nonEmptySlotCount\n      * [x] The allocated course hours is calculated incorrectly by the repair. Done via a repair hill climber.\n         * [x] retainedAllocatedHours is calculated incorrectly as it does not substract allocated hourse which are removed in the current optimization step.\n         * [x] There seems to be a problem in the understanding of index relations between allocations, free demands and used \ndemands. -\u003e This was documented.\n      * [x] Create history report more searchable by LibreOffice.\n        Otherwise, the low searchability will always take a toll during history analysis.\n      * [ ] Improve hill climber repair performance by trying every supply value combination once instead of trying out all free supplies, which contains duplicates.\n   * [ ] Assign teachers to courses.\n      * [x] Only grouping by course is important.\n      * [x] Determine not allocated courses and their not used demands.\n      * [ ] Determine defying groups and their not used and used demands.\n      * [ ] Determine a representative allocation of defying groups and undo all allocations of defying groups.\n      * [x] Use free demands of the representative for the repair of each defying group.\n      * [x] Randomize each repair step.\n      * [x] Select only suitable teachers.\n      * [x] Repair all incorrect values and not just some by repair any constraint error and by always converting all groupings to groupings by course id.\n      * [ ] Deallocate all lines with a course id, that has an error, during each repair iteration step.\n      * [ ] Optionally deallocate all lines with a subject, that has an error, during each repair iteration step.\n      * [ ] Use unused demands.\n      * [ ] Randomization performance seems to be bad.\n   * [ ] Assign pupils to courses.\n* [ ] Implement constraint query system for tables and use it in constraint based repair. Online optimization would be needed for that.\n* [x] Improve analysis by making it more table like and create guidelines for table (searchability and simplicity) versus tree (organization).\n* [ ] Add temporary storage project to private website.\n* [ ] Adjust teacher subject suitability and course subject in test data. Some course subjects may need to have a teacher for the subject adjustments.\n* [ ] Create a presentation for the problem.\n* [ ] Test all constraints.\n* [ ] Fix last element of solution paths in logging (i.e. `net/splitcells/gel/GelEnv/demands.allocations.allocations/`).\n* [ ] Make example data more sane,","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1655242705,"metadata":{"github-id":"UCE_lAHOFCNQW84xHWf2zi928z0"},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n   - [ ] Use custom initializers for constraint based repair in order to improve results.\n   - [ ] Render performance data in Graph and monitor results,\nin order to get a felling, how much needs to be done and how much effect a single action had.\nDo this by reimplementing the old problem specific initializers.\n(Currently done via https://localhost:8444/net/splitcells/martins/avots/website/test.html)\n- [ ] Compare repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [x] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [x] Remove usage of Node logging interface. -\u003e I removed some Node usage and deprecated the interface instead.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way. -\u003e UiRouter can be used as an alternative Domsole.\n   - [x] Fix XML outpout for Domsole. -\u003e Will fix it, when it is used again or the code is cleaned up during maintenance.\n* [x] Allocations do not work for nested problems, because there is an equality problem. -\u003e Allocations had an inconsistent path.\n``Context of demand for removal should be part demands or used demands, but is not:\nRemoval context is           Database[demands, Rails For School Scheduling, allocations],\ndemands context is          [demands, Rails For School Scheduling] and\nused demands context is Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used].``\n* [ ] Imitate railed courses to teacher allocation solver from personal master thesis.\n   * [ ] Assign courses to rails.\n      * [x] Every course is currently on the same rail.\n      * [x] Every course has no allocated hours.\n      * [x] Completely free courses are ignored by constraint repair.\n         This happens when linear initialization is omitted or if repair reaches such state by accident.\n         * [x] The same demand is allocated multiple times in one optimization step.\n            * [x] freeSlots is determined incorrectly, because it assumes that demand grouping is always happaning along the course id.\n      * [x] The average course length of the generated demands is not correct (half of target).\n      * [x] Selecting element of a free course slot leads to an error, because there are fewer left than assumed.\n         * freeDemandGroups contains only demands, that are freed in the current step. Already free demands are ignored.\n         * solutionView still uses all demands of freeDemandGroups.\n         * [x] allocatedCourses needs therefore to be checked.\n         * [x] chosenSplit should also consider the real number of demands of a course to be repaired.\n         * [x] freeSlots needs to be filled with pre optimize unused demands.\n         * [x] How is determined, which demand gets void rail? -\u003e via nonEmptySlotCount\n      * [x] The allocated course hours is calculated incorrectly by the repair. Done via a repair hill climber.\n         * [x] retainedAllocatedHours is calculated incorrectly as it does not substract allocated hourse which are removed in the current optimization step.\n         * [x] There seems to be a problem in the understanding of index relations between allocations, free demands and used \ndemands. -\u003e This was documented.\n      * [x] Create history report more searchable by LibreOffice.\n        Otherwise, the low searchability will always take a toll during history analysis.\n      * [x] Improve hill climber repair performance by trying every supply value combination once instead of trying out all free supplies, which contains duplicates.\n   * [ ] Assign teachers to courses.\n      * [x] Only grouping by course is important.\n      * [x] Determine not allocated courses and their not used demands.\n      * [ ] Determine defying groups and their not used and used demands.\n      * [ ] Determine a representative allocation of defying groups and undo all allocations of defying groups.\n      * [x] Use free demands of the representative for the repair of each defying group.\n      * [x] Randomize each repair step.\n      * [x] Select only suitable teachers.\n      * [x] Repair all incorrect values and not just some by repair any constraint error and by always converting all groupings to groupings by course id.\n      * [ ] Deallocate all lines with a course id, that has an error, during each repair iteration step.\n      * [ ] Optionally deallocate all lines with a subject, that has an error, during each repair iteration step.\n      * [ ] Use unused demands.\n      * [ ] Randomization performance seems to be bad.\n   * [ ] Assign pupils to courses.\n* [ ] Implement constraint query system for tables and use it in constraint based repair. Online optimization would be needed for that.\n* [x] Improve analysis by making it more table like and create guidelines for table (searchability and simplicity) versus tree (organization).\n* [ ] Add temporary storage project to private website.\n* [ ] Adjust teacher subject suitability and course subject in test data. Some course subjects may need to have a teacher for the subject adjustments.\n* [ ] Create a presentation for the problem.\n* [ ] Test all constraints.\n* [ ] Fix last element of solution paths in logging (i.e. `net/splitcells/gel/GelEnv/demands.allocations.allocations/`).\n* [ ] Make example data more sane,","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1655242708,"metadata":{"github-id":"UCE_lAHOFCNQW84xHWf2zi9282g"},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n   - [ ] Use custom initializers for constraint based repair in order to improve results.\n   - [ ] Render performance data in Graph and monitor results,\nin order to get a felling, how much needs to be done and how much effect a single action had.\nDo this by reimplementing the old problem specific initializers.\n(Currently done via https://localhost:8444/net/splitcells/martins/avots/website/test.html)\n- [ ] Compare repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [x] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [x] Remove usage of Node logging interface. -\u003e I removed some Node usage and deprecated the interface instead.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way. -\u003e UiRouter can be used as an alternative Domsole.\n   - [x] Fix XML outpout for Domsole. -\u003e Will fix it, when it is used again or the code is cleaned up during maintenance.\n* [x] Allocations do not work for nested problems, because there is an equality problem. -\u003e Allocations had an inconsistent path.\n``Context of demand for removal should be part demands or used demands, but is not:\nRemoval context is           Database[demands, Rails For School Scheduling, allocations],\ndemands context is          [demands, Rails For School Scheduling] and\nused demands context is Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used].``\n* [ ] Imitate railed courses to teacher allocation solver from personal master thesis.\n   * [x] Assign courses to rails.\n      * [x] Every course is currently on the same rail.\n      * [x] Every course has no allocated hours.\n      * [x] Completely free courses are ignored by constraint repair.\n         This happens when linear initialization is omitted or if repair reaches such state by accident.\n         * [x] The same demand is allocated multiple times in one optimization step.\n            * [x] freeSlots is determined incorrectly, because it assumes that demand grouping is always happaning along the course id.\n      * [x] The average course length of the generated demands is not correct (half of target).\n      * [x] Selecting element of a free course slot leads to an error, because there are fewer left than assumed.\n         * freeDemandGroups contains only demands, that are freed in the current step. Already free demands are ignored.\n         * solutionView still uses all demands of freeDemandGroups.\n         * [x] allocatedCourses needs therefore to be checked.\n         * [x] chosenSplit should also consider the real number of demands of a course to be repaired.\n         * [x] freeSlots needs to be filled with pre optimize unused demands.\n         * [x] How is determined, which demand gets void rail? -\u003e via nonEmptySlotCount\n      * [x] The allocated course hours is calculated incorrectly by the repair. Done via a repair hill climber.\n         * [x] retainedAllocatedHours is calculated incorrectly as it does not substract allocated hourse which are removed in the current optimization step.\n         * [x] There seems to be a problem in the understanding of index relations between allocations, free demands and used \ndemands. -\u003e This was documented.\n      * [x] Create history report more searchable by LibreOffice.\n        Otherwise, the low searchability will always take a toll during history analysis.\n      * [x] Improve hill climber repair performance by trying every supply value combination once instead of trying out all free supplies, which contains duplicates.\n   * [ ] Assign teachers to courses.\n      * [x] Only grouping by course is important.\n      * [x] Determine not allocated courses and their not used demands.\n      * [ ] Determine defying groups and their not used and used demands.\n      * [ ] Determine a representative allocation of defying groups and undo all allocations of defying groups.\n      * [x] Use free demands of the representative for the repair of each defying group.\n      * [x] Randomize each repair step.\n      * [x] Select only suitable teachers.\n      * [x] Repair all incorrect values and not just some by repair any constraint error and by always converting all groupings to groupings by course id.\n      * [ ] Deallocate all lines with a course id, that has an error, during each repair iteration step.\n      * [ ] Optionally deallocate all lines with a subject, that has an error, during each repair iteration step.\n      * [ ] Use unused demands.\n      * [ ] Randomization performance seems to be bad.\n   * [ ] Assign pupils to courses.\n* [ ] Implement constraint query system for tables and use it in constraint based repair. Online optimization would be needed for that.\n* [x] Improve analysis by making it more table like and create guidelines for table (searchability and simplicity) versus tree (organization).\n* [ ] Add temporary storage project to private website.\n* [ ] Adjust teacher subject suitability and course subject in test data. Some course subjects may need to have a teacher for the subject adjustments.\n* [ ] Create a presentation for the problem.\n* [ ] Test all constraints.\n* [ ] Fix last element of solution paths in logging (i.e. `net/splitcells/gel/GelEnv/demands.allocations.allocations/`).\n* [ ] Make example data more sane,","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1656280538,"metadata":{"github-id":"UCE_lAHOFCNQW84xHWf2zjAIYCc"},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n   - [ ] Use custom initializers for constraint based repair in order to improve results.\n   - [ ] Render performance data in Graph and monitor results,\nin order to get a felling, how much needs to be done and how much effect a single action had.\nDo this by reimplementing the old problem specific initializers.\n(Currently done via https://localhost:8444/net/splitcells/martins/avots/website/test.html)\n- [ ] Compare repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [x] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [x] Remove usage of Node logging interface. -\u003e I removed some Node usage and deprecated the interface instead.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way. -\u003e UiRouter can be used as an alternative Domsole.\n   - [x] Fix XML outpout for Domsole. -\u003e Will fix it, when it is used again or the code is cleaned up during maintenance.\n* [x] Allocations do not work for nested problems, because there is an equality problem. -\u003e Allocations had an inconsistent path.\n``Context of demand for removal should be part demands or used demands, but is not:\nRemoval context is           Database[demands, Rails For School Scheduling, allocations],\ndemands context is          [demands, Rails For School Scheduling] and\nused demands context is Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used].``\n* [ ] Imitate railed courses to teacher allocation solver from personal master thesis.\n   * [x] Assign courses to rails.\n      * [x] Every course is currently on the same rail.\n      * [x] Every course has no allocated hours.\n      * [x] Completely free courses are ignored by constraint repair.\n         This happens when linear initialization is omitted or if repair reaches such state by accident.\n         * [x] The same demand is allocated multiple times in one optimization step.\n            * [x] freeSlots is determined incorrectly, because it assumes that demand grouping is always happaning along the course id.\n      * [x] The average course length of the generated demands is not correct (half of target).\n      * [x] Selecting element of a free course slot leads to an error, because there are fewer left than assumed.\n         * freeDemandGroups contains only demands, that are freed in the current step. Already free demands are ignored.\n         * solutionView still uses all demands of freeDemandGroups.\n         * [x] allocatedCourses needs therefore to be checked.\n         * [x] chosenSplit should also consider the real number of demands of a course to be repaired.\n         * [x] freeSlots needs to be filled with pre optimize unused demands.\n         * [x] How is determined, which demand gets void rail? -\u003e via nonEmptySlotCount\n      * [x] The allocated course hours is calculated incorrectly by the repair. Done via a repair hill climber.\n         * [x] retainedAllocatedHours is calculated incorrectly as it does not substract allocated hourse which are removed in the current optimization step.\n         * [x] There seems to be a problem in the understanding of index relations between allocations, free demands and used \ndemands. -\u003e This was documented.\n      * [x] Create history report more searchable by LibreOffice.\n        Otherwise, the low searchability will always take a toll during history analysis.\n      * [x] Improve hill climber repair performance by trying every supply value combination once instead of trying out all free supplies, which contains duplicates.\n   * [x] Assign teachers to courses.\n      * [x] Only grouping by course is important.\n      * [x] Determine not allocated courses and their not used demands.\n      * [ ] Determine defying groups and their not used and used demands.\n      * [ ] Determine a representative allocation of defying groups and undo all allocations of defying groups.\n      * [x] Use free demands of the representative for the repair of each defying group.\n      * [x] Randomize each repair step.\n      * [x] Select only suitable teachers.\n      * [x] Repair all incorrect values and not just some by repair any constraint error and by always converting all groupings to groupings by course id.\n      * [ ] Deallocate all lines with a course id, that has an error, during each repair iteration step.\n      * [ ] Optionally deallocate all lines with a subject, that has an error, during each repair iteration step.\n      * [ ] Use unused demands.\n      * [ ] Randomization performance seems to be bad.\n   * [ ] Assign pupils to courses.\n* [ ] Implement constraint query system for tables and use it in constraint based repair. Online optimization would be needed for that.\n* [x] Improve analysis by making it more table like and create guidelines for table (searchability and simplicity) versus tree (organization).\n* [ ] Add temporary storage project to private website.\n* [ ] Adjust teacher subject suitability and course subject in test data. Some course subjects may need to have a teacher for the subject adjustments.\n* [ ] Create a presentation for the problem.\n* [ ] Test all constraints.\n* [ ] Fix last element of solution paths in logging (i.e. `net/splitcells/gel/GelEnv/demands.allocations.allocations/`).\n* [ ] Make example data more sane,","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1656280644,"metadata":{"github-id":"UCE_lAHOFCNQW84xHWf2zjAIYW4"},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n   - [ ] Use custom initializers for constraint based repair in order to improve results.\n   - [ ] Render performance data in Graph and monitor results,\nin order to get a felling, how much needs to be done and how much effect a single action had.\nDo this by reimplementing the old problem specific initializers.\n(Currently done via https://localhost:8444/net/splitcells/martins/avots/website/test.html)\n- [ ] Compare repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [x] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [x] Remove usage of Node logging interface. -\u003e I removed some Node usage and deprecated the interface instead.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way. -\u003e UiRouter can be used as an alternative Domsole.\n   - [x] Fix XML outpout for Domsole. -\u003e Will fix it, when it is used again or the code is cleaned up during maintenance.\n* [x] Allocations do not work for nested problems, because there is an equality problem. -\u003e Allocations had an inconsistent path.\n``Context of demand for removal should be part demands or used demands, but is not:\nRemoval context is           Database[demands, Rails For School Scheduling, allocations],\ndemands context is          [demands, Rails For School Scheduling] and\nused demands context is Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used].``\n* [ ] Imitate railed courses to teacher allocation solver from personal master thesis.\n   * [x] Assign courses to rails.\n      * [x] Every course is currently on the same rail.\n      * [x] Every course has no allocated hours.\n      * [x] Completely free courses are ignored by constraint repair.\n         This happens when linear initialization is omitted or if repair reaches such state by accident.\n         * [x] The same demand is allocated multiple times in one optimization step.\n            * [x] freeSlots is determined incorrectly, because it assumes that demand grouping is always happaning along the course id.\n      * [x] The average course length of the generated demands is not correct (half of target).\n      * [x] Selecting element of a free course slot leads to an error, because there are fewer left than assumed.\n         * freeDemandGroups contains only demands, that are freed in the current step. Already free demands are ignored.\n         * solutionView still uses all demands of freeDemandGroups.\n         * [x] allocatedCourses needs therefore to be checked.\n         * [x] chosenSplit should also consider the real number of demands of a course to be repaired.\n         * [x] freeSlots needs to be filled with pre optimize unused demands.\n         * [x] How is determined, which demand gets void rail? -\u003e via nonEmptySlotCount\n      * [x] The allocated course hours is calculated incorrectly by the repair. Done via a repair hill climber.\n         * [x] retainedAllocatedHours is calculated incorrectly as it does not substract allocated hourse which are removed in the current optimization step.\n         * [x] There seems to be a problem in the understanding of index relations between allocations, free demands and used \ndemands. -\u003e This was documented.\n      * [x] Create history report more searchable by LibreOffice.\n        Otherwise, the low searchability will always take a toll during history analysis.\n      * [x] Improve hill climber repair performance by trying every supply value combination once instead of trying out all free supplies, which contains duplicates.\n   * [x] Assign teachers to courses.\n      * [x] Only grouping by course is important.\n      * [x] Determine not allocated courses and their not used demands.\n      * [ ] Determine defying groups and their not used and used demands.\n      * [ ] Determine a representative allocation of defying groups and undo all allocations of defying groups.\n      * [x] Use free demands of the representative for the repair of each defying group.\n      * [x] Randomize each repair step.\n      * [x] Select only suitable teachers.\n      * [x] Repair all incorrect values and not just some by repair any constraint error and by always converting all groupings to groupings by course id.\n      * [ ] Deallocate all lines with a course id, that has an error, during each repair iteration step.\n      * [ ] Optionally deallocate all lines with a subject, that has an error, during each repair iteration step.\n      * [ ] Use unused demands.\n      * [ ] Randomization performance seems to be bad.\n   * [ ] Assign pupils to courses.\n      * [ ] Only assign courses to the students demands, which fit their subject and vintage.\n* [ ] Implement constraint query system for tables and use it in constraint based repair. Online optimization would be needed for that.\n* [x] Improve analysis by making it more table like and create guidelines for table (searchability and simplicity) versus tree (organization).\n* [ ] Add temporary storage project to private website.\n* [ ] Adjust teacher subject suitability and course subject in test data. Some course subjects may need to have a teacher for the subject adjustments.\n* [ ] Create a presentation for the problem.\n* [ ] Test all constraints.\n* [ ] Fix last element of solution paths in logging (i.e. `net/splitcells/gel/GelEnv/demands.allocations.allocations/`).\n* [ ] Make example data more sane,","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1656280772,"metadata":{"github-id":"UCE_lAHOFCNQW84xHWf2zjAIYsM"},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n   - [ ] Use custom initializers for constraint based repair in order to improve results.\n   - [ ] Render performance data in Graph and monitor results,\nin order to get a felling, how much needs to be done and how much effect a single action had.\nDo this by reimplementing the old problem specific initializers.\n(Currently done via https://localhost:8444/net/splitcells/martins/avots/website/test.html)\n- [ ] Compare repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [x] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [x] Remove usage of Node logging interface. -\u003e I removed some Node usage and deprecated the interface instead.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way. -\u003e UiRouter can be used as an alternative Domsole.\n   - [x] Fix XML outpout for Domsole. -\u003e Will fix it, when it is used again or the code is cleaned up during maintenance.\n* [x] Allocations do not work for nested problems, because there is an equality problem. -\u003e Allocations had an inconsistent path.\n``Context of demand for removal should be part demands or used demands, but is not:\nRemoval context is           Database[demands, Rails For School Scheduling, allocations],\ndemands context is          [demands, Rails For School Scheduling] and\nused demands context is Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used].``\n* [ ] Imitate railed courses to teacher allocation solver from personal master thesis.\n   * [x] Assign courses to rails.\n      * [x] Every course is currently on the same rail.\n      * [x] Every course has no allocated hours.\n      * [x] Completely free courses are ignored by constraint repair.\n         This happens when linear initialization is omitted or if repair reaches such state by accident.\n         * [x] The same demand is allocated multiple times in one optimization step.\n            * [x] freeSlots is determined incorrectly, because it assumes that demand grouping is always happaning along the course id.\n      * [x] The average course length of the generated demands is not correct (half of target).\n      * [x] Selecting element of a free course slot leads to an error, because there are fewer left than assumed.\n         * freeDemandGroups contains only demands, that are freed in the current step. Already free demands are ignored.\n         * solutionView still uses all demands of freeDemandGroups.\n         * [x] allocatedCourses needs therefore to be checked.\n         * [x] chosenSplit should also consider the real number of demands of a course to be repaired.\n         * [x] freeSlots needs to be filled with pre optimize unused demands.\n         * [x] How is determined, which demand gets void rail? -\u003e via nonEmptySlotCount\n      * [x] The allocated course hours is calculated incorrectly by the repair. Done via a repair hill climber.\n         * [x] retainedAllocatedHours is calculated incorrectly as it does not substract allocated hourse which are removed in the current optimization step.\n         * [x] There seems to be a problem in the understanding of index relations between allocations, free demands and used \ndemands. -\u003e This was documented.\n      * [x] Create history report more searchable by LibreOffice.\n        Otherwise, the low searchability will always take a toll during history analysis.\n      * [x] Improve hill climber repair performance by trying every supply value combination once instead of trying out all free supplies, which contains duplicates.\n   * [x] Assign teachers to courses.\n      * [x] Only grouping by course is important.\n      * [x] Determine not allocated courses and their not used demands.\n      * [ ] Determine defying groups and their not used and used demands.\n      * [ ] Determine a representative allocation of defying groups and undo all allocations of defying groups.\n      * [x] Use free demands of the representative for the repair of each defying group.\n      * [x] Randomize each repair step.\n      * [x] Select only suitable teachers.\n      * [x] Repair all incorrect values and not just some by repair any constraint error and by always converting all groupings to groupings by course id.\n      * [ ] Deallocate all lines with a course id, that has an error, during each repair iteration step.\n      * [ ] Optionally deallocate all lines with a subject, that has an error, during each repair iteration step.\n      * [ ] Use unused demands.\n      * [ ] Randomization performance seems to be bad.\n   * [ ] Assign pupils to courses.\n      * [ ] Only assign courses to the students demands, which fit their subject and vintage.\n      * [ ] Is the following constraint correct? `r.forAll(RAIL).forAll(STUDENT).then(allSame(COURSE_ID));`\n* [ ] Implement constraint query system for tables and use it in constraint based repair. Online optimization would be needed for that.\n* [x] Improve analysis by making it more table like and create guidelines for table (searchability and simplicity) versus tree (organization).\n* [ ] Add temporary storage project to private website.\n* [ ] Adjust teacher subject suitability and course subject in test data. Some course subjects may need to have a teacher for the subject adjustments.\n* [ ] Create a presentation for the problem.\n* [ ] Test all constraints.\n* [ ] Fix last element of solution paths in logging (i.e. `net/splitcells/gel/GelEnv/demands.allocations.allocations/`).\n* [ ] Make example data more sane,","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1656449722,"metadata":{"github-id":"UCE_lAHOFCNQW84xHWf2zjAqupc"},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n   - [ ] Use custom initializers for constraint based repair in order to improve results.\n   - [ ] Render performance data in Graph and monitor results,\nin order to get a felling, how much needs to be done and how much effect a single action had.\nDo this by reimplementing the old problem specific initializers.\n(Currently done via https://localhost:8444/net/splitcells/martins/avots/website/test.html)\n- [ ] Compare repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [x] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [x] Remove usage of Node logging interface. -\u003e I removed some Node usage and deprecated the interface instead.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way. -\u003e UiRouter can be used as an alternative Domsole.\n   - [x] Fix XML outpout for Domsole. -\u003e Will fix it, when it is used again or the code is cleaned up during maintenance.\n* [x] Allocations do not work for nested problems, because there is an equality problem. -\u003e Allocations had an inconsistent path.\n``Context of demand for removal should be part demands or used demands, but is not:\nRemoval context is           Database[demands, Rails For School Scheduling, allocations],\ndemands context is          [demands, Rails For School Scheduling] and\nused demands context is Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used].``\n* [ ] Imitate railed courses to teacher allocation solver from personal master thesis.\n   * [x] Assign courses to rails.\n      * [x] Every course is currently on the same rail.\n      * [x] Every course has no allocated hours.\n      * [x] Completely free courses are ignored by constraint repair.\n         This happens when linear initialization is omitted or if repair reaches such state by accident.\n         * [x] The same demand is allocated multiple times in one optimization step.\n            * [x] freeSlots is determined incorrectly, because it assumes that demand grouping is always happaning along the course id.\n      * [x] The average course length of the generated demands is not correct (half of target).\n      * [x] Selecting element of a free course slot leads to an error, because there are fewer left than assumed.\n         * freeDemandGroups contains only demands, that are freed in the current step. Already free demands are ignored.\n         * solutionView still uses all demands of freeDemandGroups.\n         * [x] allocatedCourses needs therefore to be checked.\n         * [x] chosenSplit should also consider the real number of demands of a course to be repaired.\n         * [x] freeSlots needs to be filled with pre optimize unused demands.\n         * [x] How is determined, which demand gets void rail? -\u003e via nonEmptySlotCount\n      * [x] The allocated course hours is calculated incorrectly by the repair. Done via a repair hill climber.\n         * [x] retainedAllocatedHours is calculated incorrectly as it does not substract allocated hourse which are removed in the current optimization step.\n         * [x] There seems to be a problem in the understanding of index relations between allocations, free demands and used \ndemands. -\u003e This was documented.\n      * [x] Create history report more searchable by LibreOffice.\n        Otherwise, the low searchability will always take a toll during history analysis.\n      * [x] Improve hill climber repair performance by trying every supply value combination once instead of trying out all free supplies, which contains duplicates.\n   * [x] Assign teachers to courses.\n      * [x] Only grouping by course is important.\n      * [x] Determine not allocated courses and their not used demands.\n      * [ ] Determine defying groups and their not used and used demands.\n      * [ ] Determine a representative allocation of defying groups and undo all allocations of defying groups.\n      * [x] Use free demands of the representative for the repair of each defying group.\n      * [x] Randomize each repair step.\n      * [x] Select only suitable teachers.\n      * [x] Repair all incorrect values and not just some by repair any constraint error and by always converting all groupings to groupings by course id.\n      * [ ] Deallocate all lines with a course id, that has an error, during each repair iteration step.\n      * [ ] Optionally deallocate all lines with a subject, that has an error, during each repair iteration step.\n      * [ ] Use unused demands.\n      * [ ] Randomization performance seems to be bad.\n   * [ ] Assign pupils to courses.\n      * [ ] Only assign courses to the students demands, which fit their subject and vintage.\n      * [x] Is the following constraint correct? `r.forAll(RAIL).forAll(STUDENT).then(allSame(COURSE_ID));` -\u003e No, this was caused by misreading the previous version of the software.\n* [ ] Implement constraint query system for tables and use it in constraint based repair. Online optimization would be needed for that.\n* [x] Improve analysis by making it more table like and create guidelines for table (searchability and simplicity) versus tree (organization).\n* [ ] Add temporary storage project to private website.\n* [ ] Adjust teacher subject suitability and course subject in test data. Some course subjects may need to have a teacher for the subject adjustments.\n* [ ] Create a presentation for the problem.\n* [ ] Test all constraints.\n* [ ] Fix last element of solution paths in logging (i.e. `net/splitcells/gel/GelEnv/demands.allocations.allocations/`).\n* [ ] Make example data more sane,","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1656619032,"metadata":{"github-id":"UCE_lAHOFCNQW84xHWf2zjBJz-o"},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n   - [ ] Use custom initializers for constraint based repair in order to improve results.\n   - [ ] Render performance data in Graph and monitor results,\nin order to get a felling, how much needs to be done and how much effect a single action had.\nDo this by reimplementing the old problem specific initializers.\n(Currently done via https://localhost:8444/net/splitcells/martins/avots/website/test.html)\n- [ ] Compare repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [x] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [x] Remove usage of Node logging interface. -\u003e I removed some Node usage and deprecated the interface instead.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way. -\u003e UiRouter can be used as an alternative Domsole.\n   - [x] Fix XML outpout for Domsole. -\u003e Will fix it, when it is used again or the code is cleaned up during maintenance.\n* [x] Allocations do not work for nested problems, because there is an equality problem. -\u003e Allocations had an inconsistent path.\n``Context of demand for removal should be part demands or used demands, but is not:\nRemoval context is           Database[demands, Rails For School Scheduling, allocations],\ndemands context is          [demands, Rails For School Scheduling] and\nused demands context is Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used].``\n* [ ] Imitate railed courses to teacher allocation solver from personal master thesis.\n   * [x] Assign courses to rails.\n      * [x] Every course is currently on the same rail.\n      * [x] Every course has no allocated hours.\n      * [x] Completely free courses are ignored by constraint repair.\n         This happens when linear initialization is omitted or if repair reaches such state by accident.\n         * [x] The same demand is allocated multiple times in one optimization step.\n            * [x] freeSlots is determined incorrectly, because it assumes that demand grouping is always happaning along the course id.\n      * [x] The average course length of the generated demands is not correct (half of target).\n      * [x] Selecting element of a free course slot leads to an error, because there are fewer left than assumed.\n         * freeDemandGroups contains only demands, that are freed in the current step. Already free demands are ignored.\n         * solutionView still uses all demands of freeDemandGroups.\n         * [x] allocatedCourses needs therefore to be checked.\n         * [x] chosenSplit should also consider the real number of demands of a course to be repaired.\n         * [x] freeSlots needs to be filled with pre optimize unused demands.\n         * [x] How is determined, which demand gets void rail? -\u003e via nonEmptySlotCount\n      * [x] The allocated course hours is calculated incorrectly by the repair. Done via a repair hill climber.\n         * [x] retainedAllocatedHours is calculated incorrectly as it does not substract allocated hourse which are removed in the current optimization step.\n         * [x] There seems to be a problem in the understanding of index relations between allocations, free demands and used \ndemands. -\u003e This was documented.\n      * [x] Create history report more searchable by LibreOffice.\n        Otherwise, the low searchability will always take a toll during history analysis.\n      * [x] Improve hill climber repair performance by trying every supply value combination once instead of trying out all free supplies, which contains duplicates.\n   * [x] Assign teachers to courses.\n      * [x] Only grouping by course is important.\n      * [x] Determine not allocated courses and their not used demands.\n      * [ ] Determine defying groups and their not used and used demands.\n      * [ ] Determine a representative allocation of defying groups and undo all allocations of defying groups.\n      * [x] Use free demands of the representative for the repair of each defying group.\n      * [x] Randomize each repair step.\n      * [x] Select only suitable teachers.\n      * [x] Repair all incorrect values and not just some by repair any constraint error and by always converting all groupings to groupings by course id.\n      * [ ] Deallocate all lines with a course id, that has an error, during each repair iteration step.\n      * [ ] Optionally deallocate all lines with a subject, that has an error, during each repair iteration step.\n      * [ ] Use unused demands.\n      * [ ] Randomization performance seems to be bad.\n   * [ ] Assign pupils to courses.\n      * [ ] Only assign courses to the students demands, which fit their subject and vintage.\n      * [x] Is the following constraint correct? `r.forAll(RAIL).forAll(STUDENT).then(allSame(COURSE_ID));` -\u003e No, this was caused by misreading the previous version of the software.\n      * [ ] Make it easy to select constraint path during repair, via query interface.\n* [ ] Implement constraint query system for tables and use it in constraint based repair. Online optimization would be needed for that.\n* [x] Improve analysis by making it more table like and create guidelines for table (searchability and simplicity) versus tree (organization).\n* [ ] Add temporary storage project to private website.\n* [ ] Adjust teacher subject suitability and course subject in test data. Some course subjects may need to have a teacher for the subject adjustments.\n* [ ] Create a presentation for the problem.\n* [ ] Test all constraints.\n* [ ] Fix last element of solution paths in logging (i.e. `net/splitcells/gel/GelEnv/demands.allocations.allocations/`).\n* [ ] Make example data more sane,","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1657224500,"metadata":{"github-id":"UCE_lAHOFCNQW84xHWf2zjCeAnA"},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n   - [ ] Use custom initializers for constraint based repair in order to improve results.\n   - [ ] Render performance data in Graph and monitor results,\nin order to get a felling, how much needs to be done and how much effect a single action had.\nDo this by reimplementing the old problem specific initializers.\n(Currently done via https://localhost:8444/net/splitcells/martins/avots/website/test.html)\n- [ ] Compare repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [x] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [x] Remove usage of Node logging interface. -\u003e I removed some Node usage and deprecated the interface instead.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way. -\u003e UiRouter can be used as an alternative Domsole.\n   - [x] Fix XML outpout for Domsole. -\u003e Will fix it, when it is used again or the code is cleaned up during maintenance.\n* [x] Allocations do not work for nested problems, because there is an equality problem. -\u003e Allocations had an inconsistent path.\n``Context of demand for removal should be part demands or used demands, but is not:\nRemoval context is           Database[demands, Rails For School Scheduling, allocations],\ndemands context is          [demands, Rails For School Scheduling] and\nused demands context is Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used].``\n* [ ] Imitate railed courses to teacher allocation solver from personal master thesis.\n   * [x] Assign courses to rails.\n      * [x] Every course is currently on the same rail.\n      * [x] Every course has no allocated hours.\n      * [x] Completely free courses are ignored by constraint repair.\n         This happens when linear initialization is omitted or if repair reaches such state by accident.\n         * [x] The same demand is allocated multiple times in one optimization step.\n            * [x] freeSlots is determined incorrectly, because it assumes that demand grouping is always happaning along the course id.\n      * [x] The average course length of the generated demands is not correct (half of target).\n      * [x] Selecting element of a free course slot leads to an error, because there are fewer left than assumed.\n         * freeDemandGroups contains only demands, that are freed in the current step. Already free demands are ignored.\n         * solutionView still uses all demands of freeDemandGroups.\n         * [x] allocatedCourses needs therefore to be checked.\n         * [x] chosenSplit should also consider the real number of demands of a course to be repaired.\n         * [x] freeSlots needs to be filled with pre optimize unused demands.\n         * [x] How is determined, which demand gets void rail? -\u003e via nonEmptySlotCount\n      * [x] The allocated course hours is calculated incorrectly by the repair. Done via a repair hill climber.\n         * [x] retainedAllocatedHours is calculated incorrectly as it does not substract allocated hourse which are removed in the current optimization step.\n         * [x] There seems to be a problem in the understanding of index relations between allocations, free demands and used \ndemands. -\u003e This was documented.\n      * [x] Create history report more searchable by LibreOffice.\n        Otherwise, the low searchability will always take a toll during history analysis.\n      * [x] Improve hill climber repair performance by trying every supply value combination once instead of trying out all free supplies, which contains duplicates.\n   * [x] Assign teachers to courses.\n      * [x] Only grouping by course is important.\n      * [x] Determine not allocated courses and their not used demands.\n      * [ ] Determine defying groups and their not used and used demands.\n      * [ ] Determine a representative allocation of defying groups and undo all allocations of defying groups.\n      * [x] Use free demands of the representative for the repair of each defying group.\n      * [x] Randomize each repair step.\n      * [x] Select only suitable teachers.\n      * [x] Repair all incorrect values and not just some by repair any constraint error and by always converting all groupings to groupings by course id.\n      * [ ] Deallocate all lines with a course id, that has an error, during each repair iteration step.\n      * [ ] Optionally deallocate all lines with a subject, that has an error, during each repair iteration step.\n      * [ ] Use unused demands.\n      * [ ] Randomization performance seems to be bad.\n   * [ ] Assign pupils to courses.\n      * [ ] Only assign courses to the students demands, which fit their subject and vintage.\n      * [x] Is the following constraint correct? `r.forAll(RAIL).forAll(STUDENT).then(allSame(COURSE_ID));` -\u003e No, this was caused by misreading the previous version of the software.\n      * [x] Make it easy to select constraint path during repair, via query interface.\n* [ ] Implement constraint query system for tables and use it in constraint based repair. Online optimization would be needed for that.\n* [x] Improve analysis by making it more table like and create guidelines for table (searchability and simplicity) versus tree (organization).\n* [ ] Add temporary storage project to private website.\n* [ ] Adjust teacher subject suitability and course subject in test data. Some course subjects may need to have a teacher for the subject adjustments.\n* [ ] Create a presentation for the problem.\n* [ ] Test all constraints.\n* [ ] Fix last element of solution paths in logging (i.e. `net/splitcells/gel/GelEnv/demands.allocations.allocations/`).\n* [ ] Make example data more sane,","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1657224502,"metadata":{"github-id":"UCE_lAHOFCNQW84xHWf2zjCeAoE"},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n   - [ ] Use custom initializers for constraint based repair in order to improve results.\n   - [ ] Render performance data in Graph and monitor results,\nin order to get a felling, how much needs to be done and how much effect a single action had.\nDo this by reimplementing the old problem specific initializers.\n(Currently done via https://localhost:8444/net/splitcells/martins/avots/website/test.html)\n- [ ] Compare repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [x] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [x] Remove usage of Node logging interface. -\u003e I removed some Node usage and deprecated the interface instead.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way. -\u003e UiRouter can be used as an alternative Domsole.\n   - [x] Fix XML outpout for Domsole. -\u003e Will fix it, when it is used again or the code is cleaned up during maintenance.\n* [x] Allocations do not work for nested problems, because there is an equality problem. -\u003e Allocations had an inconsistent path.\n``Context of demand for removal should be part demands or used demands, but is not:\nRemoval context is           Database[demands, Rails For School Scheduling, allocations],\ndemands context is          [demands, Rails For School Scheduling] and\nused demands context is Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used].``\n* [ ] Imitate railed courses to teacher allocation solver from personal master thesis.\n   * [x] Assign courses to rails.\n      * [x] Every course is currently on the same rail.\n      * [x] Every course has no allocated hours.\n      * [x] Completely free courses are ignored by constraint repair.\n         This happens when linear initialization is omitted or if repair reaches such state by accident.\n         * [x] The same demand is allocated multiple times in one optimization step.\n            * [x] freeSlots is determined incorrectly, because it assumes that demand grouping is always happaning along the course id.\n      * [x] The average course length of the generated demands is not correct (half of target).\n      * [x] Selecting element of a free course slot leads to an error, because there are fewer left than assumed.\n         * freeDemandGroups contains only demands, that are freed in the current step. Already free demands are ignored.\n         * solutionView still uses all demands of freeDemandGroups.\n         * [x] allocatedCourses needs therefore to be checked.\n         * [x] chosenSplit should also consider the real number of demands of a course to be repaired.\n         * [x] freeSlots needs to be filled with pre optimize unused demands.\n         * [x] How is determined, which demand gets void rail? -\u003e via nonEmptySlotCount\n      * [x] The allocated course hours is calculated incorrectly by the repair. Done via a repair hill climber.\n         * [x] retainedAllocatedHours is calculated incorrectly as it does not substract allocated hourse which are removed in the current optimization step.\n         * [x] There seems to be a problem in the understanding of index relations between allocations, free demands and used \ndemands. -\u003e This was documented.\n      * [x] Create history report more searchable by LibreOffice.\n        Otherwise, the low searchability will always take a toll during history analysis.\n      * [x] Improve hill climber repair performance by trying every supply value combination once instead of trying out all free supplies, which contains duplicates.\n   * [x] Assign teachers to courses.\n      * [x] Only grouping by course is important.\n      * [x] Determine not allocated courses and their not used demands.\n      * [ ] Determine defying groups and their not used and used demands.\n      * [ ] Determine a representative allocation of defying groups and undo all allocations of defying groups.\n      * [x] Use free demands of the representative for the repair of each defying group.\n      * [x] Randomize each repair step.\n      * [x] Select only suitable teachers.\n      * [x] Repair all incorrect values and not just some by repair any constraint error and by always converting all groupings to groupings by course id.\n      * [ ] Deallocate all lines with a course id, that has an error, during each repair iteration step.\n      * [ ] Optionally deallocate all lines with a subject, that has an error, during each repair iteration step.\n      * [ ] Use unused demands.\n      * [ ] Randomization performance seems to be bad.\n   * [ ] Assign pupils to courses.\n      * [ ] Only assign courses to the students demands, which fit their subject and vintage.\n      * [x] Is the following constraint correct? `r.forAll(RAIL).forAll(STUDENT).then(allSame(COURSE_ID));` -\u003e No, this was caused by misreading the previous version of the software.\n      * [ ] Make it easy to select constraint path during repair, via query interface.\n* [ ] Implement constraint query system for tables and use it in constraint based repair. Online optimization would be needed for that.\n* [x] Improve analysis by making it more table like and create guidelines for table (searchability and simplicity) versus tree (organization).\n* [ ] Add temporary storage project to private website.\n* [ ] Adjust teacher subject suitability and course subject in test data. Some course subjects may need to have a teacher for the subject adjustments.\n* [ ] Create a presentation for the problem.\n* [ ] Test all constraints.\n* [ ] Fix last element of solution paths in logging (i.e. `net/splitcells/gel/GelEnv/demands.allocations.allocations/`).\n* [ ] Make example data more sane,","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1658264469,"metadata":{"github-id":"UCE_lAHOFCNQW84xHWf2zjEoYQg"},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n   - [ ] Use custom initializers for constraint based repair in order to improve results.\n   - [ ] Render performance data in Graph and monitor results,\nin order to get a felling, how much needs to be done and how much effect a single action had.\nDo this by reimplementing the old problem specific initializers.\n(Currently done via https://localhost:8444/net/splitcells/martins/avots/website/test.html)\n- [ ] Compare repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [x] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [x] Remove usage of Node logging interface. -\u003e I removed some Node usage and deprecated the interface instead.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way. -\u003e UiRouter can be used as an alternative Domsole.\n   - [x] Fix XML outpout for Domsole. -\u003e Will fix it, when it is used again or the code is cleaned up during maintenance.\n* [x] Allocations do not work for nested problems, because there is an equality problem. -\u003e Allocations had an inconsistent path.\n``Context of demand for removal should be part demands or used demands, but is not:\nRemoval context is           Database[demands, Rails For School Scheduling, allocations],\ndemands context is          [demands, Rails For School Scheduling] and\nused demands context is Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used].``\n* [ ] Imitate railed courses to teacher allocation solver from personal master thesis.\n   * [x] Assign courses to rails.\n      * [x] Every course is currently on the same rail.\n      * [x] Every course has no allocated hours.\n      * [x] Completely free courses are ignored by constraint repair.\n         This happens when linear initialization is omitted or if repair reaches such state by accident.\n         * [x] The same demand is allocated multiple times in one optimization step.\n            * [x] freeSlots is determined incorrectly, because it assumes that demand grouping is always happaning along the course id.\n      * [x] The average course length of the generated demands is not correct (half of target).\n      * [x] Selecting element of a free course slot leads to an error, because there are fewer left than assumed.\n         * freeDemandGroups contains only demands, that are freed in the current step. Already free demands are ignored.\n         * solutionView still uses all demands of freeDemandGroups.\n         * [x] allocatedCourses needs therefore to be checked.\n         * [x] chosenSplit should also consider the real number of demands of a course to be repaired.\n         * [x] freeSlots needs to be filled with pre optimize unused demands.\n         * [x] How is determined, which demand gets void rail? -\u003e via nonEmptySlotCount\n      * [x] The allocated course hours is calculated incorrectly by the repair. Done via a repair hill climber.\n         * [x] retainedAllocatedHours is calculated incorrectly as it does not substract allocated hourse which are removed in the current optimization step.\n         * [x] There seems to be a problem in the understanding of index relations between allocations, free demands and used \ndemands. -\u003e This was documented.\n      * [x] Create history report more searchable by LibreOffice.\n        Otherwise, the low searchability will always take a toll during history analysis.\n      * [x] Improve hill climber repair performance by trying every supply value combination once instead of trying out all free supplies, which contains duplicates.\n   * [x] Assign teachers to courses.\n      * [x] Only grouping by course is important.\n      * [x] Determine not allocated courses and their not used demands.\n      * [ ] Determine defying groups and their not used and used demands.\n      * [ ] Determine a representative allocation of defying groups and undo all allocations of defying groups.\n      * [x] Use free demands of the representative for the repair of each defying group.\n      * [x] Randomize each repair step.\n      * [x] Select only suitable teachers.\n      * [x] Repair all incorrect values and not just some by repair any constraint error and by always converting all groupings to groupings by course id.\n      * [ ] Deallocate all lines with a course id, that has an error, during each repair iteration step.\n      * [ ] Optionally deallocate all lines with a subject, that has an error, during each repair iteration step.\n      * [ ] Use unused demands.\n      * [ ] Randomization performance seems to be bad.\n   * [ ] Assign pupils to courses.\n      * [ ] Only assign courses to the students demands, which fit their subject and vintage.\n      * [x] Is the following constraint correct? `r.forAll(RAIL).forAll(STUDENT).then(allSame(COURSE_ID));` -\u003e No, this was caused by misreading the previous version of the software.\n      * [ ] Create cache for routing rating by group id.\n      * [ ] Make it easy to select constraint path during repair, via query interface.\n* [ ] Implement constraint query system for tables and use it in constraint based repair. Online optimization would be needed for that.\n* [x] Improve analysis by making it more table like and create guidelines for table (searchability and simplicity) versus tree (organization).\n* [ ] Add temporary storage project to private website.\n* [ ] Adjust teacher subject suitability and course subject in test data. Some course subjects may need to have a teacher for the subject adjustments.\n* [ ] Create a presentation for the problem.\n* [ ] Test all constraints.\n* [ ] Fix last element of solution paths in logging (i.e. `net/splitcells/gel/GelEnv/demands.allocations.allocations/`).\n* [ ] Make example data more sane,","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1658434442,"metadata":{"github-id":"UCE_lAHOFCNQW84xHWf2zjFHJEY"},"target":"db57d484a370d66102456bcd59d41eb7cba946288d1d0586e43b217ae0975377","message":"- [x] Model Problem.\n- [x] Test rating with simple example problems. -\u003e I think it's enough to solve the problem and then verify the solution manually.\n- [x] Create meaningful random instance.\n- [ ] Solve random instance via the repair based optimizer.\n   - [ ] Use custom initializers for constraint based repair in order to improve results.\n   - [ ] Render performance data in Graph and monitor results,\nin order to get a felling, how much needs to be done and how much effect a single action had.\nDo this by reimplementing the old problem specific initializers.\n(Currently done via https://localhost:8444/net/splitcells/martins/avots/website/test.html)\n- [ ] Compare repairer to hill climber.\n- [ ] Document problem, because it seems to be hard to understand for third party.\n- [x] Implement Domsole, which can output a list of values, that can be easily graphed via LibreOffice and CLI tools.\nThis can be used in order to easily render histograms of the solution rating during the optimization.\n   - [x] Remove usage of Node logging interface. -\u003e I removed some Node usage and deprecated the interface instead.\n   - [x] Replace Node logging interface with Perspective logging interface.\n   - [x] Create one ouput file for each logging context and enable creating csv files this way. -\u003e UiRouter can be used as an alternative Domsole.\n   - [x] Fix XML outpout for Domsole. -\u003e Will fix it, when it is used again or the code is cleaned up during maintenance.\n* [x] Allocations do not work for nested problems, because there is an equality problem. -\u003e Allocations had an inconsistent path.\n``Context of demand for removal should be part demands or used demands, but is not:\nRemoval context is           Database[demands, Rails For School Scheduling, allocations],\ndemands context is          [demands, Rails For School Scheduling] and\nused demands context is Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used].``\n* [ ] Imitate railed courses to teacher allocation solver from personal master thesis.\n   * [x] Assign courses to rails.\n      * [x] Every course is currently on the same rail.\n      * [x] Every course has no allocated hours.\n      * [x] Completely free courses are ignored by constraint repair.\n         This happens when linear initialization is omitted or if repair reaches such state by accident.\n         * [x] The same demand is allocated multiple times in one optimization step.\n            * [x] freeSlots is determined incorrectly, because it assumes that demand grouping is always happaning along the course id.\n      * [x] The average course length of the generated demands is not correct (half of target).\n      * [x] Selecting element of a free course slot leads to an error, because there are fewer left than assumed.\n         * freeDemandGroups contains only demands, that are freed in the current step. Already free demands are ignored.\n         * solutionView still uses all demands of freeDemandGroups.\n         * [x] allocatedCourses needs therefore to be checked.\n         * [x] chosenSplit should also consider the real number of demands of a course to be repaired.\n         * [x] freeSlots needs to be filled with pre optimize unused demands.\n         * [x] How is determined, which demand gets void rail? -\u003e via nonEmptySlotCount\n      * [x] The allocated course hours is calculated incorrectly by the repair. Done via a repair hill climber.\n         * [x] retainedAllocatedHours is calculated incorrectly as it does not substract allocated hourse which are removed in the current optimization step.\n         * [x] There seems to be a problem in the understanding of index relations between allocations, free demands and used \ndemands. -\u003e This was documented.\n      * [x] Create history report more searchable by LibreOffice.\n        Otherwise, the low searchability will always take a toll during history analysis.\n      * [x] Improve hill climber repair performance by trying every supply value combination once instead of trying out all free supplies, which contains duplicates.\n   * [x] Assign teachers to courses.\n      * [x] Only grouping by course is important.\n      * [x] Determine not allocated courses and their not used demands.\n      * [ ] Determine defying groups and their not used and used demands.\n      * [ ] Determine a representative allocation of defying groups and undo all allocations of defying groups.\n      * [x] Use free demands of the representative for the repair of each defying group.\n      * [x] Randomize each repair step.\n      * [x] Select only suitable teachers.\n      * [x] Repair all incorrect values and not just some by repair any constraint error and by always converting all groupings to groupings by course id.\n      * [ ] Deallocate all lines with a course id, that has an error, during each repair iteration step.\n      * [ ] Optionally deallocate all lines with a subject, that has an error, during each repair iteration step.\n      * [ ] Use unused demands.\n      * [ ] Randomization performance seems to be bad.\n   * [ ] Assign pupils to courses.\n      * [ ] Only assign courses to the students demands, which fit their subject and vintage.\n      * [x] Is the following constraint correct? `r.forAll(RAIL).forAll(STUDENT).then(allSame(COURSE_ID));` -\u003e No, this was caused by misreading the previous version of the software.\n      * [x] Create cache for children rating. -\u003e Obsolete, because symptom was caused by too many calls of defying by group id.\n      * [x] Create performance test for defying by groupd id. -\u003e This was caused by too many calls of defying by group id.\n      * [x] Create cache for routing rating by group id. -\u003e This was caused by too many calls of defying by group id.\n      * [x] Make it easy to select constraint path during repair, via query interface.\n* [ ] Implement constraint query system for tables and use it in constraint based repair. Online optimization would be needed for that.\n* [x] Improve analysis by making it more table like and create guidelines for table (searchability and simplicity) versus tree (organization).\n* [ ] Add temporary storage project to private website.\n* [ ] Adjust teacher subject suitability and course subject in test data. Some course subjects may need to have a teacher for the subject adjustments.\n* [ ] Create a presentation for the problem.\n* [ ] Test all constraints.\n* [ ] Fix last element of solution paths in logging (i.e. `net/splitcells/gel/GelEnv/demands.allocations.allocations/`).\n* [ ] Make example data more sane,","files":null},{"type":2,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1616461469,"metadata":{"github-id":"MDE3OlJlbmFtZWRUaXRsZUV2ZW50NDQ5MzI0NDU0Ng=="},"title":"Solve Schienen-Planung.","was":"Oral Exam problem."},{"type":3,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1618519192,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDgyMDcxNTk0OQ==","github-url":"https://github.com/www-splitcells-net/net.splitcells.network/issues/8#issuecomment-820715949"},"message":"- [ ] I noticed, that ForAll constraint type does not support filter lines during propagation.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1618519192,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6NDUyMjc5MzU1"},"target":"1b3ac3b2f8e4d39e9b2ec75dc912a2c2f24866f05df0dc6ce7ebfe920f307628","message":"- [ ] I noticed, that ForAll constraint type does not support filter lines during propagation. This is needed in order to define a rule for a subset of all variables.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1620080470,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6NDU3MjU2OTgw"},"target":"1b3ac3b2f8e4d39e9b2ec75dc912a2c2f24866f05df0dc6ce7ebfe920f307628","message":"- [x] I noticed, that ForAll constraint type does not support filter lines during propagation. This is needed in order to define a rule for a subset of all variables.","files":null},{"type":2,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1624304647,"metadata":{"github-id":"MDE3OlJlbmFtZWRUaXRsZUV2ZW50NDkxODc4MzE0OQ=="},"title":"Solve school scheduling problem.","was":"Solve Schienen-Planung."},{"type":3,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1629757954,"metadata":{"github-id":"IC_kwDOFCNQW84146Ak","github-url":"https://github.com/www-splitcells-net/net.splitcells.network/issues/8#issuecomment-904110116"},"message":"- [ ] The linear initialization of a problem instance takes currently a long time.\nProfiling is needed.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1629757954,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6NDkwODgzNDEy"},"target":"027b953296391e8f6eaadd44bb0856049b5fde0e3e45388c7c87cf63e85e9107","message":"- [x] The linear initialization of a problem instance takes currently a long time.\nProfiling is needed.","files":null},{"type":3,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1630881343,"metadata":{"github-id":"IC_kwDOFCNQW842Kj6m","github-url":"https://github.com/www-splitcells-net/net.splitcells.network/issues/8#issuecomment-908738214"},"message":"- [ ] Create AllSameTest.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1630881343,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6NDk1MDE2NzQx"},"target":"54d88c2a0e8b120994dd7dbfafaaac1c545c5bfda2574dfc53fb9e67b6d2fcbe","message":"- [x] Create AllSameTest.","files":null},{"type":2,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1645050752,"metadata":{"github-id":"RTE_lADOFCNQW84xHWf2zwAAAAFqxNbR"},"title":"Solve school course scheduling problem.","was":"Solve school scheduling problem."},{"type":3,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1647991648,"metadata":{"github-id":"IC_kwDOFCNQW85AHoXt","github-url":"https://github.com/www-splitcells-net/net.splitcells.network/issues/8#issuecomment-1075742189"},"message":"* [ ] Allocations do not work for nested problems, because there is an equality problem.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1647991648,"metadata":{"github-id":"UCE_lALOFCNQW85AHoXtziHbMUk"},"target":"26a86c4bb7566c98dbe1f1004e848decd283a5fb9b746727c105379b2f7b6d25","message":"* [ ] Allocations do not work for nested problems, because there is an equality problem.\n`Context of demand for removal should be part demands or used demands, but is not:\nRemoval context is           Database[demands, Rails For School Scheduling, allocations],\ndemands context is          [demands, Rails For School Scheduling] and\nused demands context is Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used].`","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1647991657,"metadata":{"github-id":"UCE_lALOFCNQW85AHoXtziHbMWs"},"target":"26a86c4bb7566c98dbe1f1004e848decd283a5fb9b746727c105379b2f7b6d25","message":"* [ ] Allocations do not work for nested problems, because there is an equality problem.\n```Context of demand for removal should be part demands or used demands, but is not:\nRemoval context is           Database[demands, Rails For School Scheduling, allocations],\ndemands context is          [demands, Rails For School Scheduling] and\nused demands context is Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used].```","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1647993540,"metadata":{"github-id":"UCE_lALOFCNQW85AHoXtziHbVJQ"},"target":"26a86c4bb7566c98dbe1f1004e848decd283a5fb9b746727c105379b2f7b6d25","message":"* [x] Allocations do not work for nested problems, because there is an equality problem.\n```Context of demand for removal should be part demands or used demands, but is not:\nRemoval context is           Database[demands, Rails For School Scheduling, allocations],\ndemands context is          [demands, Rails For School Scheduling] and\nused demands context is Database[demands, Rails For School Scheduling, Teacher Allocation For Courses, demands-used].```","files":null}]}