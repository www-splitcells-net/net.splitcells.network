{"version":1,"ops":[{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1635903174,"metadata":{"github-id":"UCE_lAHOFCNQW84-KreDziYCFFk"},"target":"5db87a7e990d47becadc7c6890fd8a171d982f01abb503487d028382373857ef","message":"I always knew, that design of the output was not perfect,\nbut when I looked at [Tufte CSS](https://edwardtufte.github.io/tufte-css/)\nand others styles like that of [mdbook](https://rust-lang.github.io/mdBook/).\n\nThere are already task in order to fix some basic, before tackling the general problem,\nbut there was no real ticket for the whole problem.\nThe current examples are #26 and #37.\nAs hard it is to admit my previous XML format was better, because it was easy to adjust.\nThe only real Problem, was the fact, that it relied on XSL and other input formats were not really support,\nwhich is important, when different type of documents should be mixed (especially external ones).\n\nIn order to find the right design, there are multiple things needed to be considered:\n* [ ] Different input formats should be easily supported.\nThe important thing is, that these should be rendered in a unified way.\nCurrently, the headers and chapter titles of XML documents are rendered differently,\nthen titles in CommonMark files.\nEasy support of different document types is important to make adjustment in the future,\nin order to support the integration of external documents and for easy migrations between formats in internal documents.\n* [ ] It should be easy to use any kind of template and templating format for the resulting in order to try out third party layouts.\nOnly simplistic templates need to be supported, because complex templating did not show any advantages,\nbut creates great costs.\n   * [ ] Support a simplistic subset of Huge templates out of the box,\nwhere only replacing parts of a layout with the content's of predefined variables is supported.\n* [ ] Support rendering of all contents via Hugo.\n   * [ ] Try out alternative layout and output format with [Tufte CSS](https://edwardtufte.github.io/tufte-css/).","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1635903215,"metadata":{"github-id":"UCE_lAHOFCNQW84-KreDziYCFSo"},"target":"5db87a7e990d47becadc7c6890fd8a171d982f01abb503487d028382373857ef","message":"I always knew, that design of the output was not perfect,\nbut when I looked at [Tufte CSS](https://edwardtufte.github.io/tufte-css/)\nand others styles like that of [mdbook](https://rust-lang.github.io/mdBook/).\n\nThere are already task in order to fix some basic, before tackling the general problem,\nbut there was no real ticket for the whole problem.\nThe current examples are #26 and #37.\nAs hard it is to admit my previous XML format was better, because it was easy to adjust.\nThe only real Problem, was the fact, that it relied on XSL and other input formats were not really support,\nwhich is important, when different type of documents should be mixed (especially external ones).\n\nIn order to find the right design, there are multiple things needed to be considered:\n* [ ] Different input formats should be easily supported.\nThe important thing is, that these should be rendered in a unified way.\nCurrently, the headers and chapter titles of XML documents are rendered differently,\nthen titles in CommonMark files.\nEasy support of different document types is important to make adjustment in the future,\nin order to support the integration of external documents and for easy migrations between formats in internal documents.\n* [ ] It should be easy to use any kind of template and templating format for the resulting in order to try out third party layouts.\nOnly simplistic templates need to be supported, because complex templating did not show any advantages,\nbut creates great costs.\n   * [ ] Support a simplistic subset of Huge templates out of the box,\nwhere only replacing parts of a layout with the content's of predefined variables is supported.\n* [ ] Support rendering of all contents via Hugo. The results of #26 should be helpful for that.\n   * [ ] Try out alternative layout and output format with [Tufte CSS](https://edwardtufte.github.io/tufte-css/).","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1635903284,"metadata":{"github-id":"UCE_lAHOFCNQW84-KreDziYCFq0"},"target":"5db87a7e990d47becadc7c6890fd8a171d982f01abb503487d028382373857ef","message":"I always knew, that design of the output was not perfect,\nbut when I looked at [Tufte CSS](https://edwardtufte.github.io/tufte-css/)\nand others styles like that of [mdbook](https://rust-lang.github.io/mdBook/).\n\nThere are already task in order to fix some basic, before tackling the general problem,\nbut there was no real ticket for the whole problem.\nThe current examples are #26 and #37.\nAs hard it is to admit my previous XML format was better, because it was easy to adjust.\nThe only real Problem, was the fact, that it relied on XSL and other input formats were not really support,\nwhich is important, when different type of documents should be mixed (especially external ones).\n\nIn order to find the right design, there are multiple things needed to be considered:\n* [ ] Define relationship between, input, output and template format.\n* [ ] Different input formats should be easily supported.\nThe important thing is, that these should be rendered in a unified way.\nCurrently, the headers and chapter titles of XML documents are rendered differently,\nthen titles in CommonMark files.\nEasy support of different document types is important to make adjustment in the future,\nin order to support the integration of external documents and for easy migrations between formats in internal documents.\n* [ ] It should be easy to use any kind of template and templating format for the resulting in order to try out third party layouts.\nOnly simplistic templates need to be supported, because complex templating did not show any advantages,\nbut creates great costs.\n   * [ ] Support a simplistic subset of Huge templates out of the box,\nwhere only replacing parts of a layout with the content's of predefined variables is supported.\n* [ ] Support arbitrary output formats.\n   * [ ] Support rendering of all contents via Hugo. The results of #26 should be helpful for that.\n   * [ ] Try out alternative layout and output format with [Tufte CSS](https://edwardtufte.github.io/tufte-css/).","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1635903531,"metadata":{"github-id":"UCE_lAHOFCNQW84-KreDziYCGoE"},"target":"5db87a7e990d47becadc7c6890fd8a171d982f01abb503487d028382373857ef","message":"I always knew, that design of the output was not perfect,\nbut when I looked at [Tufte CSS](https://edwardtufte.github.io/tufte-css/)\nand others styles like that of [mdbook](https://rust-lang.github.io/mdBook/).\n\nThere are already task in order to fix some basic, before tackling the general problem,\nbut there was no real ticket for the whole problem.\nThe current examples are #26 and #37.\nAs hard it is to admit my previous XML format was better, because it was easy to adjust.\nThe only real Problem, was the fact, that it relied on XSL and other input formats were not really support,\nwhich is important, when different type of documents should be mixed (especially external ones).\n\nIn order to find the right design, there are multiple things needed to be considered:\n* [ ] Define relationship between, input, output and template/layout format.\n* [ ] Different input formats should be easily supported.\nThe important thing is, that these should be rendered in a unified way.\nCurrently, the headers and chapter titles of XML documents are rendered differently,\nthen titles in CommonMark files.\nEasy support of different document types is important to make adjustment in the future,\nin order to support the integration of external documents and for easy migrations between formats in internal documents.\n* [ ] It should be easy to use any kind of template and templating format for the resulting in order to try out third party layouts.\nOnly simplistic templates need to be supported, because complex templating did not show any advantages,\nbut creates great costs.\n   * [ ] Support a simplistic subset of Huge templates out of the box,\nwhere only replacing parts of a layout with the content's of predefined variables is supported.\n* [ ] Support arbitrary output formats.\n   * [ ] Make all Rendering in Java Code based on extensions.\nThis way not format gets a special treatment.\n   * [ ] Split up layout based on XSL and Den/XML rendering based on XSL,\nso it corresponds to the split in template and output format.\n   * [ ] Move complex layout from XSL to Java code.\n      * [ ] Implement Outline feature of layout for CommonMark files with the new Java layout system.\n   * [ ] Support rendering of all contents via Hugo. The results of #26 should be helpful for that.\n   * [ ] Try out alternative layout and output format with [Tufte CSS](https://edwardtufte.github.io/tufte-css/).","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1635903569,"metadata":{"github-id":"UCE_lAHOFCNQW84-KreDziYCG2o"},"target":"5db87a7e990d47becadc7c6890fd8a171d982f01abb503487d028382373857ef","message":"I always knew, that design of the output was not perfect,\nbut when I looked at [Tufte CSS](https://edwardtufte.github.io/tufte-css/)\nand others styles like that of [mdbook](https://rust-lang.github.io/mdBook/).\n\nThere are already task in order to fix some basic, before tackling the general problem,\nbut there was no real ticket for the whole problem.\nThe current examples are #26 and #37.\nAs hard it is to admit my previous XML format was better, because it was easy to adjust.\nThe only real Problem, was the fact, that it relied on XSL and other input formats were not really support,\nwhich is important, when different type of documents should be mixed (especially external ones).\n\nIn order to find the right design, there are multiple things needed to be considered:\n* [ ] Define relationship between, input, output and template/layout format.\n* [ ] Different input formats should be easily supported.\nThe important thing is, that these should be rendered in a unified way.\nCurrently, the headers and chapter titles of XML documents are rendered differently,\nthen titles in CommonMark files.\nEasy support of different document types is important to make adjustment in the future,\nin order to support the integration of external documents and for easy migrations between formats in internal documents.\n* [ ] It should be easy to use any kind of template and templating format for the resulting in order to try out third party layouts.\nOnly simplistic templates need to be supported, because complex templating did not show any advantages,\nbut creates great costs.\n   * [ ] Support a simplistic subset of Huge templates out of the box,\nwhere only replacing parts of a layout with the content's of predefined variables is supported.\n* [ ] Support arbitrary output formats.\n   * [ ] Make all Rendering in Java Code based on extensions.\nThis way not format gets a special treatment.\n   * [ ] Move complex layout from XSL to Java code.\n      * [ ] Split up layout based on XSL and Den/XML rendering based on XSL,\nso it corresponds to the split in template and output format.\n      * [ ] Implement Outline feature of layout for CommonMark files with the new Java layout system.\n   * [ ] Support rendering of all contents via Hugo. The results of #26 should be helpful for that.\n   * [ ] Try out alternative layout and output format with [Tufte CSS](https://edwardtufte.github.io/tufte-css/).","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1635903774,"metadata":{"github-id":"UCE_lAHOFCNQW84-KreDziYCHm4"},"target":"5db87a7e990d47becadc7c6890fd8a171d982f01abb503487d028382373857ef","message":"I always knew, that design of the output was not perfect,\nbut when I looked at [Tufte CSS](https://edwardtufte.github.io/tufte-css/)\nand others styles like that of [mdbook](https://rust-lang.github.io/mdBook/).\n\nThere are already task in order to fix some basic, before tackling the general problem,\nbut there was no real ticket for the whole problem.\nThe current examples are #26 and #37.\nAs hard it is to admit my previous XML format was better, because it was easy to adjust.\nThe only real Problem, was the fact, that it relied on XSL and other input formats were not really support,\nwhich is important, when different type of documents should be mixed (especially external ones).\n\nIn order to find the right design, there are multiple things needed to be considered:\n* [ ] Define relationship between, input, output and template/layout format.\n* [ ] Different input formats should be easily supported.\nThe important thing is, that these should be rendered in a unified way.\nCurrently, the headers and chapter titles of XML documents are rendered differently,\nthen titles in CommonMark files.\nEasy support of different document types is important to make adjustment in the future,\nin order to support the integration of external documents and for easy migrations between formats in internal documents.\n* [ ] It should be easy to use any kind of template and templating format for the resulting in order to try out third party layouts.\nOnly simplistic templates need to be supported, because complex templating did not show any advantages,\nbut creates great costs.\n   * [ ] Move complex layout from XSL to Java code.\n      * [ ] Split up layout based on XSL and Den/XML rendering based on XSL,\nso it corresponds to the split in template and output format.\n      * [ ] Implement Outline feature of layout for CommonMark files with the new Java layout system.\n   * [ ] Support a simplistic subset of Huge templates out of the box,\n   * [ ] Support rendering of all contents via Hugo. The results of #26 should be helpful for that.\nwhere only replacing parts of a layout with the content's of predefined variables is supported.\n* [ ] Support arbitrary output formats.\n   * [ ] Make all Rendering in Java Code based on extensions.\nThis way not format gets a special treatment.\n   * [ ] Create extension template for a required output format with a given layout.\n   * [ ] Try out alternative layout and output format with [Tufte CSS](https://edwardtufte.github.io/tufte-css/).","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1635903823,"metadata":{"github-id":"UCE_lAHOFCNQW84-KreDziYCH0M"},"target":"5db87a7e990d47becadc7c6890fd8a171d982f01abb503487d028382373857ef","message":"I always knew, that design of the website server output was not perfect,\nbut when I looked at [Tufte CSS](https://edwardtufte.github.io/tufte-css/)\nand others styles like that of [mdbook](https://rust-lang.github.io/mdBook/).\n\nThere are already task in order to fix some basic, before tackling the general problem,\nbut there was no real ticket for the whole problem.\nThe current examples are #26 and #37.\nAs hard it is to admit my previous XML format was better, because it was easy to adjust.\nThe only real Problem, was the fact, that it relied on XSL and other input formats were not really support,\nwhich is important, when different type of documents should be mixed (especially external ones).\n\nIn order to find the right design, there are multiple things needed to be considered:\n* [ ] Define relationship between, input, output and template/layout format.\n* [ ] Different input formats should be easily supported.\nThe important thing is, that these should be rendered in a unified way.\nCurrently, the headers and chapter titles of XML documents are rendered differently,\nthen titles in CommonMark files.\nEasy support of different document types is important to make adjustment in the future,\nin order to support the integration of external documents and for easy migrations between formats in internal documents.\n* [ ] It should be easy to use any kind of template and templating format for the resulting in order to try out third party layouts.\nOnly simplistic templates need to be supported, because complex templating did not show any advantages,\nbut creates great costs.\n   * [ ] Move complex layout from XSL to Java code.\n      * [ ] Split up layout based on XSL and Den/XML rendering based on XSL,\nso it corresponds to the split in template and output format.\n      * [ ] Implement Outline feature of layout for CommonMark files with the new Java layout system.\n   * [ ] Support a simplistic subset of Huge templates out of the box,\n   * [ ] Support rendering of all contents via Hugo. The results of #26 should be helpful for that.\nwhere only replacing parts of a layout with the content's of predefined variables is supported.\n* [ ] Support arbitrary output formats.\n   * [ ] Make all Rendering in Java Code based on extensions.\nThis way not format gets a special treatment.\n   * [ ] Create extension template for a required output format with a given layout.\n   * [ ] Try out alternative layout and output format with [Tufte CSS](https://edwardtufte.github.io/tufte-css/).","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1635903850,"metadata":{"github-id":"UCE_lAHOFCNQW84-KreDziYCH5E"},"target":"5db87a7e990d47becadc7c6890fd8a171d982f01abb503487d028382373857ef","message":"I always knew, that design of the website server output was not perfect,\nbut when I looked at [Tufte CSS](https://edwardtufte.github.io/tufte-css/)\nand others styles like that of [mdbook](https://rust-lang.github.io/mdBook/),\nI emotionally really understood how bad the situation is.\n\nThere are already task in order to fix some basic, before tackling the general problem,\nbut there was no real ticket for the whole problem.\nThe current examples are #26 and #37.\nAs hard it is to admit my previous XML format was better, because it was easy to adjust.\nThe only real Problem, was the fact, that it relied on XSL and other input formats were not really support,\nwhich is important, when different type of documents should be mixed (especially external ones).\n\nIn order to find the right design, there are multiple things needed to be considered:\n* [ ] Define relationship between, input, output and template/layout format.\n* [ ] Different input formats should be easily supported.\nThe important thing is, that these should be rendered in a unified way.\nCurrently, the headers and chapter titles of XML documents are rendered differently,\nthen titles in CommonMark files.\nEasy support of different document types is important to make adjustment in the future,\nin order to support the integration of external documents and for easy migrations between formats in internal documents.\n* [ ] It should be easy to use any kind of template and templating format for the resulting in order to try out third party layouts.\nOnly simplistic templates need to be supported, because complex templating did not show any advantages,\nbut creates great costs.\n   * [ ] Move complex layout from XSL to Java code.\n      * [ ] Split up layout based on XSL and Den/XML rendering based on XSL,\nso it corresponds to the split in template and output format.\n      * [ ] Implement Outline feature of layout for CommonMark files with the new Java layout system.\n   * [ ] Support a simplistic subset of Huge templates out of the box,\n   * [ ] Support rendering of all contents via Hugo. The results of #26 should be helpful for that.\nwhere only replacing parts of a layout with the content's of predefined variables is supported.\n* [ ] Support arbitrary output formats.\n   * [ ] Make all Rendering in Java Code based on extensions.\nThis way not format gets a special treatment.\n   * [ ] Create extension template for a required output format with a given layout.\n   * [ ] Try out alternative layout and output format with [Tufte CSS](https://edwardtufte.github.io/tufte-css/).","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1635903865,"metadata":{"github-id":"UCE_lAHOFCNQW84-KreDziYCH8g"},"target":"5db87a7e990d47becadc7c6890fd8a171d982f01abb503487d028382373857ef","message":"I always knew, that design of the website server output was not perfect,\nbut when I looked at [Tufte CSS](https://edwardtufte.github.io/tufte-css/)\nand others styles like that of [mdbook](https://rust-lang.github.io/mdBook/),\nI emotionally really understood how bad the situation is.\n\nThere are already task in order to fix some basics, before tackling the general problem,\nbut there was no real ticket for the whole problem.\nThe current examples are #26 and #37.\nAs hard it is to admit my previous XML format was better, because it was easy to adjust.\nThe only real Problem, was the fact, that it relied on XSL and other input formats were not really support,\nwhich is important, when different type of documents should be mixed (especially external ones).\n\nIn order to find the right design, there are multiple things needed to be considered:\n* [ ] Define relationship between, input, output and template/layout format.\n* [ ] Different input formats should be easily supported.\nThe important thing is, that these should be rendered in a unified way.\nCurrently, the headers and chapter titles of XML documents are rendered differently,\nthen titles in CommonMark files.\nEasy support of different document types is important to make adjustment in the future,\nin order to support the integration of external documents and for easy migrations between formats in internal documents.\n* [ ] It should be easy to use any kind of template and templating format for the resulting in order to try out third party layouts.\nOnly simplistic templates need to be supported, because complex templating did not show any advantages,\nbut creates great costs.\n   * [ ] Move complex layout from XSL to Java code.\n      * [ ] Split up layout based on XSL and Den/XML rendering based on XSL,\nso it corresponds to the split in template and output format.\n      * [ ] Implement Outline feature of layout for CommonMark files with the new Java layout system.\n   * [ ] Support a simplistic subset of Huge templates out of the box,\n   * [ ] Support rendering of all contents via Hugo. The results of #26 should be helpful for that.\nwhere only replacing parts of a layout with the content's of predefined variables is supported.\n* [ ] Support arbitrary output formats.\n   * [ ] Make all Rendering in Java Code based on extensions.\nThis way not format gets a special treatment.\n   * [ ] Create extension template for a required output format with a given layout.\n   * [ ] Try out alternative layout and output format with [Tufte CSS](https://edwardtufte.github.io/tufte-css/).","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1635903912,"metadata":{"github-id":"UCE_lAHOFCNQW84-KreDziYCIHI"},"target":"5db87a7e990d47becadc7c6890fd8a171d982f01abb503487d028382373857ef","message":"I always knew, that design of the website server output was not perfect,\nbut when I looked at [Tufte CSS](https://edwardtufte.github.io/tufte-css/)\nand others styles like that of [mdbook](https://rust-lang.github.io/mdBook/),\nI emotionally really understood how bad the situation is.\n\nThere are already task in order to fix some basics, before tackling the general problem,\nbut there was no real ticket for the whole problem.\nThe current examples are #26 and #37.\nAs hard it is to admit my previous XML format was better, because it was easy to adjust.\nThe only real Problem, was the fact, that it relied on XSL and other input formats were not really support,\nwhich is important, when different type of documents should be mixed (especially external ones)\nor you want to make it easy for other to contribute by support a common format.\n\nIn order to find the right design, there are multiple things needed to be considered:\n* [ ] Define relationship between, input, output and template/layout format.\n* [ ] Different input formats should be easily supported.\nThe important thing is, that these should be rendered in a unified way.\nCurrently, the headers and chapter titles of XML documents are rendered differently,\nthen titles in CommonMark files.\nEasy support of different document types is important to make adjustment in the future,\nin order to support the integration of external documents and for easy migrations between formats in internal documents.\n* [ ] It should be easy to use any kind of template and templating format for the resulting in order to try out third party layouts.\nOnly simplistic templates need to be supported, because complex templating did not show any advantages,\nbut creates great costs.\n   * [ ] Move complex layout from XSL to Java code.\n      * [ ] Split up layout based on XSL and Den/XML rendering based on XSL,\nso it corresponds to the split in template and output format.\n      * [ ] Implement Outline feature of layout for CommonMark files with the new Java layout system.\n   * [ ] Support a simplistic subset of Huge templates out of the box,\n   * [ ] Support rendering of all contents via Hugo. The results of #26 should be helpful for that.\nwhere only replacing parts of a layout with the content's of predefined variables is supported.\n* [ ] Support arbitrary output formats.\n   * [ ] Make all Rendering in Java Code based on extensions.\nThis way not format gets a special treatment.\n   * [ ] Create extension template for a required output format with a given layout.\n   * [ ] Try out alternative layout and output format with [Tufte CSS](https://edwardtufte.github.io/tufte-css/).","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1635903999,"metadata":{"github-id":"UCE_lAHOFCNQW84-KreDziYCIf8"},"target":"5db87a7e990d47becadc7c6890fd8a171d982f01abb503487d028382373857ef","message":"I always knew, that design of the website server output was not perfect,\nbut when I looked at [Tufte CSS](https://edwardtufte.github.io/tufte-css/)\nand others styles like that of [mdbook](https://rust-lang.github.io/mdBook/),\nI emotionally really understood how bad the situation is.\n\nThere are already task in order to fix some basics, before tackling the general problem,\nbut there was no real ticket for the whole problem.\nThe current examples are #26 and #37.\nAs hard it is to admit my previous XML format was better, because it was easy to adjust.\nThe only real Problem, was the fact, that it relied on XSL,\nwhich is not a portable dependency.\nOther input formats were also not really supported,\nwhich is important, when different type of documents should be mixed (especially external ones)\nor you want to make it easy for other to contribute by support a common format.\n\nIn order to find the right design, there are multiple things needed to be considered:\n* [ ] Define relationship between, input, output and template/layout format.\n* [ ] Different input formats should be easily supported.\nThe important thing is, that these should be rendered in a unified way.\nCurrently, the headers and chapter titles of XML documents are rendered differently,\nthen titles in CommonMark files.\nEasy support of different document types is important to make adjustment in the future,\nin order to support the integration of external documents and for easy migrations between formats in internal documents.\n* [ ] It should be easy to use any kind of template and templating format for the resulting in order to try out third party layouts.\nOnly simplistic templates need to be supported, because complex templating did not show any advantages,\nbut creates great costs.\n   * [ ] Move complex layout from XSL to Java code.\n      * [ ] Split up layout based on XSL and Den/XML rendering based on XSL,\nso it corresponds to the split in template and output format.\n      * [ ] Implement Outline feature of layout for CommonMark files with the new Java layout system.\n   * [ ] Support a simplistic subset of Huge templates out of the box,\n   * [ ] Support rendering of all contents via Hugo. The results of #26 should be helpful for that.\nwhere only replacing parts of a layout with the content's of predefined variables is supported.\n* [ ] Support arbitrary output formats.\n   * [ ] Make all Rendering in Java Code based on extensions.\nThis way not format gets a special treatment.\n   * [ ] Create extension template for a required output format with a given layout.\n   * [ ] Try out alternative layout and output format with [Tufte CSS](https://edwardtufte.github.io/tufte-css/).","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1635904022,"metadata":{"github-id":"UCE_lAHOFCNQW84-KreDziYCIk4"},"target":"5db87a7e990d47becadc7c6890fd8a171d982f01abb503487d028382373857ef","message":"I always knew, that design of the website server output was not perfect,\nbut when I looked at [Tufte CSS](https://edwardtufte.github.io/tufte-css/)\nand others styles like that of [mdbook](https://rust-lang.github.io/mdBook/),\nI emotionally really understood how bad the situation is.\n\nThere are already task in order to fix some basics, before tackling the general problem,\nbut there was no real ticket for the whole problem.\nThe current examples are #26 and #37.\nAs hard it is to admit my previous XML format was better, because it was easy to adjust.\nThe only real Problem, was the fact, that it relied on XSL,\nwhich is not a portable dependency.\nOther input formats were also not really supported,\nwhich is important, when different type of documents should be mixed (especially external ones)\nor you want to make it easy for other to contribute by support a common format.\n\nIn order to find the right design, there are multiple things needed to be done,\nin order to make it easy to switch between different outputs:\n* [ ] Define relationship between, input, output and template/layout format.\n* [ ] Different input formats should be easily supported.\nThe important thing is, that these should be rendered in a unified way.\nCurrently, the headers and chapter titles of XML documents are rendered differently,\nthen titles in CommonMark files.\nEasy support of different document types is important to make adjustment in the future,\nin order to support the integration of external documents and for easy migrations between formats in internal documents.\n* [ ] It should be easy to use any kind of template and templating format for the resulting in order to try out third party layouts.\nOnly simplistic templates need to be supported, because complex templating did not show any advantages,\nbut creates great costs.\n   * [ ] Move complex layout from XSL to Java code.\n      * [ ] Split up layout based on XSL and Den/XML rendering based on XSL,\nso it corresponds to the split in template and output format.\n      * [ ] Implement Outline feature of layout for CommonMark files with the new Java layout system.\n   * [ ] Support a simplistic subset of Huge templates out of the box,\n   * [ ] Support rendering of all contents via Hugo. The results of #26 should be helpful for that.\nwhere only replacing parts of a layout with the content's of predefined variables is supported.\n* [ ] Support arbitrary output formats.\n   * [ ] Make all Rendering in Java Code based on extensions.\nThis way not format gets a special treatment.\n   * [ ] Create extension template for a required output format with a given layout.\n   * [ ] Try out alternative layout and output format with [Tufte CSS](https://edwardtufte.github.io/tufte-css/).","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1635904747,"metadata":{"github-id":"UCE_lAHOFCNQW84-KreDziYCLp4"},"target":"5db87a7e990d47becadc7c6890fd8a171d982f01abb503487d028382373857ef","message":"I always knew, that design of the website server output was not perfect,\nbut when I looked at [Tufte CSS](https://edwardtufte.github.io/tufte-css/)\nand others styles like that of [mdbook](https://rust-lang.github.io/mdBook/),\nI emotionally really understood how bad the situation is.\n\nThere are already task in order to fix some basics, before tackling the general problem,\nbut there was no real ticket for the whole problem.\nThe current examples are #26 and #37.\nAs hard it is to admit my previous XML format was better, because it was easy to adjust.\nThe only real Problem, was the fact, that it relied on XSL,\nwhich is not a portable dependency.\nOther input formats were also not really supported,\nwhich is important, when different type of documents should be mixed (especially external ones)\nor you want to make it easy for other to contribute by support a common format.\n\nIn order to find the right design, there are multiple things needed to be done,\nin order to make it easy to switch between different outputs:\n* [ ] Define relationship between, input, output and template/layout format.\nThis relationship needs to be supported by the website server.\n* [ ] Different input formats should be easily supported,\nby rendering this first to HTML and then via the present XSL renderer.\nDemonstrate this by rendering CommonMark documents like XML files:\n   * [ ] Standalone images should not be surrounded by paragraphs.\n   * [ ] Render the outline of CommonMark documents.\n   * [ ] Make all Rendering in Java Code based on extensions.\nThis way, not format gets a special treatment.\n* [ ] It should be easy to adjust XSL based rendering and styling (i.e. names of used css classes).\n   * [ ] Try out alternative layout and output format with [Tufte CSS](https://edwardtufte.github.io/tufte-css/).","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1635904775,"metadata":{"github-id":"UCE_lAHOFCNQW84-KreDziYCL0U"},"target":"5db87a7e990d47becadc7c6890fd8a171d982f01abb503487d028382373857ef","message":"I always knew, that design of the website server output was not perfect,\nbut when I looked at [Tufte CSS](https://edwardtufte.github.io/tufte-css/)\nand others styles like that of [mdbook](https://rust-lang.github.io/mdBook/),\nI emotionally really understood how bad the situation is.\n\nThere are already task in order to fix some basics, before tackling the general problem,\nbut there was no real ticket for the whole problem.\nThe current examples are #26 and #37.\nAs hard it is to admit my previous XML format was better, because it was easy to adjust.\nThe only real Problem, was the fact, that it relied on XSL,\nwhich is not a portable dependency.\nOther input formats were also not really supported,\nwhich is important, when different type of documents should be mixed (especially external ones)\nor you want to make it easy for other to contribute by support a common format.\n\nIn order to find the right design, there are multiple things needed to be done,\nin order to make it easy to switch between different outputs:\n* [ ] Define relationship between, input, output and template/layout format.\nThis relationship needs to be supported by the website server.\n* [ ] Different input formats should be easily supported,\nby rendering this first to HTML and then via the present XSL renderer.\nDemonstrate this by rendering CommonMark documents like XML files:\n   * [ ] Standalone images should not be surrounded by paragraphs.\n   * [ ] Render the outline of CommonMark documents.\n   * [ ] Make all Rendering in Java Code based on extensions.\nThis way, not format gets a special treatment.\n* [ ] It should be easy to adjust XSL based rendering and styling (i.e. names of used css classes).\n   * [ ] Support easy switching between XSL based layouts.\n   * [ ] Try out alternative layout and output format with [Tufte CSS](https://edwardtufte.github.io/tufte-css/).","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1635905085,"metadata":{"github-id":"UCE_lAHOFCNQW84-KreDziYCNRo"},"target":"5db87a7e990d47becadc7c6890fd8a171d982f01abb503487d028382373857ef","message":"I always knew, that design of the website server output was not perfect,\nbut when I looked at [Tufte CSS](https://edwardtufte.github.io/tufte-css/)\nand others styles like that of [mdbook](https://rust-lang.github.io/mdBook/),\nI emotionally really understood how bad the situation is.\n\nThere are already task in order to fix some basics, before tackling the general problem,\nbut there was no real ticket for the whole problem.\nThe current examples are #26 and #37.\nAs hard it is to admit my previous XML format was better, because it was easy to adjust.\nThe only real Problem, was the fact, that it relied on XSL,\nwhich is not a portable dependency.\nOther input formats were also not really supported,\nwhich is important, when different type of documents should be mixed (especially external ones)\nor you want to make it easy for other to contribute by support a common format.\n\nIn order to find the right design, there are multiple things needed to be done,\nin order to make it easy to switch between different outputs:\n* [ ] Define relationship between, input, output and template/layout format.\nThis relationship needs to be supported by the website server.\n* [ ] Different input formats should be easily supported,\nby rendering this first to HTML and then via the present XSL renderer.\nDemonstrate this by rendering CommonMark documents like XML files:\n   * [ ] Standalone images should not be surrounded by paragraphs.\n   * [ ] Render the outline of CommonMark documents.\n   * [ ] Make all Rendering in Java Code based on extensions.\nThis way, not format gets a special treatment.\n* [ ] It should be easy to adjust XSL based rendering and styling (i.e. names of used css classes).\n   * [ ] Support easy switching between XSL template for rendering.\n   * [ ] Create alternative XSL template with support for [Tufte CSS](https://edwardtufte.github.io/tufte-css/).\nIt is recommended to simplify the existing XSL template in order to make this and\nfuture templates more easy to create.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1635905272,"metadata":{"github-id":"UCE_lAHOFCNQW84-KreDziYCOFU"},"target":"5db87a7e990d47becadc7c6890fd8a171d982f01abb503487d028382373857ef","message":"I always knew, that design of the website server output was not perfect,\nbut when I looked at [Tufte CSS](https://edwardtufte.github.io/tufte-css/)\nand others styles like that of [mdbook](https://rust-lang.github.io/mdBook/),\nI emotionally really understood how bad the situation is.\n\nThere are already task in order to fix some basics, before tackling the general problem,\nbut there was no real ticket for the whole problem.\nThe current examples are #26 and #37.\nAs hard it is to admit my previous XML format was better, because it was easy to adjust.\nThe only real Problem, was the fact, that it relied on XSL,\nwhich is not a portable dependency.\nOther input formats were also not really supported,\nwhich is important, when different type of documents should be mixed (especially external ones)\nor you want to make it easy for other to contribute by support a common format.\n\nIn order to find the right design, there are multiple things needed to be done,\nin order to make it easy to switch between different outputs:\n* [ ] Define relationship between, input, output and template/layout format.\nThis relationship needs to be supported by the website server.\n* [ ] Different input formats should be easily supported,\nby rendering this first to HTML and then via the present XSL renderer.\nDemonstrate this by rendering CommonMark documents like XML files:\n   * [ ] Standalone images should not be surrounded by paragraphs.\n   * [ ] Render the outline of CommonMark documents.\n   * [ ] Make all Rendering in Java Code based on extensions.\nThis way, not format gets a special treatment.\n* [ ] It should be easy to adjust XSL based rendering and styling (i.e. names of used css classes).\n   * [ ] Support easy switching between XSL template for rendering.\n   * [ ] Create alternative XSL template with support for [Tufte CSS](https://edwardtufte.github.io/tufte-css/).\nIt is recommended to simplify the existing XSL template in order to make this and\nfuture templates more easy to create.\nThe quality only needs to be good enough for demonstration purposes.\nNevertheless, it is recommended to really minimize the XSL code and to deprecated not required parts\nvia appropriate messages.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1635905468,"metadata":{"github-id":"UCE_lAHOFCNQW84-KreDziYCPD8"},"target":"5db87a7e990d47becadc7c6890fd8a171d982f01abb503487d028382373857ef","message":"I always knew, that design of the website server output was not perfect,\nbut when I looked at [Tufte CSS](https://edwardtufte.github.io/tufte-css/)\nand others styles like that of [mdbook](https://rust-lang.github.io/mdBook/),\nI emotionally really understood how bad the situation is.\n\nThere are already task in order to fix some basics, before tackling the general problem,\nbut there was no real ticket for the whole problem.\nThe current examples are #26 and #37.\nAs hard it is to admit my previous XML format was better, because it was easy to adjust.\nThe only real Problem, was the fact, that it relied on XSL,\nwhich is not a portable dependency.\nOther input formats were also not really supported,\nwhich is important, when different type of documents should be mixed (especially external ones)\nor you want to make it easy for other to contribute by support a common format.\n\nIn order to find the right design, there are multiple things needed to be done,\nin order to make it easy to switch between different outputs:\n* [ ] Define relationship between, input, output and template/layout format.\nThis relationship needs to be supported by the website server.\nIt's important the same content in different input formats results in the same output\nas good as justifiably possible.\n* [ ] Different input formats should be easily supported,\nby rendering this first to HTML and then via the present XSL renderer.\nDemonstrate this by rendering CommonMark documents like XML files:\n   * [ ] Standalone images should not be surrounded by paragraphs.\n   * [ ] Render the outline of CommonMark documents.\n   * [ ] Make all Rendering in Java Code based on extensions.\nThis way, not format gets a special treatment.\n* [ ] It should be easy to adjust XSL based rendering and styling (i.e. names of used css classes).\n   * [ ] Support easy switching between XSL template for rendering.\n   * [ ] Create alternative XSL template with support for [Tufte CSS](https://edwardtufte.github.io/tufte-css/).\nIt is recommended to simplify the existing XSL template in order to make this and\nfuture templates more easy to create.\nThe quality only needs to be good enough for demonstration purposes.\nNevertheless, it is recommended to really minimize the XSL code and to deprecated not required parts\nvia appropriate messages.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1635905595,"metadata":{"github-id":"UCE_lAHOFCNQW84-KreDziYCPqY"},"target":"5db87a7e990d47becadc7c6890fd8a171d982f01abb503487d028382373857ef","message":"I always knew, that design of the website server output was not perfect,\nbut when I looked at [Tufte CSS](https://edwardtufte.github.io/tufte-css/)\nand others styles like that of [mdbook](https://rust-lang.github.io/mdBook/),\nI emotionally really understood how bad the situation is.\n\nThere are already task in order to fix some basics, before tackling the general problem,\nbut there was no real ticket for the whole problem.\nThe current examples are #26 and #37.\nAs hard it is to admit my previous XML format was better, because it was easy to adjust.\nThe only real Problem, was the fact, that it relied on XSL,\nwhich is not a portable dependency.\nOther input formats were also not really supported,\nwhich is important, when different type of documents should be mixed (especially external ones)\nor you want to make it easy for other to contribute by support a common format.\n\nIn order to find the right design, there are multiple things needed to be done,\nin order to make it easy to switch between different outputs:\n* [ ] Define relationship between, input, output and template/layout format.\nThis relationship needs to be supported by the website server.\nIt's important the same content in different input formats results in the same output\nas good as justifiably possible.\n* [ ] Different input formats should be easily supported,\nby rendering this first to HTML and then via the present XSL renderer.\nDemonstrate this by rendering CommonMark documents like XML files:\n   * [ ] Standalone images should not be surrounded by paragraphs.\n   * [ ] Render the outline of CommonMark documents.\n* [ ] It should be easy to adjust XSL based rendering and styling (i.e. names of used css classes).\n   * [ ] Support easy switching between XSL template for rendering.\n   * [ ] Create alternative XSL template with support for [Tufte CSS](https://edwardtufte.github.io/tufte-css/).\nIt is recommended to simplify the existing XSL template in order to make this and\nfuture templates more easy to create.\nThe quality only needs to be good enough for demonstration purposes.\nNevertheless, it is recommended to really minimize the XSL code and to deprecated not required parts\nvia appropriate messages.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1637437757,"metadata":{"github-id":"UCE_lAHOFCNQW84-KreDziaw88Y"},"target":"5db87a7e990d47becadc7c6890fd8a171d982f01abb503487d028382373857ef","message":"I always knew, that design of the website server output was not perfect,\nbut when I looked at [Tufte CSS](https://edwardtufte.github.io/tufte-css/)\nand others styles like that of [mdbook](https://rust-lang.github.io/mdBook/),\nI emotionally really understood how bad the situation is.\n\nThere are already task in order to fix some basics, before tackling the general problem,\nbut there was no real ticket for the whole problem.\nThe current examples are #26 and #37.\nAs hard it is to admit my previous XML format was better, because it was easy to adjust.\nThe only real Problem, was the fact, that it relied on XSL,\nwhich is not a portable dependency.\nOther input formats were also not really supported,\nwhich is important, when different type of documents should be mixed (especially external ones)\nor you want to make it easy for other to contribute by support a common format.\n\nIn order to find the right design, there are multiple things needed to be done,\nin order to make it easy to switch between different outputs:\n* [ ] Define relationship between, input, output and template/layout format.\nThis relationship needs to be supported by the website server.\nIt's important the same content in different input formats results in the same output\nas good as justifiably possible.\n* [ ] Different input formats should be easily supported,\nby rendering this first to HTML and then via the present XSL renderer.\nDemonstrate this by rendering CommonMark documents like XML files:\n   * [ ] Standalone images should not be surrounded by paragraphs.\n   * [ ] Render the outline of CommonMark documents.\n* [ ] It should be easy to adjust XSL based rendering and styling (i.e. names of used css classes).\n   * [ ] Support easy switching between XSL template for rendering.\n   * [ ] Create alternative XSL template with support for [Tufte CSS](https://edwardtufte.github.io/tufte-css/).\nIt is recommended to simplify the existing XSL template in order to make this and\nfuture templates more easy to create.\nThe quality only needs to be good enough for demonstration purposes.\nNevertheless, it is recommended to really minimize the XSL code and to deprecated not required parts\nvia appropriate messages.\n\n* [ ] In the future, the HTML should only contain elements and no special classes,\nif possible, so that the default layout is as compatible to alternative styling as possible.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1638006213,"metadata":{"github-id":"UCE_lAHOFCNQW84-KreDzibs4bY"},"target":"5db87a7e990d47becadc7c6890fd8a171d982f01abb503487d028382373857ef","message":"I always knew, that design of the website server output was not perfect,\nbut when I looked at [Tufte CSS](https://edwardtufte.github.io/tufte-css/)\nand others styles like that of [mdbook](https://rust-lang.github.io/mdBook/),\nI emotionally really understood how bad the situation is.\n\nThere are already task in order to fix some basics, before tackling the general problem,\nbut there was no real ticket for the whole problem.\nThe current examples are #26 and #37.\nAs hard it is to admit my previous XML format was better, because it was easy to adjust.\nThe only real Problem, was the fact, that it relied on XSL,\nwhich is not a portable dependency.\nOther input formats were also not really supported,\nwhich is important, when different type of documents should be mixed (especially external ones)\nor you want to make it easy for other to contribute by support a common format.\n\nIn order to find the right design, there are multiple things needed to be done,\nin order to make it easy to switch between different outputs:\n* [X] Define relationship between, input, output and template/layout format.\nThis relationship needs to be supported by the website server.\nIt's important the same content in different input formats results in the same output\nas good as justifiably possible.\n-\u003e Every fully supported format should be transformed to custom XML format first,\nand than rendered to the target format.\n* [ ] Different input formats should be easily supported,\nby rendering this first to HTML and then via the present XSL renderer.\nDemonstrate this by rendering CommonMark documents like XML files:\n   * [ ] Standalone images should not be surrounded by paragraphs.\n   * [ ] Render the outline of CommonMark documents.\n* [ ] It should be easy to adjust XSL based rendering and styling (i.e. names of used css classes).\n   * [ ] Support easy switching between XSL template for rendering.\n   * [ ] Create alternative XSL template with support for [Tufte CSS](https://edwardtufte.github.io/tufte-css/).\nIt is recommended to simplify the existing XSL template in order to make this and\nfuture templates more easy to create.\nThe quality only needs to be good enough for demonstration purposes.\nNevertheless, it is recommended to really minimize the XSL code and to deprecated not required parts\nvia appropriate messages.\n\n* [ ] In the future, the HTML should only contain elements and no special classes,\nif possible, so that the default layout is as compatible to alternative styling as possible.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1638006490,"metadata":{"github-id":"UCE_lAHOFCNQW84-KreDzibs5D4"},"target":"5db87a7e990d47becadc7c6890fd8a171d982f01abb503487d028382373857ef","message":"I always knew, that design of the website server output was not perfect,\nbut when I looked at [Tufte CSS](https://edwardtufte.github.io/tufte-css/)\nand others styles like that of [mdbook](https://rust-lang.github.io/mdBook/),\nI emotionally really understood how bad the situation is.\n\nThere are already task in order to fix some basics, before tackling the general problem,\nbut there was no real ticket for the whole problem.\nThe current examples are #26 and #37.\nAs hard it is to admit my previous XML format was better, because it was easy to adjust.\nThe only real Problem, was the fact, that it relied on XSL,\nwhich is not a portable dependency.\nOther input formats were also not really supported,\nwhich is important, when different type of documents should be mixed (especially external ones)\nor you want to make it easy for other to contribute by support a common format.\n\nIn order to find the right design, there are multiple things needed to be done,\nin order to make it easy to switch between different outputs:\n* [X] Define relationship between, input, output and template/layout format.\nThis relationship needs to be supported by the website server.\nIt's important the same content in different input formats results in the same output\nas good as justifiably possible.\n-\u003e Every fully supported format should be transformed to custom XML format first,\nand then rendered to the target format.\n* [ ] Currently main output is HTML.\nSupport alternative format for demonstration purposes.\nRender to Gemtext for example.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1638006877,"metadata":{"github-id":"UCE_lAHOFCNQW84-KreDzibs6Fc"},"target":"5db87a7e990d47becadc7c6890fd8a171d982f01abb503487d028382373857ef","message":"I always knew, that design of the website server output was not perfect,\nbut when I looked at [Tufte CSS](https://edwardtufte.github.io/tufte-css/)\nand others styles like that of [mdbook](https://rust-lang.github.io/mdBook/),\nI emotionally really understood how bad the situation is.\n\nThere are already task in order to fix some basics, before tackling the general problem,\nbut there was no real ticket for the whole problem.\nThe current examples are #26 and #37.\nAs hard it is to admit my previous XML format was better, because it was easy to adjust.\nThe only real Problem, was the fact, that it relied on XSL,\nwhich is not a portable dependency.\nOther input formats were also not really supported,\nwhich is important, when different type of documents should be mixed (especially external ones)\nor you want to make it easy for other to contribute by support a common format.\n\nIn order to find the right design, there are multiple things needed to be done,\nin order to make it easy to switch between different outputs:\n* [X] Define relationship between, input, output and template/layout format.\nThis relationship needs to be supported by the website server.\nIt's important the same content in different input formats results in the same output\nas good as justifiably possible.\n-\u003e Every fully supported format should be transformed to custom XML format first,\nand then rendered to the target format.\n* [ ] Support alternative HTML output without css class\nand Tufte CSS as styling.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1638015623,"metadata":{"github-id":"UCE_lAHOFCNQW84-KreDzibtOq0"},"target":"5db87a7e990d47becadc7c6890fd8a171d982f01abb503487d028382373857ef","message":"I always knew, that design of the website server output was not perfect,\nbut when I looked at [Tufte CSS](https://edwardtufte.github.io/tufte-css/)\nand others styles like that of [mdbook](https://rust-lang.github.io/mdBook/),\nI emotionally really understood how bad the situation is.\n\nThere are already task in order to fix some basics, before tackling the general problem,\nbut there was no real ticket for the whole problem.\nThe current examples are #26 and #37.\nAs hard it is to admit my previous XML format was better, because it was easy to adjust.\nThe only real Problem, was the fact, that it relied on XSL,\nwhich is not a portable dependency.\nOther input formats were also not really supported,\nwhich is important, when different type of documents should be mixed (especially external ones)\nor you want to make it easy for other to contribute by support a common format.\n\nIn order to find the right design, there are multiple things needed to be done,\nin order to make it easy to switch between different outputs:\n* [X] Define relationship between, input, output and template/layout format.\nThis relationship needs to be supported by the website server.\nIt's important the same content in different input formats results in the same output\nas good as justifiably possible.\n-\u003e Every fully supported format should be transformed to custom XML format first,\nand then rendered to the target format.\n* [ ] Support alternative HTML output without css class\nand Tufte CSS as styling.\n* [ ] Blog about the error how I created an own layout/style and why I did that.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1638015984,"metadata":{"github-id":"UCE_lAHOFCNQW84-KreDzibtPbE"},"target":"5db87a7e990d47becadc7c6890fd8a171d982f01abb503487d028382373857ef","message":"I always knew, that design of the website server output was not perfect,\nbut when I looked at [Tufte CSS](https://edwardtufte.github.io/tufte-css/)\nand others styles like that of [mdbook](https://rust-lang.github.io/mdBook/),\nI emotionally really understood how bad the situation is.\n\nThere are already task in order to fix some basics, before tackling the general problem,\nbut there was no real ticket for the whole problem.\nThe current examples are #26 and #37.\nAs hard it is to admit my previous XML format was better, because it was easy to adjust.\nThe only real Problem, was the fact, that it relied on XSL,\nwhich is not a portable dependency.\nOther input formats were also not really supported,\nwhich is important, when different type of documents should be mixed (especially external ones)\nor you want to make it easy for other to contribute by support a common format.\n\nIn order to find the right design, there are multiple things needed to be done,\nin order to make it easy to switch between different outputs:\n* [X] Define relationship between, input, output and template/layout format.\nThis relationship needs to be supported by the website server.\nIt's important the same content in different input formats results in the same output\nas good as justifiably possible.\n-\u003e Every fully supported format should be transformed to custom XML format first,\nand then rendered to the target format.\n* [ ] Support alternative HTML output without css class\nand Tufte CSS as styling.\n* [ ] Use the new styling in order to further simplify own custom layout.\n* [ ] Blog about the error how I created an own layout/style and why I did that.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1638016150,"metadata":{"github-id":"UCE_lAHOFCNQW84-KreDzibtP0o"},"target":"5db87a7e990d47becadc7c6890fd8a171d982f01abb503487d028382373857ef","message":"I always knew, that design of the website server output was not perfect,\nbut when I looked at [Tufte CSS](https://edwardtufte.github.io/tufte-css/)\nand others styles like that of [mdbook](https://rust-lang.github.io/mdBook/),\nI emotionally really understood how bad the situation is.\n\nThere are already task in order to fix some basics, before tackling the general problem,\nbut there was no real ticket for the whole problem.\nThe current examples are #26 and #37.\nAs hard it is to admit my previous XML format was better, because it was easy to adjust.\nThe only real Problem, was the fact, that it relied on XSL,\nwhich is not a portable dependency.\nOther input formats were also not really supported,\nwhich is important, when different type of documents should be mixed (especially external ones)\nor you want to make it easy for other to contribute by support a common format.\n\nIn order to find the right design, there are multiple things needed to be done,\nin order to make it easy to switch between different outputs:\n* [X] Define relationship between, input, output and template/layout format.\nThis relationship needs to be supported by the website server.\nIt's important the same content in different input formats results in the same output\nas good as justifiably possible.\n-\u003e Every fully supported format should be transformed to custom XML format first,\nand then rendered to the target format.\n* [ ] Support alternative HTML output without css class\nand Tufte CSS as styling.\nMake XSL stylesheet minimal and\ndocument stylesheet format supported by the web server.\n* [ ] Use the new styling in order to further simplify own custom layout.\n* [ ] Blog about the error how I created an own layout/style and why I did that.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1638700830,"metadata":{"github-id":"UCE_lAHOFCNQW84-KreDzic37tM"},"target":"5db87a7e990d47becadc7c6890fd8a171d982f01abb503487d028382373857ef","message":"I always knew, that design of the website server output was not perfect,\nbut when I looked at [Tufte CSS](https://edwardtufte.github.io/tufte-css/)\nand others styles like that of [mdbook](https://rust-lang.github.io/mdBook/),\nI emotionally really understood how bad the situation is.\n\nThere are already task in order to fix some basics, before tackling the general problem,\nbut there was no real ticket for the whole problem.\nThe current examples are #26 and #37.\nAs hard it is to admit my previous XML format was better, because it was easy to adjust.\nThe only real Problem, was the fact, that it relied on XSL,\nwhich is not a portable dependency.\nOther input formats were also not really supported,\nwhich is important, when different type of documents should be mixed (especially external ones)\nor you want to make it easy for other to contribute by support a common format.\n\nIn order to find the right design, there are multiple things needed to be done,\nin order to make it easy to switch between different outputs:\n* [X] Define relationship between, input, output and template/layout format.\nThis relationship needs to be supported by the website server.\nIt's important the same content in different input formats results in the same output\nas good as justifiably possible.\n-\u003e Every fully supported format should be transformed to custom XML format first,\nand then rendered to the target format.\n* [ ] Support alternative HTML output without css class\nand Tufte CSS as styling.\nMake XSL stylesheet minimal and\ndocument stylesheet format supported by the web server.\n* [ ] Use the new styling in order to further simplify own custom layout.\n* [ ] Blog about the error how I created an own layout/style and why I did that.\n* [ ] Automatic style reloading does not seem to work anymore.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1638701688,"metadata":{"github-id":"UCE_lAHOFCNQW84-KreDzic3-BM"},"target":"5db87a7e990d47becadc7c6890fd8a171d982f01abb503487d028382373857ef","message":"I always knew, that design of the website server output was not perfect,\nbut when I looked at [Tufte CSS](https://edwardtufte.github.io/tufte-css/)\nand others styles like that of [mdbook](https://rust-lang.github.io/mdBook/),\nI emotionally really understood how bad the situation is.\n\nThere are already task in order to fix some basics, before tackling the general problem,\nbut there was no real ticket for the whole problem.\nThe current examples are #26 and #37.\nAs hard it is to admit my previous XML format was better, because it was easy to adjust.\nThe only real Problem, was the fact, that it relied on XSL,\nwhich is not a portable dependency.\nOther input formats were also not really supported,\nwhich is important, when different type of documents should be mixed (especially external ones)\nor you want to make it easy for other to contribute by support a common format.\n\nIn order to find the right design, there are multiple things needed to be done,\nin order to make it easy to switch between different outputs:\n* [X] Define relationship between, input, output and template/layout format.\nThis relationship needs to be supported by the website server.\nIt's important the same content in different input formats results in the same output\nas good as justifiably possible.\n-\u003e Every fully supported format should be transformed to custom XML format first,\nand then rendered to the target format.\n* [ ] Support alternative HTML output without css class\nand Tufte CSS as styling.\nMake XSL stylesheet minimal and\ndocument stylesheet format supported by the web server.\n* [ ] Use the new styling in order to further simplify own custom layout.\n* [ ] Blog about the error how I created an own layout/style and why I did that.\n* [x] Automatic style reloading does not seem to work anymore.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1638701939,"metadata":{"github-id":"UCE_lAHOFCNQW84-KreDzic3-rw"},"target":"5db87a7e990d47becadc7c6890fd8a171d982f01abb503487d028382373857ef","message":"I always knew, that design of the website server output was not perfect,\nbut when I looked at [Tufte CSS](https://edwardtufte.github.io/tufte-css/)\nand others styles like that of [mdbook](https://rust-lang.github.io/mdBook/),\nI emotionally really understood how bad the situation is.\n\nThere are already task in order to fix some basics, before tackling the general problem,\nbut there was no real ticket for the whole problem.\nThe current examples are #26 and #37.\nAs hard it is to admit my previous XML format was better, because it was easy to adjust.\nThe only real Problem, was the fact, that it relied on XSL,\nwhich is not a portable dependency.\nOther input formats were also not really supported,\nwhich is important, when different type of documents should be mixed (especially external ones)\nor you want to make it easy for other to contribute by support a common format.\n\nIn order to find the right design, there are multiple things needed to be done,\nin order to make it easy to switch between different outputs:\n* [X] Define relationship between, input, output and template/layout format.\nThis relationship needs to be supported by the website server.\nIt's important the same content in different input formats results in the same output\nas good as justifiably possible.\n-\u003e Every fully supported format should be transformed to custom XML format first,\nand then rendered to the target format.\n* [ ] Support alternative HTML output without css class\nand Tufte CSS as styling.\nMake XSL stylesheet minimal and\ndocument stylesheet format supported by the web server.\n   * [ ] This will be done for personal website, which has some private code first.\n   * [ ] For some things in the alternative styling, the old styling is still active.\n   * [ ] Create unified code based in private.\n   * [ ] Make rendering of alternative style public.\n* [ ] Use the new styling in order to further simplify own custom layout.\n* [ ] Blog about the error how I created an own layout/style and why I did that.\n* [x] Automatic style reloading does not seem to work anymore.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1638701952,"metadata":{"github-id":"UCE_lAHOFCNQW84-KreDzic3-to"},"target":"5db87a7e990d47becadc7c6890fd8a171d982f01abb503487d028382373857ef","message":"I always knew, that design of the website server output was not perfect,\nbut when I looked at [Tufte CSS](https://edwardtufte.github.io/tufte-css/)\nand others styles like that of [mdbook](https://rust-lang.github.io/mdBook/),\nI emotionally really understood how bad the situation is.\n\nThere are already task in order to fix some basics, before tackling the general problem,\nbut there was no real ticket for the whole problem.\nThe current examples are #26 and #37.\nAs hard it is to admit my previous XML format was better, because it was easy to adjust.\nThe only real Problem, was the fact, that it relied on XSL,\nwhich is not a portable dependency.\nOther input formats were also not really supported,\nwhich is important, when different type of documents should be mixed (especially external ones)\nor you want to make it easy for other to contribute by support a common format.\n\nIn order to find the right design, there are multiple things needed to be done,\nin order to make it easy to switch between different outputs:\n* [X] Define relationship between, input, output and template/layout format.\nThis relationship needs to be supported by the website server.\nIt's important the same content in different input formats results in the same output\nas good as justifiably possible.\n-\u003e Every fully supported format should be transformed to custom XML format first,\nand then rendered to the target format.\n* [ ] Support alternative HTML output without css class\nand Tufte CSS as styling.\nMake XSL stylesheet minimal and\ndocument stylesheet format supported by the web server.\n   * [ ] This will be done for personal website, which has some private code first.\n   * [ ] For some things in the alternative styling, the old styling is still active.\n   * [ ] Create unified code based in private.\n   * [ ] Make rendering of alternative style public.\n   * [ ] Render article title.\n* [ ] Use the new styling in order to further simplify own custom layout.\n* [ ] Blog about the error how I created an own layout/style and why I did that.\n* [x] Automatic style reloading does not seem to work anymore.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1638702003,"metadata":{"github-id":"UCE_lAHOFCNQW84-KreDzic3-0o"},"target":"5db87a7e990d47becadc7c6890fd8a171d982f01abb503487d028382373857ef","message":"I always knew, that design of the website server output was not perfect,\nbut when I looked at [Tufte CSS](https://edwardtufte.github.io/tufte-css/)\nand others styles like that of [mdbook](https://rust-lang.github.io/mdBook/),\nI emotionally really understood how bad the situation is.\n\nThere are already task in order to fix some basics, before tackling the general problem,\nbut there was no real ticket for the whole problem.\nThe current examples are #26 and #37.\nAs hard it is to admit my previous XML format was better, because it was easy to adjust.\nThe only real Problem, was the fact, that it relied on XSL,\nwhich is not a portable dependency.\nOther input formats were also not really supported,\nwhich is important, when different type of documents should be mixed (especially external ones)\nor you want to make it easy for other to contribute by support a common format.\n\nIn order to find the right design, there are multiple things needed to be done,\nin order to make it easy to switch between different outputs:\n* [X] Define relationship between, input, output and template/layout format.\nThis relationship needs to be supported by the website server.\nIt's important the same content in different input formats results in the same output\nas good as justifiably possible.\n-\u003e Every fully supported format should be transformed to custom XML format first,\nand then rendered to the target format.\n* [ ] Support alternative HTML output without css class\nand Tufte CSS as styling.\nMake XSL stylesheet minimal and\ndocument stylesheet format supported by the web server.\n   * [ ] This will be done for personal website, which has some private code first.\n   * [ ] For some things in the alternative styling, the old styling is still active.\n   * [ ] Create unified code based in private.\n   * [ ] Make rendering of alternative style public.\n   * [ ] Deploy alternative style.\n   * [ ] Render article title.\n* [ ] Use the new styling in order to further simplify own custom layout.\n* [ ] Blog about the error how I created an own layout/style and why I did that.\n* [x] Automatic style reloading does not seem to work anymore.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1638702089,"metadata":{"github-id":"UCE_lAHOFCNQW84-KreDzic3_Gc"},"target":"5db87a7e990d47becadc7c6890fd8a171d982f01abb503487d028382373857ef","message":"I always knew, that design of the website server output was not perfect,\nbut when I looked at [Tufte CSS](https://edwardtufte.github.io/tufte-css/)\nand others styles like that of [mdbook](https://rust-lang.github.io/mdBook/),\nI emotionally really understood how bad the situation is.\n\nThere are already task in order to fix some basics, before tackling the general problem,\nbut there was no real ticket for the whole problem.\nThe current examples are #26 and #37.\nAs hard it is to admit my previous XML format was better, because it was easy to adjust.\nThe only real Problem, was the fact, that it relied on XSL,\nwhich is not a portable dependency.\nOther input formats were also not really supported,\nwhich is important, when different type of documents should be mixed (especially external ones)\nor you want to make it easy for other to contribute by support a common format.\n\nIn order to find the right design, there are multiple things needed to be done,\nin order to make it easy to switch between different outputs:\n* [X] Define relationship between, input, output and template/layout format.\nThis relationship needs to be supported by the website server.\nIt's important the same content in different input formats results in the same output\nas good as justifiably possible.\n-\u003e Every fully supported format should be transformed to custom XML format first,\nand then rendered to the target format.\n* [ ] Support alternative HTML output without css class\nand Tufte CSS as styling.\nMake XSL stylesheet minimal and\ndocument stylesheet format supported by the web server.\n   * [ ] This will be done for personal website, which has some private code first.\n   * [ ] For some things in the alternative styling, the old styling is still active.\n   * [ ] Create unified code based in private.\n   * [ ] Make rendering of alternative style public.\n   * [ ] Deploy alternative style.\n   * [ ] Render article title.\n* [ ] Use the new styling in order to further simplify own custom layout.\n  Custom layout should use vanilla HTML elements as much as possible.\n   * [ ] Use sections instead of divs with special classes for chapters.\n* [ ] Blog about the error how I created an own layout/style and why I did that.\n* [x] Automatic style reloading does not seem to work anymore.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1638702103,"metadata":{"github-id":"UCE_lAHOFCNQW84-KreDzic3_JE"},"target":"5db87a7e990d47becadc7c6890fd8a171d982f01abb503487d028382373857ef","message":"I always knew, that design of the website server output was not perfect,\nbut when I looked at [Tufte CSS](https://edwardtufte.github.io/tufte-css/)\nand others styles like that of [mdbook](https://rust-lang.github.io/mdBook/),\nI emotionally really understood how bad the situation is.\n\nThere are already task in order to fix some basics, before tackling the general problem,\nbut there was no real ticket for the whole problem.\nThe current examples are #26 and #37.\nAs hard it is to admit my previous XML format was better, because it was easy to adjust.\nThe only real Problem, was the fact, that it relied on XSL,\nwhich is not a portable dependency.\nOther input formats were also not really supported,\nwhich is important, when different type of documents should be mixed (especially external ones)\nor you want to make it easy for other to contribute by support a common format.\n\nIn order to find the right design, there are multiple things needed to be done,\nin order to make it easy to switch between different outputs:\n* [X] Define relationship between, input, output and template/layout format.\nThis relationship needs to be supported by the website server.\nIt's important the same content in different input formats results in the same output\nas good as justifiably possible.\n-\u003e Every fully supported format should be transformed to custom XML format first,\nand then rendered to the target format.\n* [ ] Support alternative HTML output without css class\nand Tufte CSS as styling.\nMake XSL stylesheet minimal and\ndocument stylesheet format supported by the web server.\n   * [ ] This will be done for personal website, which has some private code first.\n   * [ ] For some things in the alternative styling, the old styling is still active.\n   * [ ] Create unified code based in private.\n   * [ ] Make rendering of alternative style public.\n   * [ ] Deploy alternative style.\n   * [ ] Render article title.\n* [ ] Use the new styling in order to further simplify own custom layout.\n  Custom layout should use vanilla HTML elements as much as possible.\n   * [ ] Use sections instead of divs with special classes for chapters.\n   * [ ] Simplify trees.\n* [ ] Blog about the error how I created an own layout/style and why I did that.\n* [x] Automatic style reloading does not seem to work anymore.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1638702177,"metadata":{"github-id":"UCE_lAHOFCNQW84-KreDzic3_Vg"},"target":"5db87a7e990d47becadc7c6890fd8a171d982f01abb503487d028382373857ef","message":"I always knew, that design of the website server output was not perfect,\nbut when I looked at [Tufte CSS](https://edwardtufte.github.io/tufte-css/)\nand others styles like that of [mdbook](https://rust-lang.github.io/mdBook/),\nI emotionally really understood how bad the situation is.\n\nThere are already task in order to fix some basics, before tackling the general problem,\nbut there was no real ticket for the whole problem.\nThe current examples are #26 and #37.\nAs hard it is to admit my previous XML format was better, because it was easy to adjust.\nThe only real Problem, was the fact, that it relied on XSL,\nwhich is not a portable dependency.\nOther input formats were also not really supported,\nwhich is important, when different type of documents should be mixed (especially external ones)\nor you want to make it easy for other to contribute by support a common format.\n\nIn order to find the right design, there are multiple things needed to be done,\nin order to make it easy to switch between different outputs:\n* [X] Define relationship between, input, output and template/layout format.\nThis relationship needs to be supported by the website server.\nIt's important the same content in different input formats results in the same output\nas good as justifiably possible.\n-\u003e Every fully supported format should be transformed to custom XML format first,\nand then rendered to the target format.\n* [ ] Support alternative HTML output without css class\nand Tufte CSS as styling.\nMake XSL stylesheet minimal and\ndocument stylesheet format supported by the web server.\n   * [ ] This will be done for personal website, which has some private code first.\n   * [ ] For some things in the alternative styling, the old styling is still active.\n   * [ ] Create unified code based in private.\n   * [ ] Make rendering of alternative style public.\n   * [ ] Deploy alternative style to `splitcells.net` and document updated infrastructure.\n   * [ ] Create introductory documentation to website.\nAlso, link to network blog article in this documentation regarding to plugin system.\n   * [ ] Render article title.\n* [ ] Use the new styling in order to further simplify own custom layout.\n  Custom layout should use vanilla HTML elements as much as possible.\n   * [ ] Use sections instead of divs with special classes for chapters.\n   * [ ] Simplify trees.\n* [ ] Blog about the error how I created an own layout/style and why I did that.\n* [x] Automatic style reloading does not seem to work anymore.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1638702230,"metadata":{"github-id":"UCE_lAHOFCNQW84-KreDzic3_ck"},"target":"5db87a7e990d47becadc7c6890fd8a171d982f01abb503487d028382373857ef","message":"I always knew, that design of the website server output was not perfect,\nbut when I looked at [Tufte CSS](https://edwardtufte.github.io/tufte-css/)\nand others styles like that of [mdbook](https://rust-lang.github.io/mdBook/),\nI emotionally really understood how bad the situation is.\n\nThere are already task in order to fix some basics, before tackling the general problem,\nbut there was no real ticket for the whole problem.\nThe current examples are #26 and #37.\nAs hard it is to admit my previous XML format was better, because it was easy to adjust.\nThe only real Problem, was the fact, that it relied on XSL,\nwhich is not a portable dependency.\nOther input formats were also not really supported,\nwhich is important, when different type of documents should be mixed (especially external ones)\nor you want to make it easy for other to contribute by support a common format.\n\nIn order to find the right design, there are multiple things needed to be done,\nin order to make it easy to switch between different outputs:\n* [X] Define relationship between, input, output and template/layout format.\nThis relationship needs to be supported by the website server.\nIt's important the same content in different input formats results in the same output\nas good as justifiably possible.\n-\u003e Every fully supported format should be transformed to custom XML format first,\nand then rendered to the target format.\n* [ ] Support alternative HTML output without css class\nand Tufte CSS as styling.\nMake XSL stylesheet minimal and\ndocument stylesheet format supported by the web server.\n   * [ ] This will be done for personal website, which has some private code first.\n   * [ ] Implement alternative layout.\n      * [ ] For some things in the alternative styling, the old styling is still active.\n      * [ ] Render article title.\n      * [ ] Remove all css classes etc.\n   * [ ] Create unified code based in private.\n   * [ ] Make rendering of alternative style public.\n   * [ ] Deploy alternative style to `splitcells.net` and document updated infrastructure.\n   * [ ] Create introductory documentation to website.\nAlso, link to network blog article in this documentation regarding to plugin system.\n* [ ] Use the new styling in order to further simplify own custom layout.\n  Custom layout should use vanilla HTML elements as much as possible.\n   * [ ] Use sections instead of divs with special classes for chapters.\n   * [ ] Simplify trees.\n* [ ] Blog about the error how I created an own layout/style and why I did that.\n* [x] Automatic style reloading does not seem to work anymore.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1638703039,"metadata":{"github-id":"UCE_lAHOFCNQW84-KreDzic4BvQ"},"target":"5db87a7e990d47becadc7c6890fd8a171d982f01abb503487d028382373857ef","message":"I always knew, that design of the website server output was not perfect,\nbut when I looked at [Tufte CSS](https://edwardtufte.github.io/tufte-css/)\nand others styles like that of [mdbook](https://rust-lang.github.io/mdBook/),\nI emotionally really understood how bad the situation is.\n\nThere are already task in order to fix some basics, before tackling the general problem,\nbut there was no real ticket for the whole problem.\nThe current examples are #26 and #37.\nAs hard it is to admit my previous XML format was better, because it was easy to adjust.\nThe only real Problem, was the fact, that it relied on XSL,\nwhich is not a portable dependency.\nOther input formats were also not really supported,\nwhich is important, when different type of documents should be mixed (especially external ones)\nor you want to make it easy for other to contribute by support a common format.\n\nIn order to find the right design, there are multiple things needed to be done,\nin order to make it easy to switch between different outputs:\n* [X] Define relationship between, input, output and template/layout format.\nThis relationship needs to be supported by the website server.\nIt's important the same content in different input formats results in the same output\nas good as justifiably possible.\n-\u003e Every fully supported format should be transformed to custom XML format first,\nand then rendered to the target format.\n* [ ] Support alternative HTML output without css class\nand Tufte CSS as styling.\nMake XSL stylesheet minimal and\ndocument stylesheet format supported by the web server.\n   * [ ] This will be done for personal website, which has some private code first.\n   * [ ] Implement alternative layout.\n      * [ ] For some things in the alternative styling, the old styling is still active.\n      * [ ] Render article title.\n      * [ ] Remove all css classes etc.\n   * [ ] Create unified code based in private.\n   * [ ] Make rendering of alternative style public.\n   * [ ] Deploy alternative style to `splitcells.net` and document updated infrastructure.\n   * [ ] Create introductory documentation to website.\nAlso, link to network blog article in this documentation regarding to plugin system.\n* [ ] Use the new styling in order to further simplify own custom layout.\n  Custom layout should use vanilla HTML elements as much as possible.\n   * [ ] Use sections instead of divs with special classes for chapters.\n   * [ ] Simplify trees.\n* [ ] Share XSL code as much as possible.\n* [ ] Blog about the error how I created an own layout/style and why I did that.\n* [x] Automatic style reloading does not seem to work anymore.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1638703386,"metadata":{"github-id":"UCE_lAHOFCNQW84-KreDzic4Cpg"},"target":"5db87a7e990d47becadc7c6890fd8a171d982f01abb503487d028382373857ef","message":"I always knew, that design of the website server output was not perfect,\nbut when I looked at [Tufte CSS](https://edwardtufte.github.io/tufte-css/)\nand others styles like that of [mdbook](https://rust-lang.github.io/mdBook/),\nI emotionally really understood how bad the situation is.\n\nThere are already task in order to fix some basics, before tackling the general problem,\nbut there was no real ticket for the whole problem.\nThe current examples are #26 and #37.\nAs hard it is to admit my previous XML format was better, because it was easy to adjust.\nThe only real Problem, was the fact, that it relied on XSL,\nwhich is not a portable dependency.\nOther input formats were also not really supported,\nwhich is important, when different type of documents should be mixed (especially external ones)\nor you want to make it easy for other to contribute by support a common format.\n\nIn order to find the right design, there are multiple things needed to be done,\nin order to make it easy to switch between different outputs:\n* [X] Define relationship between, input, output and template/layout format.\nThis relationship needs to be supported by the website server.\nIt's important the same content in different input formats results in the same output\nas good as justifiably possible.\n-\u003e Every fully supported format should be transformed to custom XML format first,\nand then rendered to the target format.\n* [ ] Support alternative HTML output without css class\nand Tufte CSS as styling.\nMake XSL stylesheet minimal and\ndocument stylesheet format supported by the web server.\n   * [ ] This will be done for personal website, which has some private code first.\n   * [ ] Implement alternative layout.\n      * [ ] For some things in the alternative styling, the old styling is still active.\n      * [ ] Render article title.\n      * [ ] Remove all css classes etc.\n   * [ ] Create unified code based in private.\n   * [ ] Make rendering of alternative style public.\n   * [ ] Deploy alternative style to `splitcells.net` and document updated infrastructure.\n   * [ ] Create introductory documentation to website.\nAlso, link to network blog article in this documentation regarding to plugin system.\n* [ ] Use the new styling in order to further simplify own custom layout.\n  Custom layout should use vanilla HTML elements as much as possible.\n   * [ ] Use sections instead of divs with special classes for chapters.\n   * [ ] Simplify trees.\n* [ ] Share XSL code as much as possible.\n  Make default layout XSL code the base of this.\n* [ ] Blog about the error how I created an own layout/style and why I did that.\n* [x] Automatic style reloading does not seem to work anymore.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1638703400,"metadata":{"github-id":"UCE_lAHOFCNQW84-KreDzic4CrU"},"target":"5db87a7e990d47becadc7c6890fd8a171d982f01abb503487d028382373857ef","message":"I always knew, that design of the website server output was not perfect,\nbut when I looked at [Tufte CSS](https://edwardtufte.github.io/tufte-css/)\nand others styles like that of [mdbook](https://rust-lang.github.io/mdBook/),\nI emotionally really understood how bad the situation is.\n\nThere are already task in order to fix some basics, before tackling the general problem,\nbut there was no real ticket for the whole problem.\nThe current examples are #26 and #37.\nAs hard it is to admit my previous XML format was better, because it was easy to adjust.\nThe only real Problem, was the fact, that it relied on XSL,\nwhich is not a portable dependency.\nOther input formats were also not really supported,\nwhich is important, when different type of documents should be mixed (especially external ones)\nor you want to make it easy for other to contribute by support a common format.\n\nIn order to find the right design, there are multiple things needed to be done,\nin order to make it easy to switch between different outputs:\n* [X] Define relationship between, input, output and template/layout format.\nThis relationship needs to be supported by the website server.\nIt's important the same content in different input formats results in the same output\nas good as justifiably possible.\n-\u003e Every fully supported format should be transformed to custom XML format first,\nand then rendered to the target format.\n* [ ] Support alternative HTML output without css class\nand Tufte CSS as styling.\nMake XSL stylesheet minimal and\ndocument stylesheet format supported by the web server.\n   * [ ] This will be done for personal website, which has some private code first.\n   * [ ] Implement alternative layout.\n      * [ ] For some things in the alternative styling, the old styling is still active.\n      * [ ] Render article title.\n      * [ ] Remove all css classes etc.\n   * [ ] Create unified code based in private.\n   * [ ] Make rendering of alternative style public.\n   * [ ] Deploy alternative style to `splitcells.net` and document updated infrastructure.\n   * [ ] Create introductory documentation to website.\nAlso, link to network blog article in this documentation regarding to plugin system.\n* [ ] Use the new styling in order to further simplify own custom layout.\n  Custom layout should use vanilla HTML elements as much as possible.\n   * [ ] Use sections instead of divs with special classes for chapters.\n   * [ ] Simplify trees.\n* [ ] Share XSL code as much as possible.\n  Make default layout XSL code the base of this and not the other way around.\n* [ ] Blog about the error how I created an own layout/style and why I did that.\n* [x] Automatic style reloading does not seem to work anymore.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1641770359,"metadata":{"github-id":"UCE_lAHOFCNQW84-KreDzihZc8s"},"target":"5db87a7e990d47becadc7c6890fd8a171d982f01abb503487d028382373857ef","message":"I always knew, that design of the website server output was not perfect,\nbut when I looked at [Tufte CSS](https://edwardtufte.github.io/tufte-css/)\nand others styles like that of [mdbook](https://rust-lang.github.io/mdBook/),\nI emotionally really understood how bad the situation is.\n\nThere are already task in order to fix some basics, before tackling the general problem,\nbut there was no real ticket for the whole problem.\nThe current examples are #26 and #37.\nAs hard it is to admit my previous XML format was better, because it was easy to adjust.\nThe only real Problem, was the fact, that it relied on XSL,\nwhich is not a portable dependency.\nOther input formats were also not really supported,\nwhich is important, when different type of documents should be mixed (especially external ones)\nor you want to make it easy for other to contribute by support a common format.\n\nIn order to find the right design, there are multiple things needed to be done,\nin order to make it easy to switch between different outputs:\n* [X] Define relationship between, input, output and template/layout format.\nThis relationship needs to be supported by the website server.\nIt's important the same content in different input formats results in the same output\nas good as justifiably possible.\n-\u003e Every fully supported format should be transformed to custom XML format first,\nand then rendered to the target format.\n* [ ] Support alternative HTML output without css class\nand Tufte CSS as styling.\nMake XSL stylesheet minimal and\ndocument stylesheet format supported by the web server.\n   * [ ] This will be done for personal website, which has some private code first.\n   * [ ] Implement alternative layout.\n      * [ ] For some things in the alternative styling, the old styling is still active.\n      * [ ] Render article title.\n      * [ ] Remove all css classes etc.\n   * [ ] Create unified code based in private.\n   * [ ] Make rendering of alternative style public.\n   * [ ] Deploy alternative style to `splitcells.net` and document updated infrastructure.\n   * [ ] Create introductory documentation to website.\nAlso, link to network blog article in this documentation regarding to plugin system.\n* [ ] Use the new styling in order to further simplify own custom layout.\n  Custom layout should use vanilla HTML elements as much as possible.\n   * [ ] Use sections instead of divs with special classes for chapters.\n   * [ ] Simplify trees.\n* [ ] Share XSL code as much as possible.\n  Make default layout XSL code the base of this and not the other way around.\n* [ ] Blog about the error how I created an own layout/style and why I did that.\n* [x] Automatic style reloading does not seem to work anymore.\n* [ ] Use one XSL style sheets instead of 2. \n   * [ ] The style sheet will need additional parameters to support both outputs.\n   * [ ] Simplifying the rendering results will help with that as well.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1644051856,"metadata":{"github-id":"UCE_lAHOFCNQW84-KreDzil-e_Q"},"target":"5db87a7e990d47becadc7c6890fd8a171d982f01abb503487d028382373857ef","message":"I always knew, that design of the website server output was not perfect,\nbut when I looked at [Tufte CSS](https://edwardtufte.github.io/tufte-css/)\nand others styles like that of [mdbook](https://rust-lang.github.io/mdBook/),\nI emotionally really understood how bad the situation is.\n\nThere are already task in order to fix some basics, before tackling the general problem,\nbut there was no real ticket for the whole problem.\nThe current examples are #26 and #37.\nAs hard it is to admit my previous XML format was better, because it was easy to adjust.\nThe only real Problem, was the fact, that it relied on XSL,\nwhich is not a portable dependency.\nOther input formats were also not really supported,\nwhich is important, when different type of documents should be mixed (especially external ones)\nor you want to make it easy for other to contribute by support a common format.\n\nIn order to find the right design, there are multiple things needed to be done,\nin order to make it easy to switch between different outputs:\n* [X] Define relationship between, input, output and template/layout format.\nThis relationship needs to be supported by the website server.\nIt's important the same content in different input formats results in the same output\nas good as justifiably possible.\n-\u003e Every fully supported format should be transformed to custom XML format first,\nand then rendered to the target format.\n* [ ] Support alternative HTML output without css class\nand Tufte CSS as styling.\nMake XSL stylesheet minimal and\ndocument stylesheet format supported by the web server.\n   * [ ] This will be done for personal website, which has some private code first.\n   * [ ] Implement alternative layout.\n      * [ ] For some things in the alternative styling, the old styling is still active.\n      * [ ] Render article title.\n      * [ ] Remove all css classes etc.\n   * [ ] Create unified code based in private.\n   * [ ] Make rendering of alternative style public.\n   * [ ] Deploy alternative style to `splitcells.net` and document updated infrastructure.\n   * [ ] Create introductory documentation to website.\nAlso, link to network blog article in this documentation regarding to plugin system.\n* [ ] Use the new styling in order to further simplify own custom layout.\n  Custom layout should use vanilla HTML elements as much as possible.\n   * [ ] Use sections instead of divs with special classes for chapters.\n   * [ ] Simplify trees.\n* [ ] Share XSL code as much as possible.\n  Make default layout XSL code the base of this and not the other way around.\n* [ ] Blog about the error how I created an own layout/style and why I did that.\n* [x] Automatic style reloading does not seem to work anymore.\n* [ ] Use one XSL style sheets instead of 2. \n   * [ ] The style sheet will need additional parameters to support both outputs.\n      * [x]  Create styling option `generation.style`.\n      * [x]  Set styling option in Java code.\n   * [ ] Simplifying the rendering results will help with that as well.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1644051864,"metadata":{"github-id":"UCE_lAHOFCNQW84-KreDzil-fBg"},"target":"5db87a7e990d47becadc7c6890fd8a171d982f01abb503487d028382373857ef","message":"I always knew, that design of the website server output was not perfect,\nbut when I looked at [Tufte CSS](https://edwardtufte.github.io/tufte-css/)\nand others styles like that of [mdbook](https://rust-lang.github.io/mdBook/),\nI emotionally really understood how bad the situation is.\n\nThere are already task in order to fix some basics, before tackling the general problem,\nbut there was no real ticket for the whole problem.\nThe current examples are #26 and #37.\nAs hard it is to admit my previous XML format was better, because it was easy to adjust.\nThe only real Problem, was the fact, that it relied on XSL,\nwhich is not a portable dependency.\nOther input formats were also not really supported,\nwhich is important, when different type of documents should be mixed (especially external ones)\nor you want to make it easy for other to contribute by support a common format.\n\nIn order to find the right design, there are multiple things needed to be done,\nin order to make it easy to switch between different outputs:\n* [X] Define relationship between, input, output and template/layout format.\nThis relationship needs to be supported by the website server.\nIt's important the same content in different input formats results in the same output\nas good as justifiably possible.\n-\u003e Every fully supported format should be transformed to custom XML format first,\nand then rendered to the target format.\n* [ ] Support alternative HTML output without css class\nand Tufte CSS as styling.\nMake XSL stylesheet minimal and\ndocument stylesheet format supported by the web server.\n   * [ ] This will be done for personal website, which has some private code first.\n   * [ ] Implement alternative layout.\n      * [ ] For some things in the alternative styling, the old styling is still active.\n      * [ ] Render article title.\n      * [ ] Remove all css classes etc.\n   * [ ] Create unified code based in private.\n   * [ ] Make rendering of alternative style public.\n   * [ ] Deploy alternative style to `splitcells.net` and document updated infrastructure.\n   * [ ] Create introductory documentation to website.\nAlso, link to network blog article in this documentation regarding to plugin system.\n* [ ] Use the new styling in order to further simplify own custom layout.\n  Custom layout should use vanilla HTML elements as much as possible.\n   * [ ] Use sections instead of divs with special classes for chapters.\n   * [ ] Simplify trees.\n* [ ] Share XSL code as much as possible.\n  Make default layout XSL code the base of this and not the other way around.\n* [ ] Blog about the error how I created an own layout/style and why I did that.\n* [x] Automatic style reloading does not seem to work anymore.\n* [ ] Use one XSL style sheets instead of 2. \n   * [ ] The style sheet will need additional parameters to support both outputs.\n      * [x]  Create styling option `generation.style`.\n      * [ ]  Set styling option in Java code.\n   * [ ] Simplifying the rendering results will help with that as well.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1645399391,"metadata":{"github-id":"UCE_lAHOFCNQW84-KreDziopxpM"},"target":"5db87a7e990d47becadc7c6890fd8a171d982f01abb503487d028382373857ef","message":"I always knew, that design of the website server output was not perfect,\nbut when I looked at [Tufte CSS](https://edwardtufte.github.io/tufte-css/)\nand others styles like that of [mdbook](https://rust-lang.github.io/mdBook/),\nI emotionally really understood how bad the situation is.\n\nThere are already task in order to fix some basics, before tackling the general problem,\nbut there was no real ticket for the whole problem.\nThe current examples are #26 and #37.\nAs hard it is to admit my previous XML format was better, because it was easy to adjust.\nThe only real Problem, was the fact, that it relied on XSL,\nwhich is not a portable dependency.\nOther input formats were also not really supported,\nwhich is important, when different type of documents should be mixed (especially external ones)\nor you want to make it easy for other to contribute by support a common format.\n\nIn order to find the right design, there are multiple things needed to be done,\nin order to make it easy to switch between different outputs:\n* [X] Define relationship between, input, output and template/layout format.\nThis relationship needs to be supported by the website server.\nIt's important the same content in different input formats results in the same output\nas good as justifiably possible.\n-\u003e Every fully supported format should be transformed to custom XML format first,\nand then rendered to the target format.\n* [ ] Support alternative HTML output without css class\nand Tufte CSS as styling.\nMake XSL stylesheet minimal and\ndocument stylesheet format supported by the web server.\n   * [ ] This will be done for personal website, which has some private code first.\n   * [ ] Implement alternative layout.\n      * [ ] For some things in the alternative styling, the old styling is still active.\n      * [ ] Render article title.\n      * [ ] Remove all css classes etc.\n   * [ ] Create unified code based in private.\n   * [ ] Make rendering of alternative style public.\n   * [ ] Deploy alternative style to `splitcells.net` and document updated infrastructure.\n   * [ ] Create introductory documentation to website.\nAlso, link to network blog article in this documentation regarding to plugin system.\n* [ ] Use the new styling in order to further simplify own custom layout.\n  Custom layout should use vanilla HTML elements as much as possible.\n   * [ ] Use sections instead of divs with special classes for chapters.\n   * [ ] Simplify trees.\n* [x] Share XSL code as much as possible.\n  Make default layout XSL code the base of this and not the other way around.\n* [ ] Blog about the error how I created an own layout/style and why I did that.\n* [x] Automatic style reloading does not seem to work anymore.\n* [ ] Use one XSL style sheets instead of 2. \n   * [ ] The style sheet will need additional parameters to support both outputs.\n      * [x]  Create styling option `generation.style`.\n      * [ ]  Set styling option in Java code.\n   * [ ] Simplifying the rendering results will help with that as well.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1645399394,"metadata":{"github-id":"UCE_lAHOFCNQW84-KreDziopxqM"},"target":"5db87a7e990d47becadc7c6890fd8a171d982f01abb503487d028382373857ef","message":"I always knew, that design of the website server output was not perfect,\nbut when I looked at [Tufte CSS](https://edwardtufte.github.io/tufte-css/)\nand others styles like that of [mdbook](https://rust-lang.github.io/mdBook/),\nI emotionally really understood how bad the situation is.\n\nThere are already task in order to fix some basics, before tackling the general problem,\nbut there was no real ticket for the whole problem.\nThe current examples are #26 and #37.\nAs hard it is to admit my previous XML format was better, because it was easy to adjust.\nThe only real Problem, was the fact, that it relied on XSL,\nwhich is not a portable dependency.\nOther input formats were also not really supported,\nwhich is important, when different type of documents should be mixed (especially external ones)\nor you want to make it easy for other to contribute by support a common format.\n\nIn order to find the right design, there are multiple things needed to be done,\nin order to make it easy to switch between different outputs:\n* [X] Define relationship between, input, output and template/layout format.\nThis relationship needs to be supported by the website server.\nIt's important the same content in different input formats results in the same output\nas good as justifiably possible.\n-\u003e Every fully supported format should be transformed to custom XML format first,\nand then rendered to the target format.\n* [ ] Support alternative HTML output without css class\nand Tufte CSS as styling.\nMake XSL stylesheet minimal and\ndocument stylesheet format supported by the web server.\n   * [ ] This will be done for personal website, which has some private code first.\n   * [ ] Implement alternative layout.\n      * [ ] For some things in the alternative styling, the old styling is still active.\n      * [ ] Render article title.\n      * [ ] Remove all css classes etc.\n   * [ ] Create unified code based in private.\n   * [ ] Make rendering of alternative style public.\n   * [ ] Deploy alternative style to `splitcells.net` and document updated infrastructure.\n   * [ ] Create introductory documentation to website.\nAlso, link to network blog article in this documentation regarding to plugin system.\n* [ ] Use the new styling in order to further simplify own custom layout.\n  Custom layout should use vanilla HTML elements as much as possible.\n   * [ ] Use sections instead of divs with special classes for chapters.\n   * [ ] Simplify trees.\n* [x] Share XSL code as much as possible.\n  Make default layout XSL code the base of this and not the other way around.\n* [ ] Blog about the error how I created an own layout/style and why I did that.\n* [x] Automatic style reloading does not seem to work anymore.\n* [x] Use one XSL style sheets instead of 2. \n   * [ ] The style sheet will need additional parameters to support both outputs.\n      * [x]  Create styling option `generation.style`.\n      * [ ]  Set styling option in Java code.\n   * [ ] Simplifying the rendering results will help with that as well.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1645399396,"metadata":{"github-id":"UCE_lAHOFCNQW84-KreDziopxqo"},"target":"5db87a7e990d47becadc7c6890fd8a171d982f01abb503487d028382373857ef","message":"I always knew, that design of the website server output was not perfect,\nbut when I looked at [Tufte CSS](https://edwardtufte.github.io/tufte-css/)\nand others styles like that of [mdbook](https://rust-lang.github.io/mdBook/),\nI emotionally really understood how bad the situation is.\n\nThere are already task in order to fix some basics, before tackling the general problem,\nbut there was no real ticket for the whole problem.\nThe current examples are #26 and #37.\nAs hard it is to admit my previous XML format was better, because it was easy to adjust.\nThe only real Problem, was the fact, that it relied on XSL,\nwhich is not a portable dependency.\nOther input formats were also not really supported,\nwhich is important, when different type of documents should be mixed (especially external ones)\nor you want to make it easy for other to contribute by support a common format.\n\nIn order to find the right design, there are multiple things needed to be done,\nin order to make it easy to switch between different outputs:\n* [X] Define relationship between, input, output and template/layout format.\nThis relationship needs to be supported by the website server.\nIt's important the same content in different input formats results in the same output\nas good as justifiably possible.\n-\u003e Every fully supported format should be transformed to custom XML format first,\nand then rendered to the target format.\n* [ ] Support alternative HTML output without css class\nand Tufte CSS as styling.\nMake XSL stylesheet minimal and\ndocument stylesheet format supported by the web server.\n   * [ ] This will be done for personal website, which has some private code first.\n   * [ ] Implement alternative layout.\n      * [ ] For some things in the alternative styling, the old styling is still active.\n      * [ ] Render article title.\n      * [ ] Remove all css classes etc.\n   * [ ] Create unified code based in private.\n   * [ ] Make rendering of alternative style public.\n   * [ ] Deploy alternative style to `splitcells.net` and document updated infrastructure.\n   * [ ] Create introductory documentation to website.\nAlso, link to network blog article in this documentation regarding to plugin system.\n* [ ] Use the new styling in order to further simplify own custom layout.\n  Custom layout should use vanilla HTML elements as much as possible.\n   * [ ] Use sections instead of divs with special classes for chapters.\n   * [ ] Simplify trees.\n* [x] Share XSL code as much as possible.\n  Make default layout XSL code the base of this and not the other way around.\n* [ ] Blog about the error how I created an own layout/style and why I did that.\n* [x] Automatic style reloading does not seem to work anymore.\n* [x] Use one XSL style sheets instead of 2. \n   * [ ] The style sheet will need additional parameters to support both outputs.\n      * [x]  Create styling option `generation.style`.\n      * [x]  Set styling option in Java code.\n   * [ ] Simplifying the rendering results will help with that as well.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1645399400,"metadata":{"github-id":"UCE_lAHOFCNQW84-KreDziopxrQ"},"target":"5db87a7e990d47becadc7c6890fd8a171d982f01abb503487d028382373857ef","message":"I always knew, that design of the website server output was not perfect,\nbut when I looked at [Tufte CSS](https://edwardtufte.github.io/tufte-css/)\nand others styles like that of [mdbook](https://rust-lang.github.io/mdBook/),\nI emotionally really understood how bad the situation is.\n\nThere are already task in order to fix some basics, before tackling the general problem,\nbut there was no real ticket for the whole problem.\nThe current examples are #26 and #37.\nAs hard it is to admit my previous XML format was better, because it was easy to adjust.\nThe only real Problem, was the fact, that it relied on XSL,\nwhich is not a portable dependency.\nOther input formats were also not really supported,\nwhich is important, when different type of documents should be mixed (especially external ones)\nor you want to make it easy for other to contribute by support a common format.\n\nIn order to find the right design, there are multiple things needed to be done,\nin order to make it easy to switch between different outputs:\n* [X] Define relationship between, input, output and template/layout format.\nThis relationship needs to be supported by the website server.\nIt's important the same content in different input formats results in the same output\nas good as justifiably possible.\n-\u003e Every fully supported format should be transformed to custom XML format first,\nand then rendered to the target format.\n* [ ] Support alternative HTML output without css class\nand Tufte CSS as styling.\nMake XSL stylesheet minimal and\ndocument stylesheet format supported by the web server.\n   * [ ] This will be done for personal website, which has some private code first.\n   * [ ] Implement alternative layout.\n      * [ ] For some things in the alternative styling, the old styling is still active.\n      * [ ] Render article title.\n      * [ ] Remove all css classes etc.\n   * [ ] Create unified code based in private.\n   * [ ] Make rendering of alternative style public.\n   * [ ] Deploy alternative style to `splitcells.net` and document updated infrastructure.\n   * [ ] Create introductory documentation to website.\nAlso, link to network blog article in this documentation regarding to plugin system.\n* [ ] Use the new styling in order to further simplify own custom layout.\n  Custom layout should use vanilla HTML elements as much as possible.\n   * [ ] Use sections instead of divs with special classes for chapters.\n   * [ ] Simplify trees.\n* [x] Share XSL code as much as possible.\n  Make default layout XSL code the base of this and not the other way around.\n* [ ] Blog about the error how I created an own layout/style and why I did that.\n* [x] Automatic style reloading does not seem to work anymore.\n* [x] Use one XSL style sheets instead of 2. \n   * [ ] The style sheet will need additional parameters to support both outputs.\n      * [x]  Create styling option `generation.style`.\n      * [x]  Set styling option in Java code.\n   * [x] Simplifying the rendering results will help with that as well.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1645399402,"metadata":{"github-id":"UCE_lAHOFCNQW84-KreDziopxrc"},"target":"5db87a7e990d47becadc7c6890fd8a171d982f01abb503487d028382373857ef","message":"I always knew, that design of the website server output was not perfect,\nbut when I looked at [Tufte CSS](https://edwardtufte.github.io/tufte-css/)\nand others styles like that of [mdbook](https://rust-lang.github.io/mdBook/),\nI emotionally really understood how bad the situation is.\n\nThere are already task in order to fix some basics, before tackling the general problem,\nbut there was no real ticket for the whole problem.\nThe current examples are #26 and #37.\nAs hard it is to admit my previous XML format was better, because it was easy to adjust.\nThe only real Problem, was the fact, that it relied on XSL,\nwhich is not a portable dependency.\nOther input formats were also not really supported,\nwhich is important, when different type of documents should be mixed (especially external ones)\nor you want to make it easy for other to contribute by support a common format.\n\nIn order to find the right design, there are multiple things needed to be done,\nin order to make it easy to switch between different outputs:\n* [X] Define relationship between, input, output and template/layout format.\nThis relationship needs to be supported by the website server.\nIt's important the same content in different input formats results in the same output\nas good as justifiably possible.\n-\u003e Every fully supported format should be transformed to custom XML format first,\nand then rendered to the target format.\n* [ ] Support alternative HTML output without css class\nand Tufte CSS as styling.\nMake XSL stylesheet minimal and\ndocument stylesheet format supported by the web server.\n   * [ ] This will be done for personal website, which has some private code first.\n   * [ ] Implement alternative layout.\n      * [ ] For some things in the alternative styling, the old styling is still active.\n      * [ ] Render article title.\n      * [ ] Remove all css classes etc.\n   * [ ] Create unified code based in private.\n   * [ ] Make rendering of alternative style public.\n   * [ ] Deploy alternative style to `splitcells.net` and document updated infrastructure.\n   * [ ] Create introductory documentation to website.\nAlso, link to network blog article in this documentation regarding to plugin system.\n* [ ] Use the new styling in order to further simplify own custom layout.\n  Custom layout should use vanilla HTML elements as much as possible.\n   * [ ] Use sections instead of divs with special classes for chapters.\n   * [ ] Simplify trees.\n* [x] Share XSL code as much as possible.\n  Make default layout XSL code the base of this and not the other way around.\n* [ ] Blog about the error how I created an own layout/style and why I did that.\n* [x] Automatic style reloading does not seem to work anymore.\n* [x] Use one XSL style sheets instead of 2. \n   * [x] The style sheet will need additional parameters to support both outputs.\n      * [x]  Create styling option `generation.style`.\n      * [x]  Set styling option in Java code.\n   * [x] Simplifying the rendering results will help with that as well.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1645399511,"metadata":{"github-id":"UCE_lAHOFCNQW84-KreDziopyD0"},"target":"5db87a7e990d47becadc7c6890fd8a171d982f01abb503487d028382373857ef","message":"I always knew, that design of the website server output was not perfect,\nbut when I looked at [Tufte CSS](https://edwardtufte.github.io/tufte-css/)\nand others styles like that of [mdbook](https://rust-lang.github.io/mdBook/),\nI emotionally really understood how bad the situation is.\n\nThere are already task in order to fix some basics, before tackling the general problem,\nbut there was no real ticket for the whole problem.\nThe current examples are #26 and #37.\nAs hard it is to admit my previous XML format was better, because it was easy to adjust.\nThe only real Problem, was the fact, that it relied on XSL,\nwhich is not a portable dependency.\nOther input formats were also not really supported,\nwhich is important, when different type of documents should be mixed (especially external ones)\nor you want to make it easy for other to contribute by support a common format.\n\nIn order to find the right design, there are multiple things needed to be done,\nin order to make it easy to switch between different outputs:\n* [X] Define relationship between, input, output and template/layout format.\nThis relationship needs to be supported by the website server.\nIt's important the same content in different input formats results in the same output\nas good as justifiably possible.\n-\u003e Every fully supported format should be transformed to custom XML format first,\nand then rendered to the target format.\n* [ ] Support alternative HTML output without css class\nand Tufte CSS as styling.\nMake XSL stylesheet minimal and\ndocument stylesheet format supported by the web server.\n   * [ ] This will be done for personal website, which has some private code first.\n   * [ ] Implement alternative layout.\n      * [ ] For some things in the alternative styling, the old styling is still active.\n      * [ ] Render article title.\n      * [ ] Remove all css classes etc.\n   * [ ] Create unified code based in private.\n   * [ ] Make rendering of alternative style public.\n   * [ ] Deploy alternative style to `splitcells.net` and document updated infrastructure.\n   * [ ] Create introductory documentation to website.\nAlso, link to network blog article in this documentation regarding to plugin system.\n* [ ] Use the new styling in order to further simplify own custom layout.\n  Custom layout should use vanilla HTML elements as much as possible.\n   * [ ] Use sections instead of divs with special classes for chapters.\n   * [x] Simplify trees.\n* [x] Share XSL code as much as possible.\n  Make default layout XSL code the base of this and not the other way around.\n* [ ] Blog about the error how I created an own layout/style and why I did that.\n* [x] Automatic style reloading does not seem to work anymore.\n* [x] Use one XSL style sheets instead of 2. \n   * [x] The style sheet will need additional parameters to support both outputs.\n      * [x]  Create styling option `generation.style`.\n      * [x]  Set styling option in Java code.\n   * [x] Simplifying the rendering results will help with that as well.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1645399512,"metadata":{"github-id":"UCE_lAHOFCNQW84-KreDziopyEU"},"target":"5db87a7e990d47becadc7c6890fd8a171d982f01abb503487d028382373857ef","message":"I always knew, that design of the website server output was not perfect,\nbut when I looked at [Tufte CSS](https://edwardtufte.github.io/tufte-css/)\nand others styles like that of [mdbook](https://rust-lang.github.io/mdBook/),\nI emotionally really understood how bad the situation is.\n\nThere are already task in order to fix some basics, before tackling the general problem,\nbut there was no real ticket for the whole problem.\nThe current examples are #26 and #37.\nAs hard it is to admit my previous XML format was better, because it was easy to adjust.\nThe only real Problem, was the fact, that it relied on XSL,\nwhich is not a portable dependency.\nOther input formats were also not really supported,\nwhich is important, when different type of documents should be mixed (especially external ones)\nor you want to make it easy for other to contribute by support a common format.\n\nIn order to find the right design, there are multiple things needed to be done,\nin order to make it easy to switch between different outputs:\n* [X] Define relationship between, input, output and template/layout format.\nThis relationship needs to be supported by the website server.\nIt's important the same content in different input formats results in the same output\nas good as justifiably possible.\n-\u003e Every fully supported format should be transformed to custom XML format first,\nand then rendered to the target format.\n* [ ] Support alternative HTML output without css class\nand Tufte CSS as styling.\nMake XSL stylesheet minimal and\ndocument stylesheet format supported by the web server.\n   * [ ] This will be done for personal website, which has some private code first.\n   * [ ] Implement alternative layout.\n      * [ ] For some things in the alternative styling, the old styling is still active.\n      * [ ] Render article title.\n      * [ ] Remove all css classes etc.\n   * [ ] Create unified code based in private.\n   * [ ] Make rendering of alternative style public.\n   * [ ] Deploy alternative style to `splitcells.net` and document updated infrastructure.\n   * [ ] Create introductory documentation to website.\nAlso, link to network blog article in this documentation regarding to plugin system.\n* [ ] Use the new styling in order to further simplify own custom layout.\n  Custom layout should use vanilla HTML elements as much as possible.\n   * [ ] Use sections instead of divs with special classes for chapters.\n   * [ ] Simplify trees.\n* [x] Share XSL code as much as possible.\n  Make default layout XSL code the base of this and not the other way around.\n* [ ] Blog about the error how I created an own layout/style and why I did that.\n* [x] Automatic style reloading does not seem to work anymore.\n* [x] Use one XSL style sheets instead of 2. \n   * [x] The style sheet will need additional parameters to support both outputs.\n      * [x]  Create styling option `generation.style`.\n      * [x]  Set styling option in Java code.\n   * [x] Simplifying the rendering results will help with that as well.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1645399513,"metadata":{"github-id":"UCE_lAHOFCNQW84-KreDziopyEo"},"target":"5db87a7e990d47becadc7c6890fd8a171d982f01abb503487d028382373857ef","message":"I always knew, that design of the website server output was not perfect,\nbut when I looked at [Tufte CSS](https://edwardtufte.github.io/tufte-css/)\nand others styles like that of [mdbook](https://rust-lang.github.io/mdBook/),\nI emotionally really understood how bad the situation is.\n\nThere are already task in order to fix some basics, before tackling the general problem,\nbut there was no real ticket for the whole problem.\nThe current examples are #26 and #37.\nAs hard it is to admit my previous XML format was better, because it was easy to adjust.\nThe only real Problem, was the fact, that it relied on XSL,\nwhich is not a portable dependency.\nOther input formats were also not really supported,\nwhich is important, when different type of documents should be mixed (especially external ones)\nor you want to make it easy for other to contribute by support a common format.\n\nIn order to find the right design, there are multiple things needed to be done,\nin order to make it easy to switch between different outputs:\n* [X] Define relationship between, input, output and template/layout format.\nThis relationship needs to be supported by the website server.\nIt's important the same content in different input formats results in the same output\nas good as justifiably possible.\n-\u003e Every fully supported format should be transformed to custom XML format first,\nand then rendered to the target format.\n* [ ] Support alternative HTML output without css class\nand Tufte CSS as styling.\nMake XSL stylesheet minimal and\ndocument stylesheet format supported by the web server.\n   * [ ] This will be done for personal website, which has some private code first.\n   * [ ] Implement alternative layout.\n      * [ ] For some things in the alternative styling, the old styling is still active.\n      * [ ] Render article title.\n      * [ ] Remove all css classes etc.\n   * [ ] Create unified code based in private.\n   * [ ] Make rendering of alternative style public.\n   * [ ] Deploy alternative style to `splitcells.net` and document updated infrastructure.\n   * [ ] Create introductory documentation to website.\nAlso, link to network blog article in this documentation regarding to plugin system.\n* [ ] Use the new styling in order to further simplify own custom layout.\n  Custom layout should use vanilla HTML elements as much as possible.\n   * [x] Use sections instead of divs with special classes for chapters.\n   * [ ] Simplify trees.\n* [x] Share XSL code as much as possible.\n  Make default layout XSL code the base of this and not the other way around.\n* [ ] Blog about the error how I created an own layout/style and why I did that.\n* [x] Automatic style reloading does not seem to work anymore.\n* [x] Use one XSL style sheets instead of 2. \n   * [x] The style sheet will need additional parameters to support both outputs.\n      * [x]  Create styling option `generation.style`.\n      * [x]  Set styling option in Java code.\n   * [x] Simplifying the rendering results will help with that as well.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1645400325,"metadata":{"github-id":"UCE_lAHOFCNQW84-KreDziop02A"},"target":"5db87a7e990d47becadc7c6890fd8a171d982f01abb503487d028382373857ef","message":"I always knew, that design of the website server output was not perfect,\nbut when I looked at [Tufte CSS](https://edwardtufte.github.io/tufte-css/)\nand others styles like that of [mdbook](https://rust-lang.github.io/mdBook/),\nI emotionally really understood how bad the situation is.\n\nThere are already task in order to fix some basics, before tackling the general problem,\nbut there was no real ticket for the whole problem.\nThe current examples are #26 and #37.\nAs hard it is to admit my previous XML format was better, because it was easy to adjust.\nThe only real Problem, was the fact, that it relied on XSL,\nwhich is not a portable dependency.\nOther input formats were also not really supported,\nwhich is important, when different type of documents should be mixed (especially external ones)\nor you want to make it easy for other to contribute by support a common format.\n\nIn order to find the right design, there are multiple things needed to be done,\nin order to make it easy to switch between different outputs:\n* [X] Define relationship between, input, output and template/layout format.\nThis relationship needs to be supported by the website server.\nIt's important the same content in different input formats results in the same output\nas good as justifiably possible.\n-\u003e Every fully supported format should be transformed to custom XML format first,\nand then rendered to the target format.\n* [ ] Support alternative HTML output without css class\nand Tufte CSS as styling.\nMake XSL stylesheet minimal and\ndocument stylesheet format supported by the web server.\n   * [ ] This will be done for personal website, which has some private code first.\n   * [ ] Implement alternative layout.\n      * [ ] For some things in the alternative styling, the old styling is still active.\n      * [ ] Render article title.\n      * [ ] Remove all css classes etc.\n   * [ ] Create unified code based in private.\n   * [ ] Make rendering of alternative style public.\n   * [ ] Deploy alternative style to `splitcells.net` and document updated infrastructure.\n   * [ ] Create introductory documentation to website.\nAlso, link to network blog article in this documentation regarding to plugin system.\n* [x] Use the new styling in order to further simplify own custom layout.\n  Custom layout should use vanilla HTML elements as much as possible.\n   * [x] Use sections instead of divs with special classes for chapters.\n   * [ ] Simplify trees.\n* [x] Share XSL code as much as possible.\n  Make default layout XSL code the base of this and not the other way around.\n* [ ] Blog about the error how I created an own layout/style and why I did that.\n* [x] Automatic style reloading does not seem to work anymore.\n* [x] Use one XSL style sheets instead of 2. \n   * [x] The style sheet will need additional parameters to support both outputs.\n      * [x]  Create styling option `generation.style`.\n      * [x]  Set styling option in Java code.\n   * [x] Simplifying the rendering results will help with that as well.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1645400326,"metadata":{"github-id":"UCE_lAHOFCNQW84-KreDziop02E"},"target":"5db87a7e990d47becadc7c6890fd8a171d982f01abb503487d028382373857ef","message":"I always knew, that design of the website server output was not perfect,\nbut when I looked at [Tufte CSS](https://edwardtufte.github.io/tufte-css/)\nand others styles like that of [mdbook](https://rust-lang.github.io/mdBook/),\nI emotionally really understood how bad the situation is.\n\nThere are already task in order to fix some basics, before tackling the general problem,\nbut there was no real ticket for the whole problem.\nThe current examples are #26 and #37.\nAs hard it is to admit my previous XML format was better, because it was easy to adjust.\nThe only real Problem, was the fact, that it relied on XSL,\nwhich is not a portable dependency.\nOther input formats were also not really supported,\nwhich is important, when different type of documents should be mixed (especially external ones)\nor you want to make it easy for other to contribute by support a common format.\n\nIn order to find the right design, there are multiple things needed to be done,\nin order to make it easy to switch between different outputs:\n* [X] Define relationship between, input, output and template/layout format.\nThis relationship needs to be supported by the website server.\nIt's important the same content in different input formats results in the same output\nas good as justifiably possible.\n-\u003e Every fully supported format should be transformed to custom XML format first,\nand then rendered to the target format.\n* [ ] Support alternative HTML output without css class\nand Tufte CSS as styling.\nMake XSL stylesheet minimal and\ndocument stylesheet format supported by the web server.\n   * [ ] This will be done for personal website, which has some private code first.\n   * [ ] Implement alternative layout.\n      * [ ] For some things in the alternative styling, the old styling is still active.\n      * [ ] Render article title.\n      * [ ] Remove all css classes etc.\n   * [ ] Create unified code based in private.\n   * [ ] Make rendering of alternative style public.\n   * [ ] Deploy alternative style to `splitcells.net` and document updated infrastructure.\n   * [ ] Create introductory documentation to website.\nAlso, link to network blog article in this documentation regarding to plugin system.\n* [x] Use the new styling in order to further simplify own custom layout.\n  Custom layout should use vanilla HTML elements as much as possible.\n   * [x] Use sections instead of divs with special classes for chapters.\n   * [x] Simplify trees.\n* [x] Share XSL code as much as possible.\n  Make default layout XSL code the base of this and not the other way around.\n* [ ] Blog about the error how I created an own layout/style and why I did that.\n* [x] Automatic style reloading does not seem to work anymore.\n* [x] Use one XSL style sheets instead of 2. \n   * [x] The style sheet will need additional parameters to support both outputs.\n      * [x]  Create styling option `generation.style`.\n      * [x]  Set styling option in Java code.\n   * [x] Simplifying the rendering results will help with that as well.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1645400346,"metadata":{"github-id":"UCE_lAHOFCNQW84-KreDziop06o"},"target":"5db87a7e990d47becadc7c6890fd8a171d982f01abb503487d028382373857ef","message":"I always knew, that design of the website server output was not perfect,\nbut when I looked at [Tufte CSS](https://edwardtufte.github.io/tufte-css/)\nand others styles like that of [mdbook](https://rust-lang.github.io/mdBook/),\nI emotionally really understood how bad the situation is.\n\nThere are already task in order to fix some basics, before tackling the general problem,\nbut there was no real ticket for the whole problem.\nThe current examples are #26 and #37.\nAs hard it is to admit my previous XML format was better, because it was easy to adjust.\nThe only real Problem, was the fact, that it relied on XSL,\nwhich is not a portable dependency.\nOther input formats were also not really supported,\nwhich is important, when different type of documents should be mixed (especially external ones)\nor you want to make it easy for other to contribute by support a common format.\n\nIn order to find the right design, there are multiple things needed to be done,\nin order to make it easy to switch between different outputs:\n* [X] Define relationship between, input, output and template/layout format.\nThis relationship needs to be supported by the website server.\nIt's important the same content in different input formats results in the same output\nas good as justifiably possible.\n-\u003e Every fully supported format should be transformed to custom XML format first,\nand then rendered to the target format.\n* [ ] Support alternative HTML output without css class\nand Tufte CSS as styling.\nMake XSL stylesheet minimal and\ndocument stylesheet format supported by the web server.\n   * [ ] This will be done for personal website, which has some private code first.\n   * [ ] Implement alternative layout.\n      * [ ] For some things in the alternative styling, the old styling is still active.\n      * [ ] Render article title.\n      * [ ] Remove all css classes etc.\n   * [x] Create unified code based in private.\n   * [ ] Make rendering of alternative style public.\n   * [ ] Deploy alternative style to `splitcells.net` and document updated infrastructure.\n   * [ ] Create introductory documentation to website.\nAlso, link to network blog article in this documentation regarding to plugin system.\n* [x] Use the new styling in order to further simplify own custom layout.\n  Custom layout should use vanilla HTML elements as much as possible.\n   * [x] Use sections instead of divs with special classes for chapters.\n   * [x] Simplify trees.\n* [x] Share XSL code as much as possible.\n  Make default layout XSL code the base of this and not the other way around.\n* [ ] Blog about the error how I created an own layout/style and why I did that.\n* [x] Automatic style reloading does not seem to work anymore.\n* [x] Use one XSL style sheets instead of 2. \n   * [x] The style sheet will need additional parameters to support both outputs.\n      * [x]  Create styling option `generation.style`.\n      * [x]  Set styling option in Java code.\n   * [x] Simplifying the rendering results will help with that as well.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1645837298,"metadata":{"github-id":"UCE_lAHOFCNQW84-KreDziptz3c"},"target":"5db87a7e990d47becadc7c6890fd8a171d982f01abb503487d028382373857ef","message":"I always knew, that design of the website server output was not perfect,\nbut when I looked at [Tufte CSS](https://edwardtufte.github.io/tufte-css/)\nand others styles like that of [mdbook](https://rust-lang.github.io/mdBook/),\nI emotionally really understood how bad the situation is.\n\nThere are already task in order to fix some basics, before tackling the general problem,\nbut there was no real ticket for the whole problem.\nThe current examples are #26 and #37.\nAs hard it is to admit my previous XML format was better, because it was easy to adjust.\nThe only real Problem, was the fact, that it relied on XSL,\nwhich is not a portable dependency.\nOther input formats were also not really supported,\nwhich is important, when different type of documents should be mixed (especially external ones)\nor you want to make it easy for other to contribute by support a common format.\n\nIn order to find the right design, there are multiple things needed to be done,\nin order to make it easy to switch between different outputs:\n* [X] Define relationship between, input, output and template/layout format.\nThis relationship needs to be supported by the website server.\nIt's important the same content in different input formats results in the same output\nas good as justifiably possible.\n-\u003e Every fully supported format should be transformed to custom XML format first,\nand then rendered to the target format.\n* [ ] Support alternative HTML output without css class\nand Tufte CSS as styling.\nMake XSL stylesheet minimal and\ndocument stylesheet format supported by the web server.\n   * [ ] This will be done for personal website, which has some private code first.\n   * [ ] Implement alternative layout.\n      * [ ] For some things in the alternative styling, the old styling is still active.\n      * [ ] Render article title.\n      * [x] Remove all css classes etc. -\u003e Some classes where removed. That seems to be enough.\n   * [x] Create unified code based in private.\n   * [ ] Make rendering of alternative style public.\n   * [ ] Deploy alternative style to `splitcells.net` and document updated infrastructure.\n   * [ ] Create introductory documentation to website.\nAlso, link to network blog article in this documentation regarding to plugin system.\n* [x] Use the new styling in order to further simplify own custom layout.\n  Custom layout should use vanilla HTML elements as much as possible.\n   * [x] Use sections instead of divs with special classes for chapters.\n   * [x] Simplify trees.\n* [x] Share XSL code as much as possible.\n  Make default layout XSL code the base of this and not the other way around.\n* [ ] Blog about the error how I created an own layout/style and why I did that.\n* [x] Automatic style reloading does not seem to work anymore.\n* [x] Use one XSL style sheets instead of 2. \n   * [x] The style sheet will need additional parameters to support both outputs.\n      * [x]  Create styling option `generation.style`.\n      * [x]  Set styling option in Java code.\n   * [x] Simplifying the rendering results will help with that as well.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1645837325,"metadata":{"github-id":"UCE_lAHOFCNQW84-KreDzipt0Oc"},"target":"5db87a7e990d47becadc7c6890fd8a171d982f01abb503487d028382373857ef","message":"I always knew, that design of the website server output was not perfect,\nbut when I looked at [Tufte CSS](https://edwardtufte.github.io/tufte-css/)\nand others styles like that of [mdbook](https://rust-lang.github.io/mdBook/),\nI emotionally really understood how bad the situation is.\n\nThere are already task in order to fix some basics, before tackling the general problem,\nbut there was no real ticket for the whole problem.\nThe current examples are #26 and #37.\nAs hard it is to admit my previous XML format was better, because it was easy to adjust.\nThe only real Problem, was the fact, that it relied on XSL,\nwhich is not a portable dependency.\nOther input formats were also not really supported,\nwhich is important, when different type of documents should be mixed (especially external ones)\nor you want to make it easy for other to contribute by support a common format.\n\nIn order to find the right design, there are multiple things needed to be done,\nin order to make it easy to switch between different outputs:\n* [X] Define relationship between, input, output and template/layout format.\nThis relationship needs to be supported by the website server.\nIt's important the same content in different input formats results in the same output\nas good as justifiably possible.\n-\u003e Every fully supported format should be transformed to custom XML format first,\nand then rendered to the target format.\n* [ ] Support alternative HTML output without css class\nand Tufte CSS as styling.\nMake XSL stylesheet minimal and\ndocument stylesheet format supported by the web server.\n   * [ ] This will be done for personal website, which has some private code first.\n   * [ ] Implement alternative layout.\n      * [ ] For some things in the alternative styling, the old styling is still active.\n      * [x] Render article title.\n      * [x] Remove all css classes etc. -\u003e Some classes where removed. That seems to be enough.\n   * [x] Create unified code based in private.\n   * [ ] Make rendering of alternative style public.\n   * [ ] Deploy alternative style to `splitcells.net` and document updated infrastructure.\n   * [ ] Create introductory documentation to website.\nAlso, link to network blog article in this documentation regarding to plugin system.\n* [x] Use the new styling in order to further simplify own custom layout.\n  Custom layout should use vanilla HTML elements as much as possible.\n   * [x] Use sections instead of divs with special classes for chapters.\n   * [x] Simplify trees.\n* [x] Share XSL code as much as possible.\n  Make default layout XSL code the base of this and not the other way around.\n* [ ] Blog about the error how I created an own layout/style and why I did that.\n* [x] Automatic style reloading does not seem to work anymore.\n* [x] Use one XSL style sheets instead of 2. \n   * [x] The style sheet will need additional parameters to support both outputs.\n      * [x]  Create styling option `generation.style`.\n      * [x]  Set styling option in Java code.\n   * [x] Simplifying the rendering results will help with that as well.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1646611882,"metadata":{"github-id":"UCE_lAHOFCNQW84-KreDzirEPcY"},"target":"5db87a7e990d47becadc7c6890fd8a171d982f01abb503487d028382373857ef","message":"I always knew, that design of the website server output was not perfect,\nbut when I looked at [Tufte CSS](https://edwardtufte.github.io/tufte-css/)\nand others styles like that of [mdbook](https://rust-lang.github.io/mdBook/),\nI emotionally really understood how bad the situation is.\n\nThere are already task in order to fix some basics, before tackling the general problem,\nbut there was no real ticket for the whole problem.\nThe current examples are #26 and #37.\nAs hard it is to admit my previous XML format was better, because it was easy to adjust.\nThe only real Problem, was the fact, that it relied on XSL,\nwhich is not a portable dependency.\nOther input formats were also not really supported,\nwhich is important, when different type of documents should be mixed (especially external ones)\nor you want to make it easy for other to contribute by support a common format.\n\nIn order to find the right design, there are multiple things needed to be done,\nin order to make it easy to switch between different outputs:\n* [X] Define relationship between, input, output and template/layout format.\nThis relationship needs to be supported by the website server.\nIt's important the same content in different input formats results in the same output\nas good as justifiably possible.\n-\u003e Every fully supported format should be transformed to custom XML format first,\nand then rendered to the target format.\n* [ ] Support alternative HTML output without css class\nand Tufte CSS as styling.\nMake XSL stylesheet minimal and\ndocument stylesheet format supported by the web server.\n   * [ ] This will be done for personal website, which has some private code first.\n   * [ ] Implement alternative layout.\n      * [ ] For some things in the alternative styling, the old styling is still active.\n      * [x] Render article title.\n      * [x] Remove all css classes etc. -\u003e Some classes where removed. That seems to be enough.\n   * [x] Create unified code based in private.\n   * [ ] Make rendering of alternative style public.\n   * [ ] Deploy alternative style to `splitcells.net` and document updated infrastructure.\n   * [ ] Create introductory documentation to website.\nAlso, link to network blog article in this documentation regarding to plugin system.\n* [x] Use the new styling in order to further simplify own custom layout.\n  Custom layout should use vanilla HTML elements as much as possible.\n   * [x] Use sections instead of divs with special classes for chapters.\n   * [x] Simplify trees.\n* [x] Share XSL code as much as possible.\n  Make default layout XSL code the base of this and not the other way around.\n* [ ] Blog about the error how I created an own layout/style and why I did that.\n* [x] Automatic style reloading does not seem to work anymore.\n* [x] Use one XSL style sheets instead of 2. \n   * [x] The style sheet will need additional parameters to support both outputs.\n      * [x]  Create styling option `generation.style`.\n      * [x]  Set styling option in Java code.\n   * [x] Simplifying the rendering results will help with that as well.\n* [ ] Render all versions of website as one website. Implement a web server interface and a bundling implementation.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1649002555,"metadata":{"github-id":"UCE_lAHOFCNQW84-KreDziwFcUc"},"target":"5db87a7e990d47becadc7c6890fd8a171d982f01abb503487d028382373857ef","message":"I always knew, that design of the website server output was not perfect,\nbut when I looked at [Tufte CSS](https://edwardtufte.github.io/tufte-css/)\nand others styles like that of [mdbook](https://rust-lang.github.io/mdBook/),\nI emotionally really understood how bad the situation is.\n\nThere are already task in order to fix some basics, before tackling the general problem,\nbut there was no real ticket for the whole problem.\nThe current examples are #26 and #37.\nAs hard it is to admit my previous XML format was better, because it was easy to adjust.\nThe only real Problem, was the fact, that it relied on XSL,\nwhich is not a portable dependency.\nOther input formats were also not really supported,\nwhich is important, when different type of documents should be mixed (especially external ones)\nor you want to make it easy for other to contribute by support a common format.\n\nIn order to find the right design, there are multiple things needed to be done,\nin order to make it easy to switch between different outputs:\n* [X] Define relationship between, input, output and template/layout format.\nThis relationship needs to be supported by the website server.\nIt's important the same content in different input formats results in the same output\nas good as justifiably possible.\n-\u003e Every fully supported format should be transformed to custom XML format first,\nand then rendered to the target format.\n* [ ] Support alternative HTML output without css class\nand Tufte CSS as styling.\nMake XSL stylesheet minimal and\ndocument stylesheet format supported by the web server.\n   * [ ] This will be done for personal website, which has some private code first.\n   * [ ] Implement alternative layout.\n      * [ ] For some things in the alternative styling, the old styling is still active.\n      * [x] Render article title.\n      * [x] Remove all css classes etc. -\u003e Some classes where removed. That seems to be enough.\n      * [ ] Document both styles.\n   * [x] Create unified code based in private.\n   * [ ] Make rendering of alternative style public.\n   * [ ] Deploy alternative style to `splitcells.net` and document updated infrastructure.\n   * [ ] Create introductory documentation to website.\nAlso, link to network blog article in this documentation regarding to plugin system.\n* [x] Use the new styling in order to further simplify own custom layout.\n  Custom layout should use vanilla HTML elements as much as possible.\n   * [x] Use sections instead of divs with special classes for chapters.\n   * [x] Simplify trees.\n* [x] Share XSL code as much as possible.\n  Make default layout XSL code the base of this and not the other way around.\n* [ ] Blog about the error how I created an own layout/style and why I did that.\n* [x] Automatic style reloading does not seem to work anymore.\n* [x] Use one XSL style sheets instead of 2. \n   * [x] The style sheet will need additional parameters to support both outputs.\n      * [x]  Create styling option `generation.style`.\n      * [x]  Set styling option in Java code.\n   * [x] Simplifying the rendering results will help with that as well.\n* [ ] Render all versions of website as one website. Implement a web server interface and a bundling implementation.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1649544522,"metadata":{"github-id":"UCE_lAHOFCNQW84-KreDzixVhME"},"target":"5db87a7e990d47becadc7c6890fd8a171d982f01abb503487d028382373857ef","message":"I always knew, that design of the website server output was not perfect,\nbut when I looked at [Tufte CSS](https://edwardtufte.github.io/tufte-css/)\nand others styles like that of [mdbook](https://rust-lang.github.io/mdBook/),\nI emotionally really understood how bad the situation is.\n\nThere are already task in order to fix some basics, before tackling the general problem,\nbut there was no real ticket for the whole problem.\nThe current examples are #26 and #37.\nAs hard it is to admit my previous XML format was better, because it was easy to adjust.\nThe only real Problem, was the fact, that it relied on XSL,\nwhich is not a portable dependency.\nOther input formats were also not really supported,\nwhich is important, when different type of documents should be mixed (especially external ones)\nor you want to make it easy for other to contribute by support a common format.\n\nIn order to find the right design, there are multiple things needed to be done,\nin order to make it easy to switch between different outputs:\n* [X] Define relationship between, input, output and template/layout format.\nThis relationship needs to be supported by the website server.\nIt's important the same content in different input formats results in the same output\nas good as justifiably possible.\n-\u003e Every fully supported format should be transformed to custom XML format first,\nand then rendered to the target format.\n* [ ] Support alternative HTML output without css class\nand Tufte CSS as styling.\nMake XSL stylesheet minimal and\ndocument stylesheet format supported by the web server.\n   * [ ] This will be done for personal website, which has some private code first.\n   * [ ] Implement alternative layout.\n      * [ ] For some things in the alternative styling, the old styling is still active.\n      * [x] Render article title.\n      * [x] Remove all css classes etc. -\u003e Some classes where removed. That seems to be enough.\n      * [x] Document both styles.\n   * [x] Create unified code based in private.\n   * [ ] Make rendering of alternative style public.\n   * [ ] Deploy alternative style to `splitcells.net` and document updated infrastructure.\n   * [ ] Create introductory documentation to website.\nAlso, link to network blog article in this documentation regarding to plugin system.\n* [x] Use the new styling in order to further simplify own custom layout.\n  Custom layout should use vanilla HTML elements as much as possible.\n   * [x] Use sections instead of divs with special classes for chapters.\n   * [x] Simplify trees.\n* [x] Share XSL code as much as possible.\n  Make default layout XSL code the base of this and not the other way around.\n* [ ] Blog about the error how I created an own layout/style and why I did that.\n* [x] Automatic style reloading does not seem to work anymore.\n* [x] Use one XSL style sheets instead of 2. \n   * [x] The style sheet will need additional parameters to support both outputs.\n      * [x]  Create styling option `generation.style`.\n      * [x]  Set styling option in Java code.\n   * [x] Simplifying the rendering results will help with that as well.\n* [ ] Render all versions of website as one website. Implement a web server interface and a bundling implementation.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1649544535,"metadata":{"github-id":"UCE_lAHOFCNQW84-KreDzixVhOE"},"target":"5db87a7e990d47becadc7c6890fd8a171d982f01abb503487d028382373857ef","message":"I always knew, that design of the website server output was not perfect,\nbut when I looked at [Tufte CSS](https://edwardtufte.github.io/tufte-css/)\nand others styles like that of [mdbook](https://rust-lang.github.io/mdBook/),\nI emotionally really understood how bad the situation is.\n\nThere are already task in order to fix some basics, before tackling the general problem,\nbut there was no real ticket for the whole problem.\nThe current examples are #26 and #37.\nAs hard it is to admit my previous XML format was better, because it was easy to adjust.\nThe only real Problem, was the fact, that it relied on XSL,\nwhich is not a portable dependency.\nOther input formats were also not really supported,\nwhich is important, when different type of documents should be mixed (especially external ones)\nor you want to make it easy for other to contribute by support a common format.\n\nIn order to find the right design, there are multiple things needed to be done,\nin order to make it easy to switch between different outputs:\n* [X] Define relationship between, input, output and template/layout format.\nThis relationship needs to be supported by the website server.\nIt's important the same content in different input formats results in the same output\nas good as justifiably possible.\n-\u003e Every fully supported format should be transformed to custom XML format first,\nand then rendered to the target format.\n* [ ] Support alternative HTML output without css class\nand Tufte CSS as styling.\nMake XSL stylesheet minimal and\ndocument stylesheet format supported by the web server.\n   * [ ] This will be done for personal website, which has some private code first.\n   * [ ] Implement alternative layout.\n      * [ ] For some things in the alternative styling, the old styling is still active. -\u003e This will be addressed later.\n      * [x] Render article title.\n      * [x] Remove all css classes etc. -\u003e Some classes where removed. That seems to be enough.\n      * [x] Document both styles.\n   * [x] Create unified code based in private.\n   * [ ] Make rendering of alternative style public.\n   * [ ] Deploy alternative style to `splitcells.net` and document updated infrastructure.\n   * [ ] Create introductory documentation to website.\nAlso, link to network blog article in this documentation regarding to plugin system.\n* [x] Use the new styling in order to further simplify own custom layout.\n  Custom layout should use vanilla HTML elements as much as possible.\n   * [x] Use sections instead of divs with special classes for chapters.\n   * [x] Simplify trees.\n* [x] Share XSL code as much as possible.\n  Make default layout XSL code the base of this and not the other way around.\n* [ ] Blog about the error how I created an own layout/style and why I did that.\n* [x] Automatic style reloading does not seem to work anymore.\n* [x] Use one XSL style sheets instead of 2. \n   * [x] The style sheet will need additional parameters to support both outputs.\n      * [x]  Create styling option `generation.style`.\n      * [x]  Set styling option in Java code.\n   * [x] Simplifying the rendering results will help with that as well.\n* [ ] Render all versions of website as one website. Implement a web server interface and a bundling implementation.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1649544539,"metadata":{"github-id":"UCE_lAHOFCNQW84-KreDzixVhPA"},"target":"5db87a7e990d47becadc7c6890fd8a171d982f01abb503487d028382373857ef","message":"I always knew, that design of the website server output was not perfect,\nbut when I looked at [Tufte CSS](https://edwardtufte.github.io/tufte-css/)\nand others styles like that of [mdbook](https://rust-lang.github.io/mdBook/),\nI emotionally really understood how bad the situation is.\n\nThere are already task in order to fix some basics, before tackling the general problem,\nbut there was no real ticket for the whole problem.\nThe current examples are #26 and #37.\nAs hard it is to admit my previous XML format was better, because it was easy to adjust.\nThe only real Problem, was the fact, that it relied on XSL,\nwhich is not a portable dependency.\nOther input formats were also not really supported,\nwhich is important, when different type of documents should be mixed (especially external ones)\nor you want to make it easy for other to contribute by support a common format.\n\nIn order to find the right design, there are multiple things needed to be done,\nin order to make it easy to switch between different outputs:\n* [X] Define relationship between, input, output and template/layout format.\nThis relationship needs to be supported by the website server.\nIt's important the same content in different input formats results in the same output\nas good as justifiably possible.\n-\u003e Every fully supported format should be transformed to custom XML format first,\nand then rendered to the target format.\n* [ ] Support alternative HTML output without css class\nand Tufte CSS as styling.\nMake XSL stylesheet minimal and\ndocument stylesheet format supported by the web server.\n   * [ ] This will be done for personal website, which has some private code first.\n   * [ ] Implement alternative layout.\n      * [x] For some things in the alternative styling, the old styling is still active. -\u003e This will be addressed later.\n      * [x] Render article title.\n      * [x] Remove all css classes etc. -\u003e Some classes where removed. That seems to be enough.\n      * [x] Document both styles.\n   * [x] Create unified code based in private.\n   * [ ] Make rendering of alternative style public.\n   * [ ] Deploy alternative style to `splitcells.net` and document updated infrastructure.\n   * [ ] Create introductory documentation to website.\nAlso, link to network blog article in this documentation regarding to plugin system.\n* [x] Use the new styling in order to further simplify own custom layout.\n  Custom layout should use vanilla HTML elements as much as possible.\n   * [x] Use sections instead of divs with special classes for chapters.\n   * [x] Simplify trees.\n* [x] Share XSL code as much as possible.\n  Make default layout XSL code the base of this and not the other way around.\n* [ ] Blog about the error how I created an own layout/style and why I did that.\n* [x] Automatic style reloading does not seem to work anymore.\n* [x] Use one XSL style sheets instead of 2. \n   * [x] The style sheet will need additional parameters to support both outputs.\n      * [x]  Create styling option `generation.style`.\n      * [x]  Set styling option in Java code.\n   * [x] Simplifying the rendering results will help with that as well.\n* [ ] Render all versions of website as one website. Implement a web server interface and a bundling implementation.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1649544540,"metadata":{"github-id":"UCE_lAHOFCNQW84-KreDzixVhPU"},"target":"5db87a7e990d47becadc7c6890fd8a171d982f01abb503487d028382373857ef","message":"I always knew, that design of the website server output was not perfect,\nbut when I looked at [Tufte CSS](https://edwardtufte.github.io/tufte-css/)\nand others styles like that of [mdbook](https://rust-lang.github.io/mdBook/),\nI emotionally really understood how bad the situation is.\n\nThere are already task in order to fix some basics, before tackling the general problem,\nbut there was no real ticket for the whole problem.\nThe current examples are #26 and #37.\nAs hard it is to admit my previous XML format was better, because it was easy to adjust.\nThe only real Problem, was the fact, that it relied on XSL,\nwhich is not a portable dependency.\nOther input formats were also not really supported,\nwhich is important, when different type of documents should be mixed (especially external ones)\nor you want to make it easy for other to contribute by support a common format.\n\nIn order to find the right design, there are multiple things needed to be done,\nin order to make it easy to switch between different outputs:\n* [X] Define relationship between, input, output and template/layout format.\nThis relationship needs to be supported by the website server.\nIt's important the same content in different input formats results in the same output\nas good as justifiably possible.\n-\u003e Every fully supported format should be transformed to custom XML format first,\nand then rendered to the target format.\n* [ ] Support alternative HTML output without css class\nand Tufte CSS as styling.\nMake XSL stylesheet minimal and\ndocument stylesheet format supported by the web server.\n   * [ ] This will be done for personal website, which has some private code first.\n   * [x] Implement alternative layout.\n      * [x] For some things in the alternative styling, the old styling is still active. -\u003e This will be addressed later.\n      * [x] Render article title.\n      * [x] Remove all css classes etc. -\u003e Some classes where removed. That seems to be enough.\n      * [x] Document both styles.\n   * [x] Create unified code based in private.\n   * [ ] Make rendering of alternative style public.\n   * [ ] Deploy alternative style to `splitcells.net` and document updated infrastructure.\n   * [ ] Create introductory documentation to website.\nAlso, link to network blog article in this documentation regarding to plugin system.\n* [x] Use the new styling in order to further simplify own custom layout.\n  Custom layout should use vanilla HTML elements as much as possible.\n   * [x] Use sections instead of divs with special classes for chapters.\n   * [x] Simplify trees.\n* [x] Share XSL code as much as possible.\n  Make default layout XSL code the base of this and not the other way around.\n* [ ] Blog about the error how I created an own layout/style and why I did that.\n* [x] Automatic style reloading does not seem to work anymore.\n* [x] Use one XSL style sheets instead of 2. \n   * [x] The style sheet will need additional parameters to support both outputs.\n      * [x]  Create styling option `generation.style`.\n      * [x]  Set styling option in Java code.\n   * [x] Simplifying the rendering results will help with that as well.\n* [ ] Render all versions of website as one website. Implement a web server interface and a bundling implementation.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1649548809,"metadata":{"github-id":"UCE_lAHOFCNQW84-KreDzixVrnQ"},"target":"5db87a7e990d47becadc7c6890fd8a171d982f01abb503487d028382373857ef","message":"I always knew, that design of the website server output was not perfect,\nbut when I looked at [Tufte CSS](https://edwardtufte.github.io/tufte-css/)\nand others styles like that of [mdbook](https://rust-lang.github.io/mdBook/),\nI emotionally really understood how bad the situation is.\n\nThere are already task in order to fix some basics, before tackling the general problem,\nbut there was no real ticket for the whole problem.\nThe current examples are #26 and #37.\nAs hard it is to admit my previous XML format was better, because it was easy to adjust.\nThe only real Problem, was the fact, that it relied on XSL,\nwhich is not a portable dependency.\nOther input formats were also not really supported,\nwhich is important, when different type of documents should be mixed (especially external ones)\nor you want to make it easy for other to contribute by support a common format.\n\nIn order to find the right design, there are multiple things needed to be done,\nin order to make it easy to switch between different outputs:\n* [X] Define relationship between, input, output and template/layout format.\nThis relationship needs to be supported by the website server.\nIt's important the same content in different input formats results in the same output\nas good as justifiably possible.\n-\u003e Every fully supported format should be transformed to custom XML format first,\nand then rendered to the target format.\n* [ ] Support alternative HTML output without css class\nand Tufte CSS as styling.\nMake XSL stylesheet minimal and\ndocument stylesheet format supported by the web server.\n   * [ ] This will be done for personal website, which has some private code first.\n   * [x] Implement alternative layout.\n      * [x] For some things in the alternative styling, the old styling is still active. -\u003e This will be addressed later.\n      * [x] Render article title.\n      * [x] Remove all css classes etc. -\u003e Some classes where removed. That seems to be enough.\n      * [x] Document both styles.\n   * [x] Create unified code based in private.\n   * [x] Make rendering of alternative style public.\n   * [ ] Deploy alternative style to `splitcells.net` and document updated infrastructure.\n   * [ ] Create introductory documentation to website.\nAlso, link to network blog article in this documentation regarding to plugin system.\n* [x] Use the new styling in order to further simplify own custom layout.\n  Custom layout should use vanilla HTML elements as much as possible.\n   * [x] Use sections instead of divs with special classes for chapters.\n   * [x] Simplify trees.\n* [x] Share XSL code as much as possible.\n  Make default layout XSL code the base of this and not the other way around.\n* [ ] Blog about the error how I created an own layout/style and why I did that.\n* [x] Automatic style reloading does not seem to work anymore.\n* [x] Use one XSL style sheets instead of 2. \n   * [x] The style sheet will need additional parameters to support both outputs.\n      * [x]  Create styling option `generation.style`.\n      * [x]  Set styling option in Java code.\n   * [x] Simplifying the rendering results will help with that as well.\n* [ ] Render all versions of website as one website. Implement a web server interface and a bundling implementation.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1649548811,"metadata":{"github-id":"UCE_lAHOFCNQW84-KreDzixVrng"},"target":"5db87a7e990d47becadc7c6890fd8a171d982f01abb503487d028382373857ef","message":"I always knew, that design of the website server output was not perfect,\nbut when I looked at [Tufte CSS](https://edwardtufte.github.io/tufte-css/)\nand others styles like that of [mdbook](https://rust-lang.github.io/mdBook/),\nI emotionally really understood how bad the situation is.\n\nThere are already task in order to fix some basics, before tackling the general problem,\nbut there was no real ticket for the whole problem.\nThe current examples are #26 and #37.\nAs hard it is to admit my previous XML format was better, because it was easy to adjust.\nThe only real Problem, was the fact, that it relied on XSL,\nwhich is not a portable dependency.\nOther input formats were also not really supported,\nwhich is important, when different type of documents should be mixed (especially external ones)\nor you want to make it easy for other to contribute by support a common format.\n\nIn order to find the right design, there are multiple things needed to be done,\nin order to make it easy to switch between different outputs:\n* [X] Define relationship between, input, output and template/layout format.\nThis relationship needs to be supported by the website server.\nIt's important the same content in different input formats results in the same output\nas good as justifiably possible.\n-\u003e Every fully supported format should be transformed to custom XML format first,\nand then rendered to the target format.\n* [ ] Support alternative HTML output without css class\nand Tufte CSS as styling.\nMake XSL stylesheet minimal and\ndocument stylesheet format supported by the web server.\n   * [ ] This will be done for personal website, which has some private code first.\n   * [x] Implement alternative layout.\n      * [x] For some things in the alternative styling, the old styling is still active. -\u003e This will be addressed later.\n      * [x] Render article title.\n      * [x] Remove all css classes etc. -\u003e Some classes where removed. That seems to be enough.\n      * [x] Document both styles.\n   * [x] Create unified code based in private.\n   * [x] Make rendering of alternative style public.\n   * [x] Deploy alternative style to `splitcells.net` and document updated infrastructure.\n   * [ ] Create introductory documentation to website.\nAlso, link to network blog article in this documentation regarding to plugin system.\n* [x] Use the new styling in order to further simplify own custom layout.\n  Custom layout should use vanilla HTML elements as much as possible.\n   * [x] Use sections instead of divs with special classes for chapters.\n   * [x] Simplify trees.\n* [x] Share XSL code as much as possible.\n  Make default layout XSL code the base of this and not the other way around.\n* [ ] Blog about the error how I created an own layout/style and why I did that.\n* [x] Automatic style reloading does not seem to work anymore.\n* [x] Use one XSL style sheets instead of 2. \n   * [x] The style sheet will need additional parameters to support both outputs.\n      * [x]  Create styling option `generation.style`.\n      * [x]  Set styling option in Java code.\n   * [x] Simplifying the rendering results will help with that as well.\n* [ ] Render all versions of website as one website. Implement a web server interface and a bundling implementation.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1649548833,"metadata":{"github-id":"UCE_lAHOFCNQW84-KreDzixVrrU"},"target":"5db87a7e990d47becadc7c6890fd8a171d982f01abb503487d028382373857ef","message":"I always knew, that design of the website server output was not perfect,\nbut when I looked at [Tufte CSS](https://edwardtufte.github.io/tufte-css/)\nand others styles like that of [mdbook](https://rust-lang.github.io/mdBook/),\nI emotionally really understood how bad the situation is.\n\nThere are already task in order to fix some basics, before tackling the general problem,\nbut there was no real ticket for the whole problem.\nThe current examples are #26 and #37.\nAs hard it is to admit my previous XML format was better, because it was easy to adjust.\nThe only real Problem, was the fact, that it relied on XSL,\nwhich is not a portable dependency.\nOther input formats were also not really supported,\nwhich is important, when different type of documents should be mixed (especially external ones)\nor you want to make it easy for other to contribute by support a common format.\n\nIn order to find the right design, there are multiple things needed to be done,\nin order to make it easy to switch between different outputs:\n* [X] Define relationship between, input, output and template/layout format.\nThis relationship needs to be supported by the website server.\nIt's important the same content in different input formats results in the same output\nas good as justifiably possible.\n-\u003e Every fully supported format should be transformed to custom XML format first,\nand then rendered to the target format.\n* [ ] Support alternative HTML output without css class\nand Tufte CSS as styling.\nMake XSL stylesheet minimal and\ndocument stylesheet format supported by the web server.\n   * [ ] This will be done for personal website, which has some private code first.\n   * [x] Implement alternative layout.\n      * [x] For some things in the alternative styling, the old styling is still active. -\u003e This will be addressed later.\n      * [x] Render article title.\n      * [x] Remove all css classes etc. -\u003e Some classes where removed. That seems to be enough.\n      * [x] Document both styles.\n   * [x] Create unified code based in private.\n   * [x] Make rendering of alternative style public.\n   * [x] Deploy alternative style to `splitcells.net` and document updated infrastructure.\n* [x] Use the new styling in order to further simplify own custom layout.\n  Custom layout should use vanilla HTML elements as much as possible.\n   * [x] Use sections instead of divs with special classes for chapters.\n   * [x] Simplify trees.\n* [x] Share XSL code as much as possible.\n  Make default layout XSL code the base of this and not the other way around.\n* [ ] Blog about the error how I created an own layout/style and why I did that.\n* [x] Automatic style reloading does not seem to work anymore.\n* [x] Use one XSL style sheets instead of 2. \n   * [x] The style sheet will need additional parameters to support both outputs.\n      * [x]  Create styling option `generation.style`.\n      * [x]  Set styling option in Java code.\n   * [x] Simplifying the rendering results will help with that as well.\n* [ ] Render all versions of website as one website. Implement a web server interface and a bundling implementation.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1649548836,"metadata":{"github-id":"UCE_lAHOFCNQW84-KreDzixVrsc"},"target":"5db87a7e990d47becadc7c6890fd8a171d982f01abb503487d028382373857ef","message":"I always knew, that design of the website server output was not perfect,\nbut when I looked at [Tufte CSS](https://edwardtufte.github.io/tufte-css/)\nand others styles like that of [mdbook](https://rust-lang.github.io/mdBook/),\nI emotionally really understood how bad the situation is.\n\nThere are already task in order to fix some basics, before tackling the general problem,\nbut there was no real ticket for the whole problem.\nThe current examples are #26 and #37.\nAs hard it is to admit my previous XML format was better, because it was easy to adjust.\nThe only real Problem, was the fact, that it relied on XSL,\nwhich is not a portable dependency.\nOther input formats were also not really supported,\nwhich is important, when different type of documents should be mixed (especially external ones)\nor you want to make it easy for other to contribute by support a common format.\n\nIn order to find the right design, there are multiple things needed to be done,\nin order to make it easy to switch between different outputs:\n* [X] Define relationship between, input, output and template/layout format.\nThis relationship needs to be supported by the website server.\nIt's important the same content in different input formats results in the same output\nas good as justifiably possible.\n-\u003e Every fully supported format should be transformed to custom XML format first,\nand then rendered to the target format.\n* [ ] Support alternative HTML output without css class\nand Tufte CSS as styling.\nMake XSL stylesheet minimal and\ndocument stylesheet format supported by the web server.\n   * [x] This will be done for personal website, which has some private code first.\n   * [x] Implement alternative layout.\n      * [x] For some things in the alternative styling, the old styling is still active. -\u003e This will be addressed later.\n      * [x] Render article title.\n      * [x] Remove all css classes etc. -\u003e Some classes where removed. That seems to be enough.\n      * [x] Document both styles.\n   * [x] Create unified code based in private.\n   * [x] Make rendering of alternative style public.\n   * [x] Deploy alternative style to `splitcells.net` and document updated infrastructure.\n* [x] Use the new styling in order to further simplify own custom layout.\n  Custom layout should use vanilla HTML elements as much as possible.\n   * [x] Use sections instead of divs with special classes for chapters.\n   * [x] Simplify trees.\n* [x] Share XSL code as much as possible.\n  Make default layout XSL code the base of this and not the other way around.\n* [ ] Blog about the error how I created an own layout/style and why I did that.\n* [x] Automatic style reloading does not seem to work anymore.\n* [x] Use one XSL style sheets instead of 2. \n   * [x] The style sheet will need additional parameters to support both outputs.\n      * [x]  Create styling option `generation.style`.\n      * [x]  Set styling option in Java code.\n   * [x] Simplifying the rendering results will help with that as well.\n* [ ] Render all versions of website as one website. Implement a web server interface and a bundling implementation.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1649548838,"metadata":{"github-id":"UCE_lAHOFCNQW84-KreDzixVrs8"},"target":"5db87a7e990d47becadc7c6890fd8a171d982f01abb503487d028382373857ef","message":"I always knew, that design of the website server output was not perfect,\nbut when I looked at [Tufte CSS](https://edwardtufte.github.io/tufte-css/)\nand others styles like that of [mdbook](https://rust-lang.github.io/mdBook/),\nI emotionally really understood how bad the situation is.\n\nThere are already task in order to fix some basics, before tackling the general problem,\nbut there was no real ticket for the whole problem.\nThe current examples are #26 and #37.\nAs hard it is to admit my previous XML format was better, because it was easy to adjust.\nThe only real Problem, was the fact, that it relied on XSL,\nwhich is not a portable dependency.\nOther input formats were also not really supported,\nwhich is important, when different type of documents should be mixed (especially external ones)\nor you want to make it easy for other to contribute by support a common format.\n\nIn order to find the right design, there are multiple things needed to be done,\nin order to make it easy to switch between different outputs:\n* [X] Define relationship between, input, output and template/layout format.\nThis relationship needs to be supported by the website server.\nIt's important the same content in different input formats results in the same output\nas good as justifiably possible.\n-\u003e Every fully supported format should be transformed to custom XML format first,\nand then rendered to the target format.\n* [x] Support alternative HTML output without css class\nand Tufte CSS as styling.\nMake XSL stylesheet minimal and\ndocument stylesheet format supported by the web server.\n   * [x] This will be done for personal website, which has some private code first.\n   * [x] Implement alternative layout.\n      * [x] For some things in the alternative styling, the old styling is still active. -\u003e This will be addressed later.\n      * [x] Render article title.\n      * [x] Remove all css classes etc. -\u003e Some classes where removed. That seems to be enough.\n      * [x] Document both styles.\n   * [x] Create unified code based in private.\n   * [x] Make rendering of alternative style public.\n   * [x] Deploy alternative style to `splitcells.net` and document updated infrastructure.\n* [x] Use the new styling in order to further simplify own custom layout.\n  Custom layout should use vanilla HTML elements as much as possible.\n   * [x] Use sections instead of divs with special classes for chapters.\n   * [x] Simplify trees.\n* [x] Share XSL code as much as possible.\n  Make default layout XSL code the base of this and not the other way around.\n* [ ] Blog about the error how I created an own layout/style and why I did that.\n* [x] Automatic style reloading does not seem to work anymore.\n* [x] Use one XSL style sheets instead of 2. \n   * [x] The style sheet will need additional parameters to support both outputs.\n      * [x]  Create styling option `generation.style`.\n      * [x]  Set styling option in Java code.\n   * [x] Simplifying the rendering results will help with that as well.\n* [ ] Render all versions of website as one website. Implement a web server interface and a bundling implementation.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1649548869,"metadata":{"github-id":"UCE_lAHOFCNQW84-KreDzixVr0k"},"target":"5db87a7e990d47becadc7c6890fd8a171d982f01abb503487d028382373857ef","message":"I always knew, that design of the website server output was not perfect,\nbut when I looked at [Tufte CSS](https://edwardtufte.github.io/tufte-css/)\nand others styles like that of [mdbook](https://rust-lang.github.io/mdBook/),\nI emotionally really understood how bad the situation is.\n\nThere are already task in order to fix some basics, before tackling the general problem,\nbut there was no real ticket for the whole problem.\nThe current examples are #26 and #37.\nAs hard it is to admit my previous XML format was better, because it was easy to adjust.\nThe only real Problem, was the fact, that it relied on XSL,\nwhich is not a portable dependency.\nOther input formats were also not really supported,\nwhich is important, when different type of documents should be mixed (especially external ones)\nor you want to make it easy for other to contribute by support a common format.\n\nIn order to find the right design, there are multiple things needed to be done,\nin order to make it easy to switch between different outputs:\n* [X] Define relationship between, input, output and template/layout format.\nThis relationship needs to be supported by the website server.\nIt's important the same content in different input formats results in the same output\nas good as justifiably possible.\n-\u003e Every fully supported format should be transformed to custom XML format first,\nand then rendered to the target format.\n* [x] Support alternative HTML output without css class\nand Tufte CSS as styling.\nMake XSL stylesheet minimal and\ndocument stylesheet format supported by the web server.\n   * [x] This will be done for personal website, which has some private code first.\n   * [x] Implement alternative layout.\n      * [x] For some things in the alternative styling, the old styling is still active. -\u003e This will be addressed later.\n      * [x] Render article title.\n      * [x] Remove all css classes etc. -\u003e Some classes where removed. That seems to be enough.\n      * [x] Document both styles.\n   * [x] Create unified code based in private.\n   * [x] Make rendering of alternative style public.\n   * [x] Deploy alternative style to `splitcells.net` and document updated infrastructure.\n* [x] Use the new styling in order to further simplify own custom layout.\n  Custom layout should use vanilla HTML elements as much as possible.\n   * [x] Use sections instead of divs with special classes for chapters.\n   * [x] Simplify trees.\n* [x] Share XSL code as much as possible.\n  Make default layout XSL code the base of this and not the other way around.\n* [ ] Blog about the error how I created an own layout/style and why I did that.\n* [x] Automatic style reloading does not seem to work anymore.\n* [x] Use one XSL style sheets instead of 2. \n   * [x] The style sheet will need additional parameters to support both outputs.\n      * [x]  Create styling option `generation.style`.\n      * [x]  Set styling option in Java code.\n   * [x] Simplifying the rendering results will help with that as well.\n* [ ] Render all versions of website as one website. Implement a web server interface and a bundling implementation.\n* [ ] Create continuous task for improving minimal style.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1650147343,"metadata":{"github-id":"UCE_lAHOFCNQW84-KreDziyl2dQ"},"target":"5db87a7e990d47becadc7c6890fd8a171d982f01abb503487d028382373857ef","message":"I always knew, that design of the website server output was not perfect,\nbut when I looked at [Tufte CSS](https://edwardtufte.github.io/tufte-css/)\nand others styles like that of [mdbook](https://rust-lang.github.io/mdBook/),\nI emotionally really understood how bad the situation is.\n\nThere are already task in order to fix some basics, before tackling the general problem,\nbut there was no real ticket for the whole problem.\nThe current examples are #26 and #37.\nAs hard it is to admit my previous XML format was better, because it was easy to adjust.\nThe only real Problem, was the fact, that it relied on XSL,\nwhich is not a portable dependency.\nOther input formats were also not really supported,\nwhich is important, when different type of documents should be mixed (especially external ones)\nor you want to make it easy for other to contribute by support a common format.\n\nIn order to find the right design, there are multiple things needed to be done,\nin order to make it easy to switch between different outputs:\n* [X] Define relationship between, input, output and template/layout format.\nThis relationship needs to be supported by the website server.\nIt's important the same content in different input formats results in the same output\nas good as justifiably possible.\n-\u003e Every fully supported format should be transformed to custom XML format first,\nand then rendered to the target format.\n* [x] Support alternative HTML output without css class\nand Tufte CSS as styling.\nMake XSL stylesheet minimal and\ndocument stylesheet format supported by the web server.\n   * [x] This will be done for personal website, which has some private code first.\n   * [x] Implement alternative layout.\n      * [x] For some things in the alternative styling, the old styling is still active. -\u003e This will be addressed later.\n      * [x] Render article title.\n      * [x] Remove all css classes etc. -\u003e Some classes where removed. That seems to be enough.\n      * [x] Document both styles.\n   * [x] Create unified code based in private.\n   * [x] Make rendering of alternative style public.\n   * [x] Deploy alternative style to `splitcells.net` and document updated infrastructure.\n* [x] Use the new styling in order to further simplify own custom layout.\n  Custom layout should use vanilla HTML elements as much as possible.\n   * [x] Use sections instead of divs with special classes for chapters.\n   * [x] Simplify trees.\n* [x] Share XSL code as much as possible.\n  Make default layout XSL code the base of this and not the other way around.\n* [ ] Blog about the error how I created an own layout/style and why I did that.\n* [x] Automatic style reloading does not seem to work anymore.\n* [x] Use one XSL style sheets instead of 2. \n   * [x] The style sheet will need additional parameters to support both outputs.\n      * [x]  Create styling option `generation.style`.\n      * [x]  Set styling option in Java code.\n   * [x] Simplifying the rendering results will help with that as well.\n* [ ] Render all versions of website as one website. Implement a web server interface and a bundling implementation.\n   https://splitcells.net/net/splitcells/website/minimal/net/splitcells/martins/avots/website/index.html\n* [ ] Create continuous task for improving minimal style.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1650147346,"metadata":{"github-id":"UCE_lAHOFCNQW84-KreDziyl2dg"},"target":"5db87a7e990d47becadc7c6890fd8a171d982f01abb503487d028382373857ef","message":"I always knew, that design of the website server output was not perfect,\nbut when I looked at [Tufte CSS](https://edwardtufte.github.io/tufte-css/)\nand others styles like that of [mdbook](https://rust-lang.github.io/mdBook/),\nI emotionally really understood how bad the situation is.\n\nThere are already task in order to fix some basics, before tackling the general problem,\nbut there was no real ticket for the whole problem.\nThe current examples are #26 and #37.\nAs hard it is to admit my previous XML format was better, because it was easy to adjust.\nThe only real Problem, was the fact, that it relied on XSL,\nwhich is not a portable dependency.\nOther input formats were also not really supported,\nwhich is important, when different type of documents should be mixed (especially external ones)\nor you want to make it easy for other to contribute by support a common format.\n\nIn order to find the right design, there are multiple things needed to be done,\nin order to make it easy to switch between different outputs:\n* [X] Define relationship between, input, output and template/layout format.\nThis relationship needs to be supported by the website server.\nIt's important the same content in different input formats results in the same output\nas good as justifiably possible.\n-\u003e Every fully supported format should be transformed to custom XML format first,\nand then rendered to the target format.\n* [x] Support alternative HTML output without css class\nand Tufte CSS as styling.\nMake XSL stylesheet minimal and\ndocument stylesheet format supported by the web server.\n   * [x] This will be done for personal website, which has some private code first.\n   * [x] Implement alternative layout.\n      * [x] For some things in the alternative styling, the old styling is still active. -\u003e This will be addressed later.\n      * [x] Render article title.\n      * [x] Remove all css classes etc. -\u003e Some classes where removed. That seems to be enough.\n      * [x] Document both styles.\n   * [x] Create unified code based in private.\n   * [x] Make rendering of alternative style public.\n   * [x] Deploy alternative style to `splitcells.net` and document updated infrastructure.\n* [x] Use the new styling in order to further simplify own custom layout.\n  Custom layout should use vanilla HTML elements as much as possible.\n   * [x] Use sections instead of divs with special classes for chapters.\n   * [x] Simplify trees.\n* [x] Share XSL code as much as possible.\n  Make default layout XSL code the base of this and not the other way around.\n* [ ] Blog about the error how I created an own layout/style and why I did that.\n* [x] Automatic style reloading does not seem to work anymore.\n* [x] Use one XSL style sheets instead of 2. \n   * [x] The style sheet will need additional parameters to support both outputs.\n      * [x]  Create styling option `generation.style`.\n      * [x]  Set styling option in Java code.\n   * [x] Simplifying the rendering results will help with that as well.\n* [x] Render all versions of website as one website. Implement a web server interface and a bundling implementation.\n   https://splitcells.net/net/splitcells/website/minimal/net/splitcells/martins/avots/website/index.html\n* [ ] Create continuous task for improving minimal style.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1650147793,"metadata":{"github-id":"UCE_lAHOFCNQW84-KreDziyl3f4"},"target":"5db87a7e990d47becadc7c6890fd8a171d982f01abb503487d028382373857ef","message":"I always knew, that design of the website server output was not perfect,\nbut when I looked at [Tufte CSS](https://edwardtufte.github.io/tufte-css/)\nand others styles like that of [mdbook](https://rust-lang.github.io/mdBook/),\nI emotionally really understood how bad the situation is.\n\nThere are already task in order to fix some basics, before tackling the general problem,\nbut there was no real ticket for the whole problem.\nThe current examples are #26 and #37.\nAs hard it is to admit my previous XML format was better, because it was easy to adjust.\nThe only real Problem, was the fact, that it relied on XSL,\nwhich is not a portable dependency.\nOther input formats were also not really supported,\nwhich is important, when different type of documents should be mixed (especially external ones)\nor you want to make it easy for other to contribute by support a common format.\n\nIn order to find the right design, there are multiple things needed to be done,\nin order to make it easy to switch between different outputs:\n* [X] Define relationship between, input, output and template/layout format.\nThis relationship needs to be supported by the website server.\nIt's important the same content in different input formats results in the same output\nas good as justifiably possible.\n-\u003e Every fully supported format should be transformed to custom XML format first,\nand then rendered to the target format.\n* [x] Support alternative HTML output without css class\nand Tufte CSS as styling.\nMake XSL stylesheet minimal and\ndocument stylesheet format supported by the web server.\n   * [x] This will be done for personal website, which has some private code first.\n   * [x] Implement alternative layout.\n      * [x] For some things in the alternative styling, the old styling is still active. -\u003e This will be addressed later.\n      * [x] Render article title.\n      * [x] Remove all css classes etc. -\u003e Some classes where removed. That seems to be enough.\n      * [x] Document both styles.\n   * [x] Create unified code based in private.\n   * [x] Make rendering of alternative style public.\n   * [x] Deploy alternative style to `splitcells.net` and document updated infrastructure.\n* [x] Use the new styling in order to further simplify own custom layout.\n  Custom layout should use vanilla HTML elements as much as possible.\n   * [x] Use sections instead of divs with special classes for chapters.\n   * [x] Simplify trees.\n* [x] Share XSL code as much as possible.\n  Make default layout XSL code the base of this and not the other way around.\n* [ ] Blog about the error how I created an own layout/style and why I did that.\n* [x] Automatic style reloading does not seem to work anymore.\n* [x] Use one XSL style sheets instead of 2. \n   * [x] The style sheet will need additional parameters to support both outputs.\n      * [x]  Create styling option `generation.style`.\n      * [x]  Set styling option in Java code.\n   * [x] Simplifying the rendering results will help with that as well.\n* [x] Render all versions of website as one website. Implement a web server interface and a bundling implementation.\n   https://splitcells.net/net/splitcells/website/minimal/net/splitcells/martins/avots/website/index.html\n* [x] Create continuous task for improving minimal style.","files":null},{"type":6,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1651526750,"metadata":{"github-id":"UCE_lAHOFCNQW84-KreDzi1ejfI"},"target":"5db87a7e990d47becadc7c6890fd8a171d982f01abb503487d028382373857ef","message":"I always knew, that design of the website server output was not perfect,\nbut when I looked at [Tufte CSS](https://edwardtufte.github.io/tufte-css/)\nand others styles like that of [mdbook](https://rust-lang.github.io/mdBook/),\nI emotionally really understood how bad the situation is.\n\nThere are already task in order to fix some basics, before tackling the general problem,\nbut there was no real ticket for the whole problem.\nThe current examples are #26 and #37.\nAs hard it is to admit my previous XML format was better, because it was easy to adjust.\nThe only real Problem, was the fact, that it relied on XSL,\nwhich is not a portable dependency.\nOther input formats were also not really supported,\nwhich is important, when different type of documents should be mixed (especially external ones)\nor you want to make it easy for other to contribute by support a common format.\n\nIn order to find the right design, there are multiple things needed to be done,\nin order to make it easy to switch between different outputs:\n* [X] Define relationship between, input, output and template/layout format.\nThis relationship needs to be supported by the website server.\nIt's important the same content in different input formats results in the same output\nas good as justifiably possible.\n-\u003e Every fully supported format should be transformed to custom XML format first,\nand then rendered to the target format.\n* [x] Support alternative HTML output without css class\nand Tufte CSS as styling.\nMake XSL stylesheet minimal and\ndocument stylesheet format supported by the web server.\n   * [x] This will be done for personal website, which has some private code first.\n   * [x] Implement alternative layout.\n      * [x] For some things in the alternative styling, the old styling is still active. -\u003e This will be addressed later.\n      * [x] Render article title.\n      * [x] Remove all css classes etc. -\u003e Some classes where removed. That seems to be enough.\n      * [x] Document both styles.\n   * [x] Create unified code based in private.\n   * [x] Make rendering of alternative style public.\n   * [x] Deploy alternative style to `splitcells.net` and document updated infrastructure.\n* [x] Use the new styling in order to further simplify own custom layout.\n  Custom layout should use vanilla HTML elements as much as possible.\n   * [x] Use sections instead of divs with special classes for chapters.\n   * [x] Simplify trees.\n* [x] Share XSL code as much as possible.\n  Make default layout XSL code the base of this and not the other way around.\n* [x] Blog about the error how I created an own layout/style and why I did that.\n* [x] Automatic style reloading does not seem to work anymore.\n* [x] Use one XSL style sheets instead of 2. \n   * [x] The style sheet will need additional parameters to support both outputs.\n      * [x]  Create styling option `generation.style`.\n      * [x]  Set styling option in Java code.\n   * [x] Simplifying the rendering results will help with that as well.\n* [x] Render all versions of website as one website. Implement a web server interface and a bundling implementation.\n   https://splitcells.net/net/splitcells/website/minimal/net/splitcells/martins/avots/website/index.html\n* [x] Create continuous task for improving minimal style.","files":null},{"type":5,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1635902340,"metadata":{"github-id":"LE_lADOFCNQW84-KreDzwAAAAFLWBAZ"},"added":["documentation"],"removed":[]},{"type":5,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1635902340,"metadata":{"github-id":"LE_lADOFCNQW84-KreDzwAAAAFLWBAb"},"added":["enhancement"],"removed":[]},{"type":2,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1635903052,"metadata":{"github-id":"RTE_lADOFCNQW84-KreDzwAAAAFLWHGR"},"title":"Make it easy to support arbitrary input template and output formats.","was":"Make it easy to support arbitrary input formats and output styling."},{"type":2,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1635903290,"metadata":{"github-id":"RTE_lADOFCNQW84-KreDzwAAAAFLWI7v"},"title":"Make it easy to support arbitrary input, template and output formats.","was":"Make it easy to support arbitrary input template and output formats."},{"type":2,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1635904589,"metadata":{"github-id":"RTE_lADOFCNQW84-KreDzwAAAAFLWTPH"},"title":"Make it easy to support arbitrary input formats and output styling.","was":"Make it easy to support arbitrary input, template and output formats."},{"type":4,"author":{"id":"37314acb12deef6cac38223490bc1b720908d897"},"timestamp":1651526867,"metadata":{"github-id":"CE_lADOFCNQW84-KreDzwAAAAGFmZZo"},"status":2}]}