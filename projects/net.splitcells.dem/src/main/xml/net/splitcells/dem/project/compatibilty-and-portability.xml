<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns="http://splitcells.net/den.xsd" xmlns:p="http://splitcells.net/private.xsd"
         xmlns:s="http://splitcells.net/sew.xsd" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
         xmlns:g="http://splitcells.net/gal.xsd" xmlns:foaf="http://xmlns.com/foaf/0.1/"
         xmlns:e="http://splitcells.net/sen.xsd" description="compatibility and portability">
    <!--
        SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-or-later
        SPDX-FileCopyrightText: Contributors To The `net.splitcells.*` Projects
    -->
    <solution>
        <priority>
            <queue>
                <toDo>Define a minimal Java EBNF grammar via "java.code.verify" and antlr.
                    <toDo>For source code translations name resolution is required in order to support some,
                        basic Java class etc. like Stream.
                        <toDo>Consider donating to JavaParser if this works in the end as intended.</toDo>
                    </toDo>
                    <toDo>Create Grammar.</toDo>
                    <toDo xl:href="https://github.com/antlr/antlr4"/>
                    <toDo>Check only files, which are not part of the bootstrapping implementation.</toDo>
                    <idea>
                        <toDo>Remove dependency injection and only have basic configuration via static immutable
                            variables in order to simplify code for translation.
                        </toDo>
                        <toDo>Create an project to reintroduce dependency injection after the translation
                            project is working.
                        </toDo>
                    </idea>
                </toDo>
                <toDo>Create a translator that translates the program to Dlang,
                    because Dlang is very similar to Java und allows functional side effect free programming.
                </toDo>
                <toDo>Create a way to automatically generate the skeleton of environment integration code.</toDo>
                <toDo>Translate Dem to a Lisp langauge.</toDo>
                <toDo>Translate an actual project to a Lisp langauge.</toDo>
                <toDo>Remove reflection code.
                    <toDo>Generic configuration class can be implemented via a tree/stack
                        of config class and thereby removing the need for type mapping.
                    </toDo>
                    <toDo>Let Gel's table columns just use one common type
                        in order to omit downcasting.
                    </toDo>
                </toDo>
                <toDo>Split code into bootstrapping code and normal code.
                    Bootstrapping code contains Java or external dependency specific code.
                    Normal code has no Java or other external dependencies with exception to specific external
                    interfaces.
                    The amount of external dependencies should be minimized and be kept as simple as possible.
                    Minimize boostrapping code size.
                    <toDo>Replace assertj with reasoning system based on Bool.</toDo>
                </toDo>
            </queue>
            <unscheduled>
                <toDo>Learn OCaml.</toDo>
            </unscheduled>
        </priority>
    </solution>
    <objective>Ensure that a software project's dependencies like language, framework and platforms
        are easily replaceable. The replacement can be automatic or manual.
        <solution>Ensure that the software project is valid and only uses certain features,
            that makes it easy to migrate the project.
            <toDo>Standardize usage of Java feature by defining a subset of valid Java grammar and checking it.
                <toDo>Use different Grammar for Dem and subsequent projects,
                    because Dem is the base for subsequent projects, which should have higher restriction.
                    <toDo>Only some parts of Dem should use a different/unrestricted part.
                        This part should only be the Java-specific code.
                    </toDo>
                </toDo>
            </toDo>
            <toDo>Ensure that the code is easily translatable to other languages with minimal effort and manual work.
                <idea>
                    <idea>Support different paradigms.
                        <toDo>Object-Orientation mainly provides polymorphic tree transformations.
                            Dlang seems to be a good choice.
                        </toDo>
                        <todo>Support a very simple and basic version of functional programming
                            with an simple statically typed object system.
                            The object system, which is kind of an OOP-System only provides state interfaces.
                            The functions define the state transitions of the objects.
                        </todo>
                    </idea>
                    <idea>Support different type of data processing (i.e. typed
                        versus not typed, boxed versus primitive or objects
                        versus values.
                        See <quote>net.splitcells.gel.data.table.Tableuote>
                    for inspiration.</idea>
                </idea>
                <objective>Always translate code to other language automatically and test it, in order to be sure
                    that the code is portable.
                    <toDo>Create a translator which translate other projects to a different language.
                        The translator only has to translate projects complying with this project (compatibility and
                        portability).
                    </toDo>
                    <result>This would allow to check additional properties of the program before running it.</result>
                </objective>
            </toDo>
        </solution>
    </objective>
</project>