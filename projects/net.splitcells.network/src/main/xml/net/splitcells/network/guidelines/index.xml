<?xml version="1.0" encoding="UTF-8"?>
<article xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:xl="http://www.w3.org/1999/xlink" xmlns:x="http://www.w3.org/1999/xhtml"
         xmlns="http://splitcells.net/sew.xsd"
         xmlns:d="http://splitcells.net/den.xsd" xmlns:p="http://splitcells.net/private.xsd"
         xmlns:m="http://www.w3.org/1998/Math/MathML" xsi:schemaLocation="http://splitcells.net/sew.xsd sew.xsd">
    <meta>
        <!--
            SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-or-later
            SPDX-FileCopyrightText: Contributors To The `net.splitcells.*` Projects
        -->
        <title>
            <siteName/>'s Guidelines
        </title>
        <description>
            I created these code guidelines in order to do some thought
            experiments.
            Do not consider
            these code
            guidelines for
            your own
            code.
            <link>
                <text>If you do, people will hate you, and youâ€™ll be scorned by
                    friends and family.
                </text>
                <url>https://git-scm.com/book/en/v1/Git-Branching-Rebasing#The-Perils-of-Rebasing
                </url>
            </link>
        </description>
        <publication_date year="2018" month="04" day_of_month="29"/>
        <license>standard</license>
        <related_to>
            <url>
                <site_instance_purl/>
                /2020/01/06/discovery-based-networks-of-perspectives-and-changes
            </url>
        </related_to>
        <d:toDo>
            <d:toDo>Minimize guideline.</d:toDo>
            <d:toDo>Move framework specific guides to framework documentation or delete it,
                if this is covered by frameworks API.
            </d:toDo>
            <d:toDo>Document dependency lifecycle of injection and integration.</d:toDo>
            <d:todo>
                Meta Code Guidelines
                <d:todo>https://github.com/icy/bash-coding-style</d:todo>
                <d:todo>http://localhost:4000/white/index.html</d:todo>
            </d:todo>
            <d:toDo xl:href="https://en.wikipedia.org/wiki/Dynamic_program_analysis"/>
            <d:todo>
                assertions (error detecting during execution and testing)
                <d:todo>When to use assertions and when not.</d:todo>
                <d:todo>Assert condition on actual objects directly.
                    Do not assert
                    variables representing the
                    presence of a condition,
                    as it makes
                    debugging and error reporting
                    harder.
                    https://blog.smartcoders.xyz/2018/02/14/asserttrue-vs-assertthat-vs-assertj/
                </d:todo>
                <d:todo>Assertions should have access to the underlining objects for
                    better error reporting.
                </d:todo>
            </d:todo>
            <d:todo>consistency checks</d:todo>
            <d:todo>unit test</d:todo>
            <d:todo>integration test</d:todo>
            <d:todo>complete test</d:todo>
            <d:todo>naming conventions: suffixes</d:todo>
            <d:todo>naming conventions: verb, attribute, getter and setter
            </d:todo>
            <d:todo>naming conventions: Ensure state via active verbs as it makes
                short names and allows
                inefficient but simple
                implementations. i.e.
                package.state(INSTALLED) -> package.install (Note that
                the first
                version makes more sense
                in some
                cases. The first one can also be
                implemented as a wrapper
                for the second one.)
            </d:todo>
            <d:todo>up cast convention</d:todo>
            <d:todo>side effect free interfaces</d:todo>
            <d:todo>down cast convention: down casted objects should be not lead
                to interfaces with side
                effects (i.e. parting
                collection interface in
                multiple interfaces representing different access
                rights.).
            </d:todo>
            <d:todo>technical and domain specific interface: inheritance and
                composition rule
            </d:todo>
            <d:todo>Minimize the number of current migration to 1 migration per
                component.
            </d:todo>
            <d:todo>Avoid assertThat((boolean) ...)... in AssertJ as one may
                forget to write isTrue().
            </d:todo>
            <d:todo>Multi thread/process programming should not be about
                thread/process but about removing
                instruction
                dependencies.
            </d:todo>
            <d:todo>
                Every persistent task is part of a software project or a software
                project itself and should
                be
                contained inside a
                folder.
                <d:todo>A software project is metadata like the .git files of Git
                    repositories.
                    Another example are
                    the .idea folders of
                    Intellji IDE
                    projects.
                </d:todo>
                <d:todo>
                    If multiple software projects are added to the task folder,
                    it is
                    preferred to add software
                    projects to the task
                    folder. Wrapping the
                    task
                    folder
                    with software projects recursively does not
                    scale.
                    <d:todo>If possible one could create a software project folder
                        inside the folder
                        where all
                        software project files are
                        put. Make sure
                        to
                        make the folder name unique
                        i.e. ".meta.238" .
                    </d:todo>
                </d:todo>
            </d:todo>
            <d:todo>Make all assumtions visible (i.e. nullable variables via
                Optional).
            </d:todo>
            <d:todo>https://devhints.io/</d:todo>
            <d:todo>
                https://www.jwz.org/doc/worse-is-better.html
                <d:todo>Make consistent by making more simple things the consistent
                    ones.
                </d:todo>
                <d:todo>Make correct by making more simple things the correct ones.
                </d:todo>
            </d:todo>
            <d:toDo>Avoid software rewrites and prefer migration based development.</d:toDo>
            <d:toDo>Projects are likely to grow and get out of scope.</d:toDo>
            <d:toDo>Fork, join and cathedral development protocol.</d:toDo>
            <d:toDo>Programs should be primarily seen as tree/table transformers in order
                to simplify programming paradigm and language use.
            </d:toDo>
            <d:toDo>Migration based Development</d:toDo>
            <d:toDo>Configuration automation guidelines.</d:toDo>
            <d:toDo>Make it possible to tolerate out of date documentation.</d:toDo>
            <d:toDo>Create containment protocol for side effects in Java code.</d:toDo>
        </d:toDo>
    </meta>
    <chapter>
        <title>Goals</title>
        <paragraph>Guidelines describe, how something should be done or what the guiding principles are.
            It makes actions more reproducible and predictable.
            Guidelines are nothing more and nothing less.
            If these guidelines are overridden a reason should be present,
            and be documented or commented, if it is feasible.
        </paragraph>
        <paragraph>These guidelines refer to the Splitcells Network project.
            These guidelines do not handle communities and other social interactions.
            The management Communities and co. has to be done by themselves.
        </paragraph>
        <paragraph>For (programming) languages and document formats prefer
            using the most official or the most common guidelines,
            if there are no guidelines of this project applying to the
            aspect in question.
            In other words, language and documentation specific guidelines
            of this project try to only override public guidelines instead of
            writing complete custom guidelines from scratch.
        </paragraph>
    </chapter>
    <chapter>
        <title>Base Rule</title>
        <paragraph>The project structure, its contents and products has to
            represent a discovery based network of perspectives and changes.
            The project and its parts should be portable, extendable, adaptable,
            <link>
                <text>deletable</text>
                <url>https://programmingisterrible.com/post/139222674273/how-to-write-disposable-code-in-large-systems
                </url>
            </link>
            and comply with
            <link>
                <text>Perspective's guidelines</text>
                <post>/net/splitcells/symbiosis/perspective/index</post>
            </link>
            .
        </paragraph>
        <paragraph>The compliance with the
            <link>
                <text>Perspective's guidelines</text>
                <post>/net/splitcells/symbiosis/perspective/index</post>
            </link>
            specifically means,
            that the file and content path of a particular information
            (for an XML element,
            this would be the file path + the XPath pointing to the XML element)
            should identify and describe or at least summarize the content's
            meaning.
            This also means, that in an ideal case, one should be able to guess,
            where to look, for a particular content without knowing where
            the files are located
        </paragraph>
    </chapter>
</article>