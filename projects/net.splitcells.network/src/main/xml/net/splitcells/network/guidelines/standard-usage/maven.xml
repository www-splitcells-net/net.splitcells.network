<?xml version="1.0" encoding="UTF-8"?>
<article xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns="http://splitcells.net/sew.xsd"
         xmlns:d="http://splitcells.net/den.xsd">
    <meta>
        <!--
            SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-or-later
            SPDX-FileCopyrightText: Contributors To The `net.splitcells.*` Projects
        -->
        <title>Maven Guidelines</title>
    </meta>
    <chapter>
        <title>Maven POM Guidelines</title>
        <paragraph>Use Maven POM only for simple configurations and avoid complex custom-builds in any single project.
            If complex custom-builds cannot be avoided, try splitting up the project in multiple simpler ones,
            so that each build step is more easily understandable.
            This can sometimes be done, by having simple base projects,
            which are than combined via projects, that are dedicated to only merging projects into one.
        </paragraph>
        <paragraph>The reason for this is the fact, that in a Maven POM every component is dependent on every other
            component and that good logs or dependencies between components are hard to understand.
            This is caused by Maven's declarative design,
            which lacks double-entry bookkeeping regarding its inputs and outputs.
        </paragraph>
        <paragraph>This problem is a none issue (most of the time), when one applies plugins like surefire for testing,
            sets the version of the Java compiler or uses the spotbugs plugin in order to find bugs.
            All of these none issues have in common, that they are either setting something general
            or writing something general to a folder.
            When one starts to transform and convert files via code (like ANT via the AntRun) in the POM,
            things start to get complicated and hard to understand.
            Therefore, avoid writing complex transformation rules in Maven POMs and
            instead prefer simple mapping rules when possible.
        </paragraph>
        <paragraph>
            If complex file transformation rules are not avoidable,
            consider a dedicated plugin, that contains all possible transformation rules.
            Then one only needs to define the input paths and the outputs paths such a plugin.
            If the input and output paths are chosen smartly, one can also use the paths in order to understand
            the dependencies of POM components more easily.
            This is especially the case, when each input path has at most one corresponding output path.
        </paragraph>
        <chapter><title>Required Data</title>
            <paragraph>This is mainly based on
                <link>
                    <url>https://central.sonatype.org/publish/requirements/</url>
                    <text>Sonatype's release requirements</text>
                </link>.
                The following elements are required, in order to be releasable:</paragraph>
            <list>
                <item><quote>parent</quote> is required, in order to standardize POMs for non root POMs.</item>
                <item>name</item>
                <item>description</item>
                <item>url</item>
                <item>licenses/license</item>
                <item>scm/[url,connection,developerConnection]</item>
                <item><quote>developers/developer</quote>, but only the main developers are required.
                    It's best to list those people, who take responsibility for the project.</item>
            </list>
        </chapter>
        <chapter><title>Support Documentation</title>
            <paragraph>If there is any non-obvious problem with Maven or while using Maven,
                it is helpful to use the flags `--errors --debug` (which is equal to `-X and -e`),
                in order to get more details.
            </paragraph>
            <paragraph>Never exit a state with the current thread marked as interrupted,
                as this will make the test failed.
                Also, note that the error message will not be very useful in this case,
                if `--errors --debug`  is not used: `[ERROR] Failed to execute goal org.codehaus.mojo:exec-maven-plugin:1.1:java (default-cli) on project [...]: An exception occured while executing the Java class. java.lang.InterruptedException -> [Help 1]
            `</paragraph>
        </chapter>
    </chapter>
</article>