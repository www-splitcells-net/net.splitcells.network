<?xml version="1.0" encoding="UTF-8"?>
<article xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns="http://splitcells.net/sew.xsd"
         xmlns:d="http://splitcells.net/den.xsd">
    <meta>
        <!--
            SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-or-later
            SPDX-FileCopyrightText: Contributors To The `net.splitcells.*` Projects
        -->
        <title>General Code Guidelines</title>
        <d:toDo>Mark Java specifics as such or move them to a dedicated chapter.</d:toDo>
    </meta>
    <chapter>
        <title>Main Focus</title>
        <paragraph>If there is no reason otherwise, use common/external code conventions and guidelines by default.</paragraph>
        <paragraph>The programming code should prioritize portability, adaptability, stability, performance and readability.
            This can be made by making it easy to refactor the code or to translate it to a completely other language.
        </paragraph>
        <paragraph>
            Use double-entry bookkeeping for the inputs and the outputs of the program.
            This can be implemented via Logs.
            Inputs without any relation to the outputs of the program, should cause errors.
            Otherwise, the program's configuration and input gets hard to understand pretty quickly.
        </paragraph>
        <paragraph>Minimize side effects, as it makes it harder to understand a program.</paragraph>
    </chapter>
    <chapter>
        <title>Identifiers</title>
        <paragraph>Readability is preferred over compactness, but compactness is still important.
        </paragraph>
        <paragraph>Every full name should have an unambiguous meaning.
            This means a renaming would be valid in general,
            if every instance of the name can be renamed,
            while still maintaining the correct meaning.
            Names are preferred to abbreviation and abbreviation are preferred to symbols as a shorthand.
        </paragraph>
        <paragraph>If there is an inverse usage for a given method like<quote>isEmpty</quote>,
            consider creating a dedicated method.
            This minimizes the likelihood of misreading such an inverse usage.
            For example, it helps to create an <quote>isEmpty</quote> and an <quote>hasElements</quote> method,
            because it is relatively hard to distinguish <quote>someObject.doSomething().doSomtingeElse().isEmpty()
            </quote> and <quote>!someObject.doSomething().doSomtingeElse().isEmpty()</quote> from one another,
            if one just skim through the code.
        </paragraph>
        <paragraph>For method names prefer using a noun, if the of the method is to retrieve something.
            Use verbs instead, if the goal of the function is to do something or to change something.
            Use camelcase for identifiers by default and capital case with underscores for constants.
            For long names like testing methods do not use a name where every word is separated by an underscore,
            if the name is a sentence like <quote>test_performance_difference_of_assignments_and_tables</quote>.
            This simplifies the guidelines and is more compliant with existing code scanning tools for Java.
        </paragraph>
    </chapter>
    <chapter>
        <title>Testing, Runtime Checks and Assertions</title>
        <paragraph>It should be possible to execute the tests programmatically inside the program.
            An appropriate main method should be provided, so the tests can be executed as a program.
            This ensures that tests are nothing special and therefore independent of the build system.
        </paragraph>
        <paragraph>Everything should be tested.</paragraph>
        <paragraph>Any kind of error testing method like the `orElseThrow` method of Java's Optional class,
            should have a required error message argument.
            Otherwise, it is unnecessarily hard to debug errors of users, whose computer cannot be accessed.
            Such error messages or reports do not have to be statically typed,
            in order to make it easier to add error messages to code,
            which is often more important,
            than having easily processed error messages.
        </paragraph>
        <chapter>
            <title>Naming Convention</title>
            <paragraph>
                Every test name starts with a verb like every other method that's primary function is an action.
                Every test name should refer to the primarily tested thing (Object/Method/Function/Class),
                the tested feature, the tested situation and the tested result in that order
                (This is based on
                <link>
                    <text>Naming standards for unit tests by Roy Osherove</text>
                    <url>https://osherove.com/blog/2005/4/3/naming-standards-for-unit-tests.html</url>
                </link>
                ).
                All referred things in the method name, should be referred to, by its original name.
            </paragraph>
            <paragraph>Inside tests following naming scheme can be used: a test subject is creating a test product
                that is verified or validated in order to create a test result. A test is successful, if the test
                result is positive.
            </paragraph>
        </chapter>
        <chapter>
            <title>Optionality of Runtime Error Checking</title>
            <paragraph>
                Implicit runtime tests are generally speaking optional and not part of the main interface contract.
                In other words no code is allowed to rely on the fact,
                that it will be informed about errors implicitly.
                This is done, so that the practical best runtime performance can be measured,
                when the software's performance is compared to others.
                This way, there is less incentive's to omit writing certain runtime checks.
            </paragraph>
            <paragraph>It has to be explicitly stated, if, for instance, argument checking is part of the interface.
                These types of checks are not considered to be tests in this context.
            </paragraph>
        </chapter>
    </chapter>
    <chapter>
        <title>Code Formatting</title>
        <chapter>
            <title>Code Format</title>
            <paragraph>The code should be formatted in such a way that the
                required space is minimized and
                the readability and navigability of the text is maximized.
                Empty lines are omitted, if indentation is enough to easily separate code blocks.
            </paragraph>
            <paragraph>
                Trailing special symbols like commas in lists are preferred to leading symbols,
                as this is the most common way.
                Thereby, generally speaking, the overall structure of the source code is visible on the left side,
                whereas the meaning of the structure is located on the right side.
            </paragraph>
            <paragraph>If a body contains many variables, that are set procedurally,
                consider declaring all variables at the start of the body.
            </paragraph>
        </chapter>
        <chapter>
            <title>Settings for Automatic Formatting</title>
            <paragraph>Automatic code styling/formatting should never remove already present new line characters,
                as otherwise it is hard to structure large code statements.
                The automatic formatting should also not add new line symbols,
                as this makes it harder to structure flowing text,
                where long lines are more acceptable.
                In XML/XSL automatically added new line symbols also create problems,
                as these may add new unintended meaning.
                In most cases, during automatic formatting only whitespaces (without new line symbols) between symbols should be normalized.
            </paragraph>
        </chapter>
    </chapter>
    <chapter>
        <title>Dependencies</title>
        <paragraph>
            Maximize the replace ability of external dependencies.
            Minimize dependency on concrete versions of the dependencies.
            Prefer own interfaces and avoid accessing external things.
            Use dependency injection via static methods as this supports most paradigms and implementations.
            This also supports
            dependency injection of general objects like lists nicely.
        </paragraph>
        <paragraph>Minimize the number of extern dependencies that are explicitly supported as these can cause
            a maintenance burden. Minimize side effects between dependencies.
            For example, in an ideal case transitive dependencies are not shared between dependencies.
        </paragraph>
        <paragraph>If there are not enough resources or if it is not optimal to develop
            and maintain a piece of required functionality, then use a dependency in order to get this functionality
            and declare the functionality of the dependency as something that is out of scope of the project.
            The support, usage and extension of the dependency might still be part of the project.
        </paragraph>
        <paragraph>Minimize direct dependencies between different things inside the project
            in order to easier analyse the effect of one piece of code to the rest of the project.
        </paragraph>
    </chapter>
    <chapter>
        <title>Support</title>
        <paragraph>Prefer placing support documentation for errors and similar in program code,
            instead of documentation, as this is more stable regarding automatic code refactoring.
            This can be done by adding runtime checks with an extensive error message.
        </paragraph>
        <paragraph>If a support documentation is needed, try to structure it in the form of a decision tree,
            that finds the appropriate problem and solution given a set of symptoms.
        </paragraph>
    </chapter>
    <chapter>
        <title>Java Specifics</title>
        <paragraph>Inheritance works great as adhoc wrappers and type and implementation extenders, but nothing more.
            Inheritance does not support swapping out the parent implementation, which makes it often not portable in practice.
        </paragraph>
    </chapter>
    <chapter>
        <title>External Guidelines</title>
        <paragraph>The following external code guidelines can be considered for this project.
            The guidelines are ordered by descending priority:
        </paragraph>
        <list>
            <link url="https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/TIGER_STYLE.md">Tiger Style by TigerBeetle</link>
        </list>
    </chapter>
</article>