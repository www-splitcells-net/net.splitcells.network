<?xml version="1.0" encoding="UTF-8"?>
<article xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns="http://splitcells.net/sew.xsd"
         xmlns:d="http://splitcells.net/den.xsd">
    <meta>
        <!--
            SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-or-later
            SPDX-FileCopyrightText: Contributors To The `net.splitcells.*` Projects
        -->
        <title>Java Guidelines</title>
        <d:toDo>Prefer whitespace over tabs,
            because it is most portable and one has most control regarding its rendering.
        </d:toDo>
    </meta>
    <chapter>
        <title>Code Conventions</title>
        <paragraph>Follow the code conventions of the public majority by default.
            Here are only things are listed, that deviate from that or are controversial.
        </paragraph>
        <paragraph>Use only private or public visibility modifier.
            Method arguments are implicitly final.
            The source code has to comply with <quote>net.splitcells.dem</quote>'s Java grammar.
            Classes must not be final, because this is useful for <quote>net.splitcells.network.community.via.javadoc</quote>.
        </paragraph>
    </chapter>
    <chapter>
        <title>Java's Limitations</title>
        <paragraph>Here are problems encountered with Java listed and not solved.
            These should be considered, when an alternative language to Java is searched.
        </paragraph>
        <paragraph>There is no known way, in order to define a static API in Java in a similar portable, easy,
            performant and adaptable way,
            like C header files.
            The most portable way seems to be the usage of the service locator pattern and similar patterns,
            but the resulting code requires some non-trivial boiler code.
        </paragraph>
        <paragraph>Use Java records only for primitive attributes, function arguments or return values,
            <link url="https://softwaregarden.dev/en/posts/new-java/records/should-write-equals-and-hashcode/">
                as complex attributes cause problems via their identity, equals and hashcode.
            </link>
        </paragraph>
        <paragraph>Inheritance works great as adhoc wrappers and type and implementation extenders, but nothing more.
            Inheritance does not support swapping out the parent implementation, which makes it often not portable in practice.
        </paragraph>
    </chapter>
    <chapter>
        <title>Identifiers</title>
        <paragraph>Readability is preferred over compactness, but compactness is still important.
        </paragraph>
        <paragraph>Every full name should have an unambiguous meaning.
            This means a renaming would be valid in general,
            if every instance of the name can be renamed,
            while still maintaining the correct meaning.
            Names are preferred to abbreviation and abbreviation are preferred to symbols as a shorthand.
        </paragraph>
        <paragraph>If there is an inverse usage for a given method like<quote>isEmpty</quote>,
            consider creating a dedicated method.
            This minimizes the likelihood of misreading such an inverse usage.
            For example, it helps to create an <quote>isEmpty</quote> and an <quote>hasElements</quote> method,
            because it is relatively hard to distinguish <quote>someObject.doSomething().doSomtingeElse().isEmpty()
            </quote> and <quote>!someObject.doSomething().doSomethingElse().isEmpty()</quote> from one another,
            if one just skim through the code.
        </paragraph>
        <paragraph>For method names prefer using a noun, if the of the method is to retrieve something.
            Use verbs instead, if the goal of the function is to do something or to change something.
            Use camelcase for identifiers by default and capital case with underscores for constants.
            For long names like testing methods do not use a name where every word is separated by an underscore,
            if the name is a sentence like <quote>test_performance_difference_of_assignments_and_tables</quote>.
            This simplifies the guidelines and is more compliant with existing code scanning tools for Java.
        </paragraph>
    </chapter>
    <chapter>
        <title>Abbreviations</title>
        <paragraph>Avoid these if possible, because they are often not intuitively understandable.
            There are reasonable exceptions, where the abbreviations are intuitively understandable:
        </paragraph>
        <list>
            <item>Impl</item>
            <item>Doc</item>
        </list>
    </chapter>
    <chapter>
        <title>Remote Debugging</title>
        <paragraph>Use following command in order to start the Java process.
            <quote>java -agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=8000 -jar [path to jar, that is
                executed]
            </quote>
        </paragraph>
        <paragraph>In this case <quote>suspend=y</quote> let's pauses the program start,
            until something connects to the debugging port.
        </paragraph>
    </chapter>
    <chapter>
        <title>Lombok Usage</title>
        <paragraph>Any not explicitly allowed usage of Lombok is prohibited,
            in order to limit dependencies, that are hard to replace and to avoid unintended effects caused by Lombok.
        </paragraph>
        <paragraph>Val is used as a syntactic sugar for <quote>final var</quote>.
            Lombok was removed temporary in the past,
            as val was increasing the compile time by about a factor of 10.
            This was caused by the fact, that in the past Lombok needed to do the type inference by itself.
            Since Lombok 1.18.22 val is implemented by replacing it with <quote>final var</quote>.
            This should be a lot faster regarding the compile time.
        </paragraph>
        <paragraph><quote>@Accessors(chain=true)</quote>,<quote>@Setter</quote> and <quote>@Getter</quote> is used to create getters and setters,
            in order to minimize boilerplate code and to focus on definitions.
            This also makes it easy to see,
            when only some getters or setters are overwritten with custom implementations.
            It is preferred but not possible to create getters without prefixes and setters with a set prefix,
            as the get prefix does not provide really needed/useful info.
            The get prefix is used in order to differentiate between static and not static methods
            This is not required, but comes handy, in order to reason,
            why static getters or constructors do not use the same get prefix.
            <quote>@Accessors(fluent=true)</quote>
            is therefore not used.
            Setter prefixes are required in order to differentiate getters and withers.
        </paragraph>
        <paragraph>
            <quote>@EqualsAndHashCode</quote>
            and <quote>@Data</quote> are primarily used for data objects.
        </paragraph>
        <paragraph>
            <quote>@ExtensionMethod</quote>
            would be nice, in order to extend existing classes like String,
            but this feature is experimental and has bugs.
        </paragraph>
        <paragraph>
            <quote>@Delegate</quote>
            would be an excellent feature for aspects and such,
            but this feature does not work, if only some methods are manually overridden.
            Furthermore, this feature may even be removed from Lombok according to its
            <link url="https://projectlombok.org/features/experimental/Delegate">documentation</link>.
        </paragraph>
    </chapter>
    <chapter>
        <title>Java Syntax</title>
        <paragraph>Do not use Java's naming convention regarding generic parameters,
            as this makes it hard, when the generic parameter has a special meaning,
            that is not easy to encode via 1 character.
            So, this rule can also be disabled in code scanning.
        </paragraph>
    </chapter>
</article>