<?xml version="1.0" encoding="UTF-8"?>
<article xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns="http://splitcells.net/sew.xsd"
         xmlns:d="http://splitcells.net/den.xsd">
    <meta>
        <!--
            SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-or-later
            SPDX-FileCopyrightText: Contributors To The `net.splitcells.*` Projects
        -->
        <title>Backwards Compatibility</title>
    </meta>
    <chapter>
        <title>Backwards Compatible Development</title>
        <chapter>
            <title>Technicals</title>
            <paragraph>Make clear what is guaranteed and do this only via an explicit public interface.
                Prefer backward compatible changes to backward incompatible changes.
                Make as much undefined as possible in order to minimize the set of guarantees.
                Breaking other software, because it relied on implementation specifics is better,
                than breaking other software via incompatible API changes.
                Feature flags are your friend.
            </paragraph>
            <paragraph>Exceptions are not considered to be part of the API.
                Only unchecked exceptions are used.
            </paragraph>
        </chapter>
        <chapter>
            <title>Fast Function Removal Protocol</title>
            <paragraph>If there are not many users of the affected function or
                if the migration costs for the code users are reasonable,
                the fast protocol can be considered.
                In this case, the removal should be done with a minimum amount of commits and time.
                After the removal is done, the rest of the main project's code still needs to work.
                Any required adjustments for the function removal are part of the function removal and
                should be done in the same time.
                In other words, do not break the build with a function removal.
            </paragraph>
        </chapter>
        <chapter>
            <title>Slow Function Removal Protocol</title>
            <paragraph>When a function is to be removed, that is important for code users and is used often,
                prefer the following protocol:</paragraph>
            <list>
                <item>Mark function as deprecated and thereby create compile time warnings.</item>
                <item>Create warning log message, when the deprecated method is executed.
                    Users, maintainers and developers are thereby warned about the deprecation.
                </item>
                <item>Create error log message, in order to create urgency.</item>
                <item>Create feature flag for function and enable function by default.</item>
                <item>Make the feature disabled by default via the feature flag.</item>
                <item>Drop support for the function and mark it as unsupported.</item>
                <item>Move the deprecated function to another project, so it's not included in the project.
                    Instead the function will be injected into the project via the other project.
                    This step may not be important and may be ignored.
                </item>
            </list>
        </chapter>
    </chapter>
</article>