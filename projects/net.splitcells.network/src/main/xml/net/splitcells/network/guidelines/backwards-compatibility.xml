<?xml version="1.0" encoding="UTF-8"?>
<article xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns="http://splitcells.net/sew.xsd"
         xmlns:d="http://splitcells.net/den.xsd">
    <meta>
        <!--
            SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-or-later
            SPDX-FileCopyrightText: Contributors To The `net.splitcells.*` Projects
        -->
        <title>Backwards Compatibility</title>
        <d:toDo>Consider a versioning system or migration automation via OpenRewrite,
            in order to improve or to guide backwards compatibility.
        </d:toDo>
    </meta>
    <chapter>
        <title>Backwards Compatibility Guarantees</title>
        <paragraph>There is currently no guarantee of backwards compatibility.
            Absolute backward compatibility creates a maintenance burden,
            that currently has no benefits.
        </paragraph>
        <paragraph>We do not break backward compatibility just for fun.
            Many API changes are located and categorized in the changelogs of the corresponding project.
            Breaking changes are tried to be omitted, but there is no guarantee for that.
        </paragraph>
        <paragraph>You can try to decrease the likelihood of breaking a certain feature,
            by contributing an appropriate test case/suite for this feature.
            Regardless of that, keep in mind, that there is no guarantee of backwards
            compatibility.
        </paragraph>
        <paragraph>Forwards compatibility is not a goal.</paragraph>
    </chapter>
    <chapter>
        <title>Backwards Compatible Development</title>
        <chapter>
            <title>Technicals</title>
            <paragraph>Make clear what is guaranteed and do this only via an explicit public interface.
                Prefer backward compatible changes to backward incompatible changes.
                Make as much undefined as possible in order to minimize the set of guarantees.
                Breaking other software, because it relied on implementation specifics is better,
                than breaking other software via incompatible API changes.
                Feature flags are your friend.
            </paragraph>
            <paragraph>Exceptions are not considered to be part of the API.
                Only unchecked exceptions are used.
            </paragraph>
        </chapter>
        <chapter>
            <title>Migration Based Development</title>
            <paragraph>When a function is to be removed, that is important for code users and is used often,
                prefer the following protocol, in order to avoid broken builds or functionality.
                Steps can be skipped, if doing them are not useful for the project:
            </paragraph>
            <list>
                <item>Mark the function as deprecated and thereby create compile time warnings.</item>
                <item>Create a warning log message, when the deprecated method is executed.</item>
                <item>Create error log message, in order to create urgency.</item>
                <item>Create feature flag for function and enable function by default.</item>
                <item>Make the feature disabled by default via the feature flag.</item>
                <item>Drop support for the function and mark it as unsupported.</item>
                <item>Delete the function, if it is not important enough.
                    Alternatively move the function to a different deprecation project,
                    so it's not included in the original project.
                    Instead, the function will be injected into the original project via the deprecation project.
                </item>
            </list>
            <paragraph>If many slow function removals are present,
                this is called migration based development,
                as it allows to change many things quickly at low cost in the near future.
                This makes it possible to turn technical debt into a technical investment.
            </paragraph>
        </chapter>
    </chapter>
</article>